/* Copyright 2013-2020 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure particle pushers. Those pushers can then be selected by
 * a particle species in species.param and speciesDefinition.param
 */

#pragma once


namespace picongpu
{
    struct particlePusherAccelerationParam
    {
        /** Define strength of constant and homogeneous accelerating
         *  electric field in SI per dimension.
         */

        /** unit: Volt / meter */
        static constexpr float_64 AMPLITUDEx_SI = 0.0;

        /**
         * The moving window propagation direction
         * unit: Volt / meter
         * (1e11 V/m = 1 GV/cm)
         */
        static constexpr float_64 AMPLITUDEy_SI = -1.e11;

        /** unit: Volt / meter */
        static constexpr float_64 AMPLITUDEz_SI = 0.0;

        /** Acceleration duration
         *  unit: second
         */
        static constexpr float_64 ACCELERATION_TIME_SI = 10000.0 * ::picongpu::SI::DELTA_T_SI;
    };

    namespace particlePusherVay
    {
        /** Precision of the square roots during the push step
         *  - precision32Bit
         *  - precision64Bit
         */
        namespace sqrt_Vay = precision64Bit;
    }

    namespace particlePusherHC
    {
        /** Precision of the square roots during the push step
         *  - precision32Bit
         *  - precision64Bit
         */
        namespace sqrt_HC = precision64Bit;
    }    

    namespace particlePusherAxel
    {

        enum TrajectoryInterpolationType
        {
            LINEAR = 1u,
            NONLINEAR = 2u
        };
        constexpr TrajectoryInterpolationType TrajectoryInterpolation = LINEAR;

    }

    namespace particles
    {
    namespace pusher
    {
        struct HC;
        struct Vay;
        struct Boris;
        struct Photon;
        struct Acceleration;
        struct Free;
        struct Probe;
        struct ReducedLandauLifshitz;
#if(SIMDIM==DIM3)
        struct Axel;
#endif
    } // namespace pusher
    } // namespace particles

    namespace particlePusherProbe
    {
        /** Also push the probe particles?
         *
         * In many cases, probe particles are static throughout the simulation.
         * This option allows to set an "actual" pusher that shall be used to
         * also change the probe particle positions.
         *
         * Examples:
         * - particles::pusher::Boris
         * - particles::pusher::[all others from above]
         * - void (no push)
         */
        using ActualPusher = void;
    }

} // namespace picongpu
