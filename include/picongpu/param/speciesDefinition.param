/* Copyright 2013-2019 Rene Widera, Benjamin Worpitz, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define particle species.
 *
 * This file collects all previous declarations of base (reference) quantities
 * and configured solvers for species and defines particle species. This
 * includes "attributes" (lvalues to store with each species) and "flags"
 * (rvalues & aliases for solvers to perform with the species for each timestep
 * and ratios to base quantities). With those information, a `Particles` class
 * is defined for each species and then collected in the list
 * `VectorAllSpecies`.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "picongpu/particles/Particles.hpp"

#include <pmacc/particles/Identifier.hpp>
#include <pmacc/compileTime/conversion/MakeSeq.hpp>
#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/particles/traits/FilterByFlag.hpp>
#include <pmacc/compileTime/String.hpp>

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position< position_pic >,
    momentum,
    weighting
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/

/*--------------------------- photons -------------------------------------------*/

value_identifier( float_X, MassRatioPhotons, 0.0 );
value_identifier( float_X, ChargeRatioPhotons, 0.0 );

using ParticleFlagsPhotons = MakeSeq_t<
    particlePusher< particles::pusher::Photon >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    massRatio< MassRatioPhotons >,
    chargeRatio< ChargeRatioPhotons >
>;

/* define species photons */
using PIC_Photons = Particles<
    PMACC_CSTRING( "ph" ),
    ParticleFlagsPhotons,
    DefaultParticleAttributes
>;

/*--------------------------- electrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioElectrons, 1.0 );
value_identifier( float_X, ChargeRatioElectrons, 1.0 );

using ParticleFlagsElectrons = MakeSeq_t<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioElectrons >,
    chargeRatio< ChargeRatioElectrons >
#if( ENABLE_SYNCHROTRON_PHOTONS == 1 )
    , synchrotronPhotons< PIC_Photons >
#endif
>;

/* define species electrons */
using PIC_Electrons = Particles<
    PMACC_CSTRING( "e" ),
    ParticleFlagsElectrons,
    DefaultParticleAttributes
>;

/*--------------------------- ions -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioIons, 1836.152672 );
value_identifier( float_X, ChargeRatioIons, -1.0 );

/* ratio relative to BASE_DENSITY */
value_identifier( float_X, DensityRatioIons, 1.0 );

using ParticleFlagsIons = MakeSeq_t<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioIons >,
    chargeRatio< ChargeRatioIons >,
    densityRatio< DensityRatioIons >,
    atomicNumbers< ionization::atomicNumbers::Hydrogen_t >
>;

/* define species ions */
using PIC_Ions = Particles<
    PMACC_CSTRING( "i" ),
    ParticleFlagsIons,
    DefaultParticleAttributes
>;

/*########################### end species ####################################*/

/** All known particle species of the simulation
 *
 * List all defined particle species from above in this list
 * to make them available to the PIC algorithm.
 */
using VectorAllSpecies = MakeSeq_t<
    PIC_Electrons,
    PIC_Ions
#if( ENABLE_SYNCHROTRON_PHOTONS == 1 )
    , PIC_Photons
#endif
>;

} // namespace picongpu
