/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

namespace picongpu
{
    namespace colorScales
    {
        namespace none
        {
            HDINLINE void addRGB( const float3_X&,
                                  const float_X,
                                  const float_X )
            {
                return;
            }
        }

        namespace gray
        {
            HDINLINE void addRGB( float3_X& img,
                                  const float_X value,
                                  const float_X opacity )
            {
                const float3_X myChannel( 1.0, 1.0, 1.0 );
                img = img
                      - opacity * float3_X( myChannel.x() * img.x(),
                                               myChannel.y() * img.y(),
                                               myChannel.z() * img.z() )
                      + myChannel * value * opacity;
            }
        }

        namespace grayInv
        {
            HDINLINE void addRGB( float3_X& img,
                                  const float_X value,
                                  const float_X opacity )
            {
                const float3_X myChannel( 1.0, 1.0, 1.0 );
                img = img
                      - opacity * float3_X( myChannel.x() * img.x(),
                                               myChannel.y() * img.y(),
                                               myChannel.z() * img.z() )
                      + myChannel * ( 1.0_X - value ) * opacity;
            }
        }

        namespace red
        {
            HDINLINE void addRGB( float3_X& img,
                                  const float_X value,
                                  const float_X opacity )
            {
                const float3_X myChannel( 1.0, 0.0, 0.0 );
                img = img
                      - opacity * float3_X( myChannel.x() * img.x(),
                                               myChannel.y() * img.y(),
                                               myChannel.z() * img.z() )
                      + myChannel * value * opacity;
            }
        }

        namespace green
        {
            HDINLINE void addRGB( float3_X& img,
                                  const float_X value,
                                  const float_X opacity )
            {
                const float3_X myChannel( 0.0, 1.0, 0.0 );
                img = img
                      - opacity * float3_X( myChannel.x() * img.x(),
                                               myChannel.y() * img.y(),
                                               myChannel.z() * img.z() )
                      + myChannel * value * opacity;
            }
        }

        namespace blue
        {
            HDINLINE void addRGB( float3_X& img,
                                  const float_X value,
                                  const float_X opacity )
            {
                const float3_X myChannel( 0.0, 0.0, 1.0 );
                img = img
                      - opacity * float3_X( myChannel.x() * img.x(),
                                               myChannel.y() * img.y(),
                                               myChannel.z() * img.z() )
                      + myChannel * value * opacity;
            }
        }

    }
}
