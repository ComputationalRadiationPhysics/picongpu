/* Copyright 2019-2023 Finn-Ole Carstens
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


#include "picongpu/defines.hpp"

namespace picongpu
{
    namespace plugins
    {
        namespace shadowgraphy
        {
            namespace params
            {
                /**
                 * The time integration part of the plugin will be called each tRes'ed step
                 * until simNumT / tRes steps after the start of the integration in the .cfg file.
                 * Make sure that the Nyquist-Shannon theorem is fulfilled `tRes * dt * c < lambda_probe / 2`
                 */
                constexpr unsigned int tRes = 2;
                /**
                 * A Tukey-like, time-domain window function with sinusoidal slopes will be applied
                 * if tWfBuffer != 0. The sinusoidal slopes have a duration of tWfBuffer / tRes in PIConGPU
                 * timesteps.
                 */
                constexpr unsigned int tWfBuffer = 32;

                //! Transverse resolution of shadowgram in x direction
                constexpr unsigned int xRes = 1;
                //! Transverse resolution of shadowgram in y direction
                constexpr unsigned int yRes = 1;
                // Helper variable for symmetric window function size
                constexpr int posWfSize = 12;
                /**
                 * A Tukey-like, time-domain window function with sinusoidal slopes will be
                 *  applied if posWfSizeX != 0. The slope length is posWfSizeX.
                 */
                constexpr int posWfSizeX = posWfSize / xRes;
                /**
                 * A Tukey-like, time-domain window function with sinusoidal slopes will be
                 *  applied if posWfSizeX != 0. The slope length is posWfSizeX.
                 */
                constexpr int posWfSizeY = posWfSize / yRes;

                // Numerical Aperture
                //! Size of the numerical aperture to remove side-scattered light
                constexpr float numericalAperture = 0.23;
                //! Sinusoidal slopes over NA * k < k_perp < (NA * k + NA * k_probe) in the numerical aperture
                constexpr float numericalApertureWfSize = 0.5;

                // Bandpass filter
                //! Central wavelength for the band-pass filter
                constexpr float centralLambda = 750e-9;
                //! Central frequency for the band-pass filter
                constexpr float centralOmega = 2.0 * PI * sim.si.getSpeedOfLight() / centralLambda;
                //! Plateaue size for band-pass filter
                constexpr float dLambda = 20e-9;
                //! Ramp size for band-pass filter window function
                constexpr float dLambdaWf = 20e-9;

                //! Smallest frequency for plateau value in band-pass filter
                constexpr float omegaMin = 2.0 * PI * sim.si.getSpeedOfLight() / (centralLambda + dLambda);
                //! Largest frequency for plateau value in band-pass filter
                constexpr float omegaMax = 2.0 * PI * sim.si.getSpeedOfLight() / (centralLambda - dLambda);

                //! Smallest frequency for window function
                constexpr float omegaWfMin
                    = 2.0 * PI * sim.si.getSpeedOfLight() / (centralLambda + dLambda + dLambdaWf);
                //! Largest frequency for window function
                constexpr float omegaWfMax
                    = 2.0 * PI * sim.si.getSpeedOfLight() / (centralLambda - dLambda - dLambdaWf);
            } // namespace params


            namespace masks
            {
                /** Tukey-like position domain window function
                 *
                 * Time domain window function that will be multiplied with the electric and magnetic fields
                 * in time-position domain to reduce ringing artifacts in the omega domain after the DFT.
                 * The implemented window function is a Tukey-Window with sinusoidal slopes.
                 *
                 * @param i cell index in x direction
                 * @param j cell index in y direction
                 * @param pluginNumX amount of cells in x direction for resulting shadowgram
                 * @param pluginNumY amount of cells in y direction for resulting shadowgram
                 * @return value in the range [0.0, 1.0]
                 */
                HINLINE float_64 positionWf(int i, int j, int pluginNumX, int pluginNumY)
                {
                    float_64 xFactor = 1.0;

                    if(i <= params::posWfSizeX)
                    {
                        xFactor = (1.0 - math::cos(PI * i / float_64(params::posWfSizeX))) / 2.0;
                    }
                    else if((i > (pluginNumX - params::posWfSizeX)))
                    {
                        xFactor
                            = math::cos(PI * (i - (pluginNumX - params::posWfSizeX)) / float_64(params::posWfSizeX))
                                / 2.0
                            + 0.5;
                    }

                    float_64 yFactor = 1.0;

                    if(j <= params::posWfSizeY)
                    {
                        yFactor = (1.0 - math::cos(PI * j / float_64(params::posWfSizeY))) / 2.0;
                    }
                    else if((j > (pluginNumY - params::posWfSizeY)))
                    {
                        yFactor
                            = math::cos(PI * (j - (pluginNumY - params::posWfSizeY)) / float_64(params::posWfSizeY))
                                / 2.0
                            + 0.5;
                    }

                    return xFactor * yFactor;
                }

                /**  Tukey-like time domain window function
                 *
                 * Time domain window function that will be multiplied with the electric and magnetic fields
                 * in time-position domain to reduce ringing artifacts in the omega domain after the DFT.
                 * The implemented window function is a Tukey-Window with sinusoidal slopes.
                 *
                 * @param t timestep from 0 to simNumT
                 * @param simNumT amount of total time steps for time integration from plugin
                 * @return value in the range [0.0, 1.0]
                 */
                HINLINE float_64 timeWf(int t, int simNumT)
                {
                    float_64 tFactor = 1.0;

                    int pluginNumT = simNumT / params::tRes;
                    float pluginWfSize = params::tWfBuffer / params::tRes;

                    if(t < pluginWfSize)
                    {
                        tFactor = (1.0 - math::cos(PI * t / float_64(pluginWfSize))) / 2.0;
                    }
                    else if((t > (pluginNumT - pluginWfSize)))
                    {
                        tFactor
                            = math::cos(PI * (t - (pluginNumT - pluginWfSize)) / float_64(pluginWfSize)) / 2.0 + 0.5;
                    }

                    return tFactor;
                }


                /** Band-pass filter with sinusoidal slopes
                 *
                 * Calculate filter for electric and magnetic field in Fourier space.
                 * The function returns 1 for frequencies between `params::omegaMin` and `params::omegaMax`.
                 * Furthermore, sinusoidal slopes are implemented like a Tukey window function, that reduce
                 * ringing artifacts before the inverse DFT back to time domain.
                 *
                 * @param omeganonabs frequency in SI units
                 * @return value in the range [0.0, 1.0]
                 */
                HINLINE float_64 frequencyFilter(float_64 omeganonabs)
                {
                    float_64 const omega = math::abs(omeganonabs);

                    float_64 const dOmegaMin = params::omegaMin - params::omegaWfMin;
                    float_64 const dOmegaMax = params::omegaWfMax - params::omegaMax;

                    if((omega >= params::omegaMin) && (omega <= params::omegaMax))
                    {
                        return 1.0;
                    }
                    else if((omega > params::omegaWfMin) && (omega < params::omegaMin))
                    {
                        return (1.0 - math::cos(PI * (omega - params::omegaMin + dOmegaMin) / dOmegaMin)) / 2.0;
                    }
                    else if((omega > params::omegaMax) && (omega < params::omegaWfMax))
                    {
                        return (1.0 + math::cos(PI * (omega - params::omegaMax) / dOmegaMax)) / 2.0;
                    }
                    else
                    {
                        return 0.0;
                    }
                }

                /** Numerical aperture with sinusoidal slopes
                 *
                 * Calculate filter for electric and magnetic field in Fourier space.
                 * The function mimics the Numerical Aperture of lenses in an experimental setup by returning
                 * 0 for side-scattered light. Additionally, sinusoidal slopes are implemented like a Tukey
                 * window function to reduce ringing artifacts before the inverse DFT back to position domain.
                 *
                 * @param kx perpendicular k vector component in SI units
                 * @param ky perpendicular k vector component in SI units
                 * @param omega frequency in SI units
                 * @return value in the range [0.0, 1.0]
                 */
                HINLINE float_64 numericalAperture(float_64 kx, float_64 ky, float_64 omega)
                {
                    float_64 const kperp = math::sqrt(kx * kx + ky * ky);
                    float_64 const k = math::abs(omega / sim.si.getSpeedOfLight());

                    float_64 const offsetWf
                        = params::centralOmega * params::numericalApertureWfSize / sim.si.getSpeedOfLight();

                    float_64 const NAk = params::numericalAperture * k;

                    if(kperp <= NAk)
                    {
                        return 1.0;
                    }
                    else if(kperp <= (NAk + offsetWf))
                    {
                        return (1.0 - math::cos(PI * (kperp - NAk - offsetWf) / offsetWf)) / 2.0;
                    }
                    else
                    {
                        return 0.0;
                    }
                }

                /** General mask function for electric and magnetic fields
                 *
                 * Calculate filter which will be multiplied to the electric and magnetic field in Fourier space.
                 *
                 * @param kx perpendicular k vector component in SI units
                 * @param ky perpendicular k vector component in SI units
                 * @param omega frequency in SI units
                 * @return value in the range [0.0, 1.0]
                 */
                HINLINE float_64 maskFourier(float_64 kx, float_64 ky, float_64 omega)
                {
                    return frequencyFilter(omega) * numericalAperture(kx, ky, omega);
                }
            } // namespace masks
        } // namespace shadowgraphy
    } // namespace plugins
} // namespace picongpu
