/* Copyright 2014-2019 Rene Widera, Marco Garten, Alexander Grund, Axel Huebl,
 *                     Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * This file defines available attributes that can be stored with each particle
 * of a particle species.
 * Each attribute defined here needs to implement furthermore the traits
 *   - Unit
 *   - UnitDimension
 *   - WeightingPower
 *   - MacroWeighted
 * in speciesAttributes.unitless for further information about these
 * traits see therein.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

// pmacc
#include <pmacc/particles/Identifier.hpp>
#include <pmacc/compileTime/conversion/MakeSeq.hpp>
#include <pmacc/dimensions/DataSpace.hpp>
#include <pmacc/identifier/identifier.hpp>
#include <pmacc/identifier/alias.hpp>
#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/particles/IdProvider.def>


namespace picongpu
{
    /** relative (to cell origin) in-cell position of a particle
     *
     * With this definition we do not define any type like float3_X,
     * float3_64, ...
     * This is only a name without a specialization.
     */
    alias( position );

    //! unique identifier for a particle
    value_identifier(
        uint64_t,
        particleId,
        IdProvider< simDim >::getNewId()
    );

    //! specialization for the relative in-cell position
    value_identifier(
        floatD_X,
        position_pic,
        floatD_X::create( 0. )
    );

    //! momentum at timestep t
    value_identifier(
        float3_X,
        momentum,
        float3_X::create( 0. )
    );

    //! momentum at (previous) timestep t-1
    value_identifier(
        float3_X,
        momentumPrev1,
        float3_X::create( 0._X )
    );

    //! weighting of the macro particle
    value_identifier(
        float_X,
        weighting,
        0._X
    );

    //! Voronoi cell of the macro particle
    value_identifier(
        int16_t,
        voronoiCellId,
        -1
    );

    //! interpolated electric field with respect to particle shape
    value_identifier(
        float3_X,
        probeE,
        float3_X::create( 0. )
    );

    //! interpolated electric field with respect to particle shape
    value_identifier(
        float3_X,
        probeB,
        float3_X::create( 0. )
    );

    /** masking a particle for radiation
     *
     * The mask is used by the user defined filter
     * `RadiationParticleFilter` in radiation.param to (de)select
     * particles for the radiation calculation.
     */
    value_identifier(
        bool,
        radiationMask,
        false
    );

    /** number of electrons bound to the atom / ion
     *
     * value type is float_X to avoid casts during the runtime
     * - float_X instead of integer types are reasonable because effective charge
     *   numbers are possible
     * - required for ion species if ionization is enabled
     *
     * @todo connect default to proton number
     */
    value_identifier(
        float_X,
        boundElectrons,
        0._X
    );

    /** atomic superconfiguration
     *
     * atomic configuration of an ion for collisional-radiative modeling,
     * see also flylite.param
     */
    value_identifier(
        flylite::Superconfig,
        superconfig,
        flylite::Superconfig::create( 0. )
    );

    /** Total cell index of a particle.
     *
     *  The total cell index is a
     *  N-dimensional DataSpace given by a GPU's
     *    `globalDomain.offset` + `localDomain.offset`
     *  added to the N-dimensional cell index the particle belongs to on that GPU.
     */
    value_identifier(
        DataSpace< simDim >,
        totalCellIdx,
        DataSpace< simDim >( )
    );

    //! alias for particle shape, see also species.param
    alias( shape );

    //! alias for particle pusher, see alsospecies.param
    alias( particlePusher );

    //! alias for particle ionizers, see also ionizer.param
    alias( ionizers );

    //! alias for ionization energy container, see also ionizationEnergies.param
    alias( ionizationEnergies );

    //! alias for synchrotronPhotons, see also speciesDefinition.param
    alias( synchrotronPhotons )

    //! alias for ion species used for bremsstrahlung
    alias( bremsstrahlungIons );

    //! alias for photon species used for bremsstrahlung
    alias( bremsstrahlungPhotons );

    //! alias for particle to field interpolation, see also species.param
    alias( interpolation );

    //! alias for particle current solver, see also species.param
    alias( current );

    /** alias for particle flag: atomic numbers, see also ionizer.param
     * - only reasonable for atoms / ions / nuclei
     */
    alias( atomicNumbers );

    /** alias for particle flag: effective nuclear charge,
     *
     * - see also ionizer.param
     * - only reasonable for atoms / ions / nuclei
     */
    alias( effectiveNuclearCharge );

    /** alias for particle population kinetics model (e.g. FLYlite)
     *
     * see also flylite.param
     */
    alias( populationKinetics );

    /** alias for particle mass ratio
     *
     * mass ratio between base particle, see also
     * speciesConstants.param `SI::BASE_MASS_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias( massRatio );

    /** alias for particle charge ratio
     *
     * charge ratio between base particle, see also
     * speciesConstants.param `SI::BASE_CHARGE_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias( chargeRatio );

    /** alias for particle density ratio
     *
     * density ratio between default density, see also
     * density.param `SI::BASE_DENSITY_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias( densityRatio );

    /** alias to reserved bytes for each communication direction
     *
     * This is an optional flag and overwrites the default species configuration
     * in memory.param.
     *
     * A memory config must be of the following form:
     *
     * @code{.cpp}
     * struct ExampleExchangeMemCfg
     * {
     *     static constexpr uint32_t BYTES_EXCHANGE_X = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_EXCHANGE_Y = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_EXCHANGE_Z = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_CORNER = 16 * 1024;
     *     static constexpr uint32_t BYTES_EDGES = 16 * 1024;
     * };
     * @endcode
     */
    alias( exchangeMemCfg );

    /** alias to specify the boundary condition for particles
     *
     * The default behavior if this alias is not given to a species is that the
     * particles which leave the global simulation box where deleted.
     * This also notifies all plugins that can handle leaving particles.
     *
     * Note: alias `boundaryCondition` will be ignored if the runtime parameter
     * `--periodic` is set.
     */
    alias( boundaryCondition );

} // namespace picongpu
