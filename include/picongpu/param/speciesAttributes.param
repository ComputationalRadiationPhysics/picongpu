/* Copyright 2014-2023 Rene Widera, Marco Garten, Alexander Grund, Axel Huebl,
 *                     Heiko Burau, Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * This file defines available attributes that can be stored with each particle
 * of a particle species.
 * Each attribute defined here needs to implement furthermore the traits
 *   - Unit
 *   - UnitDimension
 *   - WeightingPower
 *   - MacroWeighted
 * in speciesAttributes.unitless for further information about these
 * traits see therein.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

// pmacc
#include <pmacc/dimensions/DataSpace.hpp>
#include <pmacc/identifier/alias.hpp>
#include <pmacc/identifier/identifier.hpp>
#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/meta/conversion/MakeSeq.hpp>
#include <pmacc/particles/IdProvider.hpp>
#include <pmacc/particles/Identifier.hpp>

#include <cstdint>

namespace picongpu
{
    /** relative (to cell origin) in-cell position of a particle
     *
     * With this definition we do not define any type like float3_X,
     * float3_64, ...
     * This is only a name without a specialization.
     */
    alias(position);

    //! unique identifier for a particle
    value_identifier_func(
        uint64_t,
        particleId,
        [] ALPAKA_FN_ACC(auto const& worker, IdGenerator& idGen) { return idGen.fetchInc(worker); });

    //! specialization for the relative in-cell position
    value_identifier(floatD_X, position_pic, floatD_X::create(0.));

    //! momentum at timestep t
    value_identifier(float3_X, momentum, float3_X::create(0.));

    //! momentum at (previous) timestep t-1
    value_identifier(float3_X, momentumPrev1, float3_X::create(0._X));

    //! weighting of the macro particle
    value_identifier(float_X, weighting, 0._X);

    /** optional damping factor for weighting of the macro particle
     *
     * This factor is only used for current deposition with absorbing particle boundaries and PML.
     * In case this attribute is defined, affected particles would have their weightings damped only for that
     * procedure. Otherwise, the damping would affect weighting directly and so potentially overall properties like
     * density. It should be generally not a considerable issue, except lots of particles move from PML to internal
     * area.
     *
     * Thus, for efficiency reasons it is recommended to not enable this attribute by default.
     */
    value_identifier(float_X, weightingDampingFactor, 1._X);

    /** interpolated electric field with respect to particle shape
     *
     * Attribute can be added to any species.
     */
    value_identifier(float3_X, probeE, float3_X::create(0.));

    /** interpolated magnetic field with respect to particle shape
     *
     * Attribute can be added to any species.
     */
    value_identifier(float3_X, probeB, float3_X::create(0.));

    /** masking a particle for radiation
     *
     * The mask is used by the user defined filter
     * `RadiationParticleFilter` in radiation.param to (de)select
     * particles for the radiation calculation.
     */
    value_identifier(bool, radiationMask, false);

    /** masking a particle for transition radiation
     *
     * The mask is used by the user defined filter
     * `TransitionRadiationParticleFilter` in transitionRadiation.param to (de)select
     * particles for the transition radiation calculation.
     */
    value_identifier(bool, transitionRadiationMask, false);

    /** number of electrons bound to the atom / ion
     *
     * value type is float_X to avoid casts during the runtime
     * - float_X instead of integer types are reasonable because effective charge
     *   numbers are possible, NOTE: but not useful, Brian, 2022
     * - required for ion species if ionization is enabled
     * - setting it requires atomicNumbers to also be set
     * @attention number bound electrons should always match atomicState
     *  charge state!
     *
     * @todo connect default to proton number
     * @todo change to uint8_t or uint32_t
     */
    value_identifier(float_X, boundElectrons, 0._X);

    //! alias for particle ionizers, see also ionizer.param
    alias(ionizers);

    /** alias for ionization energy container, see also ionizationEnergies.param
     *  - only reasonable for atoms / ions / nuclei
     */
    alias(ionizationEnergies);

    /** alias for particle flag: atomic numbers, see also ionizer.param
     * - only reasonable for atoms / ions / nuclei
     * - is required when boundElectrons is set
     */
    alias(atomicNumbers);

    /** alias for particle flag: effective nuclear charge,
     *
     * - see also ionizer.param
     * - only reasonable for atoms / ions / nuclei
     */
    alias(effectiveNuclearCharge);

    /** configuration of species for atomicPhysics algorithm, see picongpu/particles/atomicPhysics/ParticleType.hpp for
     * details
     */
    alias(atomicPhysicsParticle);

    //! particle attribute, collectionIndex of atomic state of ions
    value_identifier(uint32_t, atomicStateCollectionIndex, std::numeric_limits<uint32_t>::max());

    //! particle attribute, process class of selected atomicPhysics transition
    value_identifier(uint8_t, processClass, std::numeric_limits<uint8_t>::max());

    //! particle attribute, index of chosen atomicPhysics transition
    value_identifier(uint32_t, transitionIndex, std::numeric_limits<uint32_t>::max());

    //! particle attribute, index of bin chosen for atomicPhysics transition, if applicable for
    value_identifier(uint32_t, binIndex, std::numeric_limits<uint32_t>::max());

    //! particle attribute, whether the selected transition was accepted
    value_identifier(bool, accepted, false);

    /** collection of attributes required for atomic physics attributes
     *
     * @attention boundElectrons is contained in the list, please do not add it twice.
     */
    using atomicPhysicsIonParticleAttributes
        = MakeSeq_t<boundElectrons, atomicStateCollectionIndex, processClass, transitionIndex, binIndex, accepted>;

    /** Total cell index of a particle.
     *
     *  The total cell index is a
     *  N-dimensional DataSpace given by a GPU's
     *    `globalDomain.offset` + `localDomain.offset`
     *  added to the N-dimensional cell index the particle belongs to on that GPU.
     */
    value_identifier(DataSpace<simDim>, totalCellIdx, DataSpace<simDim>());

    //! alias for particle shape, see also species.param
    alias(shape);

    //! alias for particle pusher, see alsospecies.param
    alias(particlePusher);

    //! alias for particle that emmits synchrotron radiation, see also synchrotron.param
    alias(synchrotron);

    //! alias for particle to field interpolation, see also species.param
    alias(interpolation);

    //! alias for particle current solver, see also species.param
    alias(current);

    /** alias for particle mass ratio
     *
     * mass ratio between base particle, see also
     * speciesConstants.param `SI::BASE_MASS_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias(massRatio);

    /** alias for particle charge ratio
     *
     * charge ratio between base particle, see also
     * speciesConstants.param `SI::BASE_CHARGE_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias(chargeRatio);

    /** alias for particle density ratio
     *
     * density ratio between default density, see also
     * density.param `SI::BASE_DENSITY_SI` and a user defined species
     *
     * default value: 1.0 if unset
     */
    alias(densityRatio);

    /** alias to reserved bytes for each communication direction
     *
     * This is an optional flag and overwrites the default species configuration
     * in memory.param.
     *
     * A memory config must be of the following form:
     *
     * @code{.cpp}
     * struct ExampleExchangeMemCfg
     * {
     *     static constexpr uint32_t BYTES_EXCHANGE_X = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_EXCHANGE_Y = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_EXCHANGE_Z = 5 * 1024 * 1024;
     *     static constexpr uint32_t BYTES_CORNER = 16 * 1024;
     *     static constexpr uint32_t BYTES_EDGES = 16 * 1024;
     *     using REF_LOCAL_DOM_SIZE = mCT::Int<0, 0, 0>;
     *     const std::array<float_X, 3> DIR_SCALING_FACTOR = {{0.0, 0.0, 0.0}};
     * };
     * @endcode
     */
    alias(exchangeMemCfg);

    /** alias to specify the internal pmacc boundary treatment for particles
     *
     * It controls the internal behavior and intented for special cases only.
     * To set physical boundary conditions for a species, instead use <species>_boundary command-line option.
     *
     * The default behavior if this alias is not given to a species is to do nothing.
     * The existing boundary implementations already take care of the particles leaving the global simulation
     * volume.
     */
    alias(boundaryCondition);

} // namespace picongpu
