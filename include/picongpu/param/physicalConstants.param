/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch,
 *                     Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
    constexpr float_64 PI = 3.141592653589793238462643383279502884197169399;

    namespace SI
    {
        /** unit: m / s */
        constexpr float_64 SPEED_OF_LIGHT_SI = 2.99792458e8;

        /** vacuum magnetic permability
         *
         * unit: N / A^2
         *
         * 2022 CODATA Value, https://physics.nist.gov/cgi-bin/cuu/Value?mu0
         */
        constexpr float_64 MUE0_SI = 1.25663706127e-6;
        /** unit: C / (V m) */
        constexpr float_64 EPS0_SI = 1.0 / MUE0_SI / SPEED_OF_LIGHT_SI / SPEED_OF_LIGHT_SI;

        /** impedance of free space
         * unit: ohm */
        constexpr float_64 Z0_SI = MUE0_SI * SPEED_OF_LIGHT_SI;

        /** reduced Planck constant
         *
         * unit: J * s
         *
         * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?hbar
         */
        constexpr float_64 HBAR_SI = 1.054571817e-34;

        // Electron properties
        //! unit: kg,   2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?me
        constexpr float_64 ELECTRON_MASS_SI = 9.1093837139e-31;
        //! unit: C,    2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?e
        constexpr float_64 ELECTRON_CHARGE_SI = -1.602176634e-19;

        /* atomic unit for energy:
         * 2 Rydberg = 27.21 eV --> converted to Joule
         */
        constexpr float_64 ATOMIC_UNIT_ENERGY = 4.36e-18;

        /** Rydberg energy, unit: eV
         *
         * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?rydhcev
         */
        constexpr float_64 RYDBERG_ENERGY = 13.605693122990_X; // eV

        /** bohr radius, unit: m
         *
         * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0
         */
        constexpr float_64 BOHR_RADIUS = 5.29177210544e-11;

        /* atomic unit for electric field in V/m:
         * field strength between electron and core in ground state hydrogen
         */
        constexpr float_64 ATOMIC_UNIT_EFIELD = 5.14e11;

        /* atomic unit for time in s:
         * 150 attoseconds (classical electron orbit time in hydrogen) / 2 PI
         */
        constexpr float_64 ATOMIC_UNIT_TIME = 2.4189e-17;

        /** Avogadro number
         * unit: mol^-1
         *
         * Y. Azuma et al. Improved measurement results for the Avogadro
         * constant using a 28-Si-enriched crystal, Metrologie 52, 2015, 360-375
         * doi:10.1088/0026-1394/52/2/360
         */
        constexpr float_64 N_AVOGADRO = 6.02214076e23;

        //! Classical electron radius in SI units
        constexpr float_64 ELECTRON_RADIUS_SI = ELECTRON_CHARGE_SI * ELECTRON_CHARGE_SI
            / (4.0 * PI * EPS0_SI * ELECTRON_MASS_SI * SPEED_OF_LIGHT_SI * SPEED_OF_LIGHT_SI);
    } // namespace SI

    /** Unit of speed */
    constexpr float_64 UNIT_SPEED = SI::SPEED_OF_LIGHT_SI;
    constexpr float_X SPEED_OF_LIGHT = float_X(SI::SPEED_OF_LIGHT_SI / UNIT_SPEED);

    /** conversions
     *
     * UNIT_A to UNIT_B
     *
     * CONVENTION: WE DO NOT CONVERT FROM ANY STRANGE UNIT TO UNITLESS UNITS DIRECTLY!
     *             convert steps: INPUT -> float_64_convert to SI -> float_64_convert to unitless
     *                                  -> cast to float
     * WE DO NOT define "sim.unit.energy()_keV" or something similar! Never!
     * Stay SI, stay free ;-)
     *
     * example:
     *   // some particle physicist beloved input:
     *   constexpr float_64 An_Arbitrary_Energy_Input_keV = 30.0; // unit: keV
     *
     *   // first convert to SI (because SI stays our standard Unit System!)
     *   constexpr float_64 An_Arbitrary_Energy_Input_SI = An_Arbitrary_Energy_Input_keV * UNITCONV_keV_to_Joule //
     *   unit: Joule
     *
     *   // now the "real" convert to our internal unitless system
     *   constexpr float_X An_Arbitrary_Energy_Input = float_X(An_Arbitrary_Energy_Input_SI / sim.unit.energy()) //
     * unit: none
     *
     * As a convention, we DO NOT use the short track:
     *   constexpr float_64 An_Arbitrary_Energy_Input_keV = 30.0; // unit: keV
     *   constexpr float_X An_Arbitrary_Energy_Input = float_X(An_Arbitrary_Energy_Input_SI * UNITCONV_keV_to_Joule /
     *   sim.unit.energy()) // unit: none
     */
    constexpr float_64 UNITCONV_keV_to_Joule = 1.602176634e-16;
    constexpr float_64 UNITCONV_eV_to_Joule = UNITCONV_keV_to_Joule * 1e-3;
    constexpr float_64 UNITCONV_Joule_to_keV = (1.0 / UNITCONV_keV_to_Joule);

    /* 1 atomic unit of energy is equal to 1 Hartree or 2 Rydberg
     * which is twice the ground state binding energy of atomic hydrogen */
    constexpr float_64 UNITCONV_AU_to_eV = 27.21139;
    constexpr float_64 UNITCONV_eV_to_AU = (1.0 / UNITCONV_AU_to_eV);
} // namespace picongpu
