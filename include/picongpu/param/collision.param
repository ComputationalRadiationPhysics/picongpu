/* Copyright 2019-2023 Rene Widera, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/collision/collision.def"

#include <algorithm>


namespace picongpu
{
    namespace particles
    {
        namespace collision
        {
            namespace precision
            {
                using float_COLL = float_64;
            } // namespace precision

            // write average (over all cells) Debye length for all timesteps to a file
            constexpr bool debugScreeningLength = false;

            /** List of (filtered) species contributing to the screening (Debye) length calculation
             *
             * Elements must be either a species types or a misc::SpeciesFilter specialization.
             */
            using CollisionScreeningSpecies = MakeSeq_t<>;
            /** CollisionPipeline defines in which order species interact with each other
             *
             * the functors are called in order (from first to last functor)
             */
            using CollisionPipeline = pmacc::mp_list<>;

            /** Chunk size used for cell list allocations.
             *
             * To reduce the fragmentation of the heap memory on accelerators the collision algorithm is allocating a
             * multiple of this value to store a cell list of particle IDs. The value must be non zero.
             *
             * Our experience shows that 4 or 8 are working quite well. Higher numbers lead to more inefficient memory
             * usage, so we cap this chunk size by default at the TYPICAL_PARTICLES_PER_CELL value.
             */
            constexpr uint32_t cellListChunkSize = std::min(TYPICAL_PARTICLES_PER_CELL, 4u);

        } // namespace collision
    } // namespace particles
} // namespace picongpu
