/* Copyright 2013-2020 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Carlchristian Eckert
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Fine-tuning of the particle heap for GPUs: When running on GPUs, we use a
 * high-performance parallel "new" allocator (mallocMC) which can be
 * parametrized here.
 */

#pragma once

#include <boost/mpl/int.hpp>
#include <boost/mpl/bool.hpp>
#include <mallocMC/mallocMC.hpp>


namespace picongpu
{

    //! configure the CreationPolicy "Scatter"
    struct DeviceHeapConfig
    {
        //! 2MiB page can hold around 256 particle frames
        static constexpr uint32_t pagesize = 2u * 1024u * 1024u;

        /** accessblocks, regionsize and wastefactor are not conclusively
         * investigated and might be performance sensitive for multiple
         * particle species with heavily varying attributes (frame sizes)
         */
        static constexpr uint32_t accessblocks = 4u;
        static constexpr uint32_t regionsize = 8u;
        static constexpr uint32_t wastefactor = 2u;

        /** resetfreedpages is used to minimize memory fragmentation with
         * varying frame sizes
         */
        static constexpr bool resetfreedpages = true;
    };

    /** Define a new allocator
     *
     * This is an allocator resembling the behaviour of the ScatterAlloc
     * algorithm.
     */
    using DeviceHeap = mallocMC::Allocator<
        cupla::Acc,
        mallocMC::CreationPolicies::Scatter< DeviceHeapConfig >,
        mallocMC::DistributionPolicies::Noop,
        mallocMC::OOMPolicies::ReturnNull,
        mallocMC::ReservePoolPolicies::AlpakaBuf< cupla::Acc >,
        mallocMC::AlignmentPolicies::Shrink<>
    >;

} // namespace picongpu
