/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch,
 *                     Benjamin Worpitz, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include <cmath>

namespace picongpu
{
    /*scale image before write to file, only scale if value is not 1.0
     */
    constexpr float_64 scale_image = 1.0;

    /*if true image is scaled if cellsize is not quadratic, else no scale*/
    constexpr bool scale_to_cellsize = true;

    constexpr bool white_box_per_GPU = false;

    namespace visPreview
    {
        // normalize EM fields to typical laser or plasma quantities
        //-1: Auto:     enable adaptive scaling for each output
        // 1: Laser:    [outdated]
        // 2: Drift:    [outdated]
        // 3: PlWave:   typical fields calculated out of the plasma freq.,
        //              assuming the wave moves approx. with c
        // 4: Thermal:  [outdated]
        // 5: BlowOut:  [outdated]
        // 6: Custom:   user-provided normalization factors via customNormalizationSI
        // 7: Incident: typical fields calculated out of the incident field amplitude,
        //              uses max amplitude from all enabled incident field profile types ignoring Free
#define EM_FIELD_SCALE_CHANNEL1 -1
#define EM_FIELD_SCALE_CHANNEL2 -1
#define EM_FIELD_SCALE_CHANNEL3 -1

        /** SI values to be used for Custom normalization
         *
         * The order of normalization values is: B, E, current (note - current, not current density).
         * This variable must always be defined, but has no effect for other normalization types.
         */
        constexpr float_64 customNormalizationSI[3] = {5.0e12 / sim.si.getSpeedOfLight(), 5.0e12, 15.0};

        // multiply highest undisturbed particle density with factor
        constexpr float_X preParticleDens_opacity = 0.25_X;
        constexpr float_X preChannel1_opacity = 1.0_X;
        constexpr float_X preChannel2_opacity = 1.0_X;
        constexpr float_X preChannel3_opacity = 1.0_X;

        // specify color scales for each channel
        namespace preParticleDensCol = colorScales::red;
        namespace preChannel1Col = colorScales::blue;
        namespace preChannel2Col = colorScales::green;
        namespace preChannel3Col = colorScales::none;

        /** Calculate values for png channels for given field values
         *
         * @param field_B normalized magnetic field value
         * @param field_E normalized electric field value
         * @param field_Current normalized electric current value (note - not current density)
         *
         * @{
         */
        DINLINE float_X preChannel1(const float3_X& field_B, const float3_X& field_E, const float3_X& field_Current)
        {
            return pmacc::math::l2norm2(field_Current);
        }

        DINLINE float_X preChannel2(const float3_X& field_B, const float3_X& field_E, const float3_X& field_Current)
        {
            return field_E.x() * field_E.x();
        }

        DINLINE float_X preChannel3(const float3_X& field_B, const float3_X& field_E, const float3_X& field_Current)
        {
            return -1.0_X * field_E.y();
        }

        /** @} */
    } // namespace visPreview
} // namespace picongpu
