/* Copyright 2020-2023 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file incidentField.param
 *
 * Configure incident field profile and offset of the Huygens surface for each boundary.
 *
 * Available profiles:
 *  - profiles::DispersivePulse<>     : Gaussian pulse allowing to set first-, second-, and third-order dispersion
 * in focus. That is, SD, AD, GDD, and TOD, respectively.
 *  - profiles::ExpRampWithPrepulse<> : exponential ramp with prepulse wavepacket with given parameters
 *  - profiles::Free<>                : custom profile with user-provided functors to calculate incident E and B
 *  - profiles::FromOpenPMDPulse<>    : reads an experimental pulse chunk defined in space-time domain into the
 * simulation; requires openPMD API dependency and a 3D simulation
 *  - profiles::GaussianPulse<>       : Pulse with Gaussian profile in all three dimensions with given parameters
 *  - profiles::None                  : no incident field
 *  - profiles::PlaneWave<>           : plane wave profile with given parameters
 *  - profiles::Polynom<>             : wavepacket with a polynomial temporal intensity shape profile with given
 * parameters
 *  - profiles::PulseFrontTilt<>      : GaussianPulse with tilted pulse front with given parameters
 *  - profiles::Wavepacket<>          : wavepacket with Gaussian spatial and temporal envelope profile with given
 * parameters
 *
 * All profiles but `Free<>` and `None` are parametrized with a profile-specific structure.
 * Their interfaces are defined in the corresponding `.def` files inside directory
 * picongpu/fields/incidentField/profiles/. Note that all these parameter structures inherit common base structures
 * from `BaseParam.def`. Thus, a user-provided structure must also define all members according to the base struct.
 *
 * In the end, this file needs to define `XMin`, `XMax`, `YMin`, `YMax`, `ZMin`, `ZMax` (the latter two can be skipped
 * in 2d) type aliases in namespace `picongpu::fields::incidentField`. Each of them could be a single profile or a
 * typelist of profiles created with `MakeSeq_t`. In case a typelist is used, the resulting field is a sum of
 * effects of all profiles in the list. This file also has to define constexpr array `POSITION` that controls
 * positioning of the generating surface relative to total domain. For example:
 *
 * @code{.cpp}
 * using XMin = profiles::Free<UserFunctorIncidentE, UserFunctorIncidentB>;
 * using XMax = profiles::None;
 * using YMin = MakeSeq_t<profiles::PlaneWave<UserPlaneWaveParams>, profiles::Wavepacket<UserWavepacketParams>>;
 * using YMax = profiles::None;
 * using ZMin = profiles::Polynom<UserPolynomParams>;
 * using ZMax = profiles::GaussianPulse<UserGaussianPulseParams>;
 *
 * constexpr int32_t POSITION[3][2] = { {16, -16}, {16, -16}, {16, -16} };
 * @endcode
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/profiles.def"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            /** User-defined functor to set values of incident E field
             */
            class UserFunctorIncidentE
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor
                 *
                 * @param currentStep current time step index, note that it is fractional
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HDINLINE UserFunctorIncidentE(float_X const currentStep, const float3_64 unitField)
                    : m_unitField(unitField)
                {
                }

                /** Calculate incident field E_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 * @return incident field value in internal units
                 */
                HDINLINE float3_X operator()(const floatD_X& totalCellIdx) const
                {
                    auto const fieldSI = float3_X(0.0_X, 0.0_X, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** User-defined functor to set values of incident B field
             */
            class UserFunctorIncidentB
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor
                 *
                 * @param currentStep current time step index, note that it is fractional
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HDINLINE UserFunctorIncidentB(float_X const currentStep, const float3_64 unitField)
                    : m_unitField(unitField)
                {
                }

                /** Calculate incident field B_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 * @return incident field value in internal units
                 */
                HDINLINE float3_X operator()(const floatD_X& totalCellIdx) const
                {
                    auto const fieldSI = float3_X(0.0_X, 0.0_X, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** Make a profile with the user-provided functors defined above.
             *
             * The functors for incident field E and B must be consistent to each other.
             * They should work for all boundaries the profile is applied to.
             */
            using MyProfile = profiles::Free<UserFunctorIncidentE, UserFunctorIncidentB>;

            /**@{*/
            //! Incident field profile types along each boundary, these 6 types (or aliases) are required.
            using XMin = profiles::None;
            using XMax = profiles::None;
            using YMin = profiles::None;
            using YMax = profiles::None;
            using ZMin = profiles::None;
            using ZMax = profiles::None;
            /**@}*/

            /** Position in cells of the Huygens surface relative to start of the total domain
             *
             * The position is set as an offset, in cells, counted from the start of the total domain.
             * For the max boundaries, negative position values are allowed.
             * These negative values are treated as position at (global_domain_size[d] + POSITION[d][1]).
             * It is also possible to specify the position explicitly as a positive number.
             * Then it is on a user to make sure the position is correctly calculated wrt the grid size.
             *
             * Except moving window simulations, the position must be inside the global domain.
             * The distance between the Huygens surface and each global domain boundary must be at least
             * absorber_thickness + (FDTD_spatial_order / 2 - 1). However beware of setting position = direction *
             * (absorber_thickness + const), as then changing absorber parameters will affect laser positioning. When
             * all used profiles are None, the check for POSITION validity is skipped.
             *
             * For moving window simulations, POSITION for the YMax side can be located outside the initially simulated
             * volume. In this case, parts of the generation surface outside of the currently simulated volume is are
             * treated as if they had zero incident field and it is user's responsibility to apply a source matching
             * such a case.
             */
            constexpr int32_t POSITION[3][2] = {
                {16, -16}, // x direction [negative, positive]
                {16, -16}, // y direction [negative, positive]
                {16, -16} // z direction [negative, positive]
            };

        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
