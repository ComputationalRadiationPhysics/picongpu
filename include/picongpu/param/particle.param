/* Copyright 2013-2023 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch, Klaus Steiniger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file config file for particle manipulators
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitialization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */

#pragma once

#include "picongpu/particles/filter/filter.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/operation.hpp>
#include <pmacc/random/distributions/Uniform.hpp>


namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *
         *  unit: none */
        constexpr float_X MIN_WEIGHTING = 10.0;


        namespace manipulators
        {
            /** Define Lorentz factor of initial particle drift. */
            struct DriftParam
            {
                static constexpr float_64 gamma = 1.0;
                /** Define initial particle drift direction vector.
                 */
                static constexpr auto driftDirection = float3_X(1.0, 0.0, 0.0);
            };
            /** Definition of manipulator that assigns a drift in X
             *  using parameters from struct DriftParam.
             */
            using AssignXDrift = unary::Drift<DriftParam, pmacc::math::operation::Assign>;


            /** Define initial particle temperature. */
            struct TemperatureParam
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = 0.0;
            };
            /** Definition of manipulator assigning a temperature
             *  using parameters from struct TemperatureParam.
             */
            using AddTemperature = unary::Temperature<TemperatureParam>;


            /** Define initial particle temperature as a function of position.
             *  This is a functor which needs to follow the requirements of param::TemperatureFunctor.
             */
            struct TemperatureFunctor
            {
                /** Constructor, can take currentStep or no parameters (can also be auto-generated by a compiler)
                 *
                 * @param currentStep current time iteration
                 */
                TemperatureFunctor(/*uint32_t const currentStep*/)
                {
                }

                /** Return the temperature in keV for the given position
                 *
                 * Return type may be float_X or float_64.
                 *
                 * @param totalCellOffset total offset including all slides [in cells]
                 */
                HDINLINE float_X operator()(const DataSpace<simDim>& totalCellOffset)
                {
                    return 0.0_X;
                }
            };
            /** Definition of manipulator that assigns a temperature
             *  according to the functor defined by struct TemperaturFunctor.
             */
            using AddFreeTemperature = unary::FreeTemperature<TemperatureFunctor>;


            /** Unary particle manipulator: double each weighting. */
            struct DoubleWeightingFunctor
            {
                template<typename T_Particle>
                DINLINE void operator()(T_Particle& particle)
                {
                    particle[weighting_] *= 2.0_X;
                }
            };
            /** Definition of the free particle manipulator which doubles each weighting.*/
            using DoubleWeighting = generic::Free<DoubleWeightingFunctor>;


            /** Define mask which randomly marks macro-particles used
             *  by the radiation plugin to calculate far field radiation.
             */
            struct RandomEnabledRadiationFunctor
            {
                template<typename T_Rng, typename T_Particle>
                DINLINE void operator()(T_Rng& rng, T_Particle& particle)
                {
                    // enable radiation for 10% of the macro-particles
                    particle[radiationMask_] = rng() < 0.1_X;
                }
            };
            /** Definition of manipulator that selects macro-particles for Radiation plugin. */
            using RandomEnabledRadiation
                = generic::FreeRng<RandomEnabledRadiationFunctor, pmacc::random::distributions::Uniform<float_X>>;


            /** Definition of manipulator that changes the in-cell position of each particle of a species. */
            using RandomPosition = unary::RandomPosition;

            /** definition of manipulator that sets the boundElectron attribute(charge state) of each
             * particle of an ion of a species to neutral
             */
            using SetNeutral = unary::ChargeState<0u>;

        } // namespace manipulators

        namespace startPosition
        {
            /** Define target number for marco-particles per cell
             * to be used in Random start position functor.
             */
            struct RandomParameter
            {
                /** Maximum number of macro-particles per cell during density profile evaluation.
                 *
                 * Determines the weighting of a macro particle as well as the number of
                 * macro-particles which sample the evolution of the particle distribution
                 * function in phase space.
                 *
                 * unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
            };
            /** Definition of start position functor that randomly distributes macro-particles within a cell. */
            using Random = RandomImpl<RandomParameter>;


            /** Definition of start position functor that randomly distributes macro-particles within a cell
             * and randomly distributes weightings across macro-particles within a cell.
             */
            using RandomPositionAndWeighting = RandomPositionAndWeightingImpl<RandomParameter>;


            /** Define target number for marco-particles per cell along a direction.
             * To be used in Quiet start position functor.
             *
             * Here, one macro-particle per cell along x, one macro-particle per cell along z, and
             * TYPICAL_PARTICLES_PER_CELL macro-particles per cell along y.
             *
             * Vector is automatically reduced to two dimensions for 2D (x,y) simulations.
             */
            struct QuietParam
            {
                /** Count of macro-particles per cell per direction at initial state
                 *
                 *  unit: none */
                using numParticlesPerDimension
                    = mCT::shrinkTo<mCT::Int<1, TYPICAL_PARTICLES_PER_CELL, 1>, simDim>::type;
            };
            /** Definition of Quiet start position functor that positions macro-particles regularly on the grid.
             * No random number generator used.
             */
            using Quiet = QuietImpl<QuietParam>;


            /** Configuration of initial in-cell particle position
             *
             * Here, macro-particles sit directly in lower corner of the cell.
             */
            struct OnePositionParameter
            {
                /** Maximum number of macro-particles per cell during density profile evaluation.
                 *
                 * Determines the weighting of a macro particle as well as the number of
                 * macro-particles which sample the evolution of the particle distribution
                 * function in phase space.
                 *
                 * unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;

                /** each x, y, z in-cell position component in range [0.0, 1.0)
                 *
                 * @details in 2D the last component is ignored
                 */
                static constexpr auto inCellOffset = float3_X(0., 0., 0.);
            };
            /** Definition of OnePosition start position functor that
             * places macro-particles at the initial in-cell position defined above.
             */
            using OnePosition = OnePositionImpl<OnePositionParameter>;
        } // namespace startPosition
    } // namespace particles
} // namespace picongpu
