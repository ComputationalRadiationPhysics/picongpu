/* Copyright 2016-2019 Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

namespace picongpu
{
namespace particles
{
namespace bremsstrahlung
{

/** params related to the energy loss and deflection of the incident electron
 */
namespace electron
{
    /** Minimal kinetic electron energy in MeV for the lookup table.
     * For electrons below this value Bremsstrahlung is not taken into account.
     */
    constexpr float_64 MIN_ENERGY_MeV = 0.5;

    /** Maximal kinetic electron energy in MeV for the lookup table.
     * Electrons above this value cause a out-of-bounds access at the
     * lookup table. Bounds checking is enabled for "CRITICAL" log level.
     */
    constexpr float_64 MAX_ENERGY_MeV = 200.0;

    /** Minimal polar deflection angle due to screening. See Jackson 13.5 for a rule of thumb to this value. */
    constexpr float_64 MIN_THETA = 0.01;

    /** number of lookup table divisions for the kappa axis.
     * Kappa is the energy loss normalized to the initial kinetic energy.
     * The axis is scaled linearly.
     */
    constexpr uint32_t NUM_SAMPLES_KAPPA = 32;

    /** number of lookup table divisions for the initial kinetic energy axis.
     * The axis is scaled logarithmically.
     */
    constexpr uint32_t NUM_SAMPLES_EKIN = 32;

    /** Kappa is the energy loss normalized to the initial kinetic energy.
     * This minimal value is needed by the numerics to avoid a division by zero.
     */
    constexpr float_64 MIN_KAPPA = 1.0e-10;

} // namespace electron

/** params related to the creation and the emission angle of the photon
 */
namespace photon
{
    /** Low-energy threshold in keV of the incident electron for the creation of photons.
     * Below this value photon emission is neglected.
     */
    constexpr float_64 SOFT_PHOTONS_CUTOFF_keV = 5000.0;

    /** number of lookup table divisions for the delta axis.
     * Delta is the angular emission probability (normalized to one) integrated from zero to theta,
     * where theta is the angle between the photon momentum and the final electron momentum.
     *
     * The axis is scaled linearly.
     */
    constexpr uint32_t NUM_SAMPLES_DELTA = 256;

    /** number of lookup table divisions for the gamma axis.
     * Gamma is the relativistic factor of the incident electron.
     *
     * The axis is scaled logarithmically.
     */
    constexpr uint32_t NUM_SAMPLES_GAMMA = 64;

    /** Maximal value of delta for the lookup table.
     * Delta is the angular emission probability (normalized to one) integrated from zero to theta,
     * where theta is the angle between the photon momentum and the final electron momentum.
     *
     * A value close to one is reasonable. Though exactly one was actually correct,
     * because it would map to theta = pi (maximum polar angle), the sampling then would be bad
     * in the ultrarelativistic case. In this regime the emission primarily takes place at small thetas.
     * So a maximum delta close to one maps to a reasonable maximum theta.
     */
    constexpr float_64 MAX_DELTA = 0.95;

    /** minimal gamma for the lookup table. */
    constexpr float_64 MIN_GAMMA = 1.0;

    /** maximal gamma for the lookup table.
     * Bounds checking is enabled for "CRITICAL" log level.
     */
    constexpr float_64 MAX_GAMMA = 250;

    /** if the emission probability per timestep is higher than this value and the log level is set to
     *  "CRITICAL" a warning will be raised.
     */
    constexpr float_64 SINGLE_EMISSION_PROB_LIMIT = 0.4;

    constexpr float_64 WEIGHTING_RATIO = 10;
} // namespace photon

} // namespace bremsstrahlung
} // namespace particles
} // namespace picongpu
