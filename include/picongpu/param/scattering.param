/* Copyright 2020-2021 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/scattering/functors.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>

namespace picongpu
{
    namespace particles
    {
        namespace scattering
        {
            struct ConditionParam
            {
                static constexpr float_X threshold = 0.0_X;
            };
            struct DirectionParam
            {
                static constexpr float_X maxPolarAngle = pmacc::math::Pi<float_X>::value * 0.01_X;
                static constexpr float_X minPolarAngle = pmacc::math::Pi<float_X>::value * 0.00_X;
            };
            using ConditionFunctor = condition::Threshold<ConditionParam>;
            using DirectionFunctor = direction::Random<DirectionParam>;


            template<typename T_Densities>
            using PhotonScatterer = ScatterFunctor<T_Densities, ConditionFunctor, DirectionFunctor>;
        } // namespace scattering
    } // namespace particles
} // namespace picongpu
