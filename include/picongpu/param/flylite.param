/* Copyright 2017-2019 Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * This is the configuration file for the atomic particle population kinetics
 * model FLYlite.
 * Its main purpose is non-LTE collisional-radiative modeling for transient
 * plasmas at high densities and/or interaction with (X-Ray) photon fields.
 *
 * In simpler words, one can also use this module to simulate collisional
 * ionization processes without the assumption of a local thermal equilibrium
 * (LTE), contrary to popular collisional ionization models such as the
 * Thomas-Fermi ionization model.
 *
 * This file configures the number of modeled populations for ions, spatial and
 * spectral binning of non-LTE density and energy histograms.
 *
 * @todo this model is not yet fully complete
 */
#pragma once

#include "picongpu/particles/flylite/types/Superconfig.hpp"


namespace picongpu
{
namespace flylite
{
    /** number of populations (numpop)
     *
     * this number defines how many configurations make up a superconfiguration
     *
     * range: [0, 255]
     */
    constexpr uint8_t populations = 3u; // example Cu data set: 32u

    using Superconfig = types::Superconfig<
        float_64,
        populations
    >;

    /** ionization states of the atom (iz)
     *
     * range: [0, 255]
     */
    constexpr uint8_t ionizationStates = 29u;

    /** number of energy bins
     *
     * energy steps used for local energy histograms
     * @note: no overflow- or underflow-bins are used, particles with energies
     *        outside the range (see below) are ignored
     */
    constexpr uint16_t energies = 512u;

    /** energy range for electron and photon histograms
     *
     * electron and photon histograms f(e) f(ph) are currently
     * calculated in a linearly binned histogram while particles with
     * energies outside the ranges below are ignored
     *
     * unit: eV
     */
    constexpr float_X electronMinEnergy = 0.0;
    constexpr float_X electronMaxEnergy = 100.e3;
    constexpr float_X photonMinEnergy = 0.0;
    constexpr float_X photonMaxEnergy = 100.e3;

    /** you better not change this line, the wooooorld depends on it!
     *
     * no seriously, per-supercell is the quickest way to average particle
     * quantities such as density, energy histogram, etc. and I won't implement
     * another size until needed
     */
    using spatialAverageBox = SuperCellSize;
} // namespace flylite
} // namespace picongpu
