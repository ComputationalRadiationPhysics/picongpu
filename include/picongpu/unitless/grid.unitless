/* Copyright 2013-2019 Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include <pmacc/math/Vector.hpp>

namespace picongpu
{
    // normed grid parameter
    constexpr float_X DELTA_T = float_X( SI::DELTA_T_SI / UNIT_TIME );
    constexpr float_X CELL_WIDTH = float_X( SI::CELL_WIDTH_SI / UNIT_LENGTH );
    constexpr float_X CELL_HEIGHT = float_X( SI::CELL_HEIGHT_SI / UNIT_LENGTH );
    constexpr float_X CELL_DEPTH = float_X( SI::CELL_DEPTH_SI / UNIT_LENGTH );
    CONST_VECTOR( float_X, DIM3, cellSize, CELL_WIDTH, CELL_HEIGHT, CELL_DEPTH );

    // always a 3D cell, even in 1D3V or 2D3V
    constexpr float_X CELL_VOLUME = CELL_WIDTH * CELL_HEIGHT * CELL_DEPTH;

    // only used for CFL checks
#if (SIMDIM==DIM3)
    constexpr float_X INV_CELL2_SUM =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH  ) +
        1.0 / ( CELL_HEIGHT * CELL_HEIGHT ) +
        1.0 / ( CELL_DEPTH  * CELL_DEPTH  );
#elif(SIMDIM==DIM2)
    constexpr float_X INV_CELL2_SUM =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH  ) +
        1.0 / ( CELL_HEIGHT * CELL_HEIGHT );
#else
    constexpr float_X INV_CELL2_SUM =
        1.0 / ( CELL_WIDTH  * CELL_WIDTH );
#endif

}
