/* Copyright 2013-2023 Axel Huebl, Rene Widera, Marco Garten, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
    //! reduced Planck constant
    constexpr float_X HBAR = (float_X) (SI::HBAR_SI / sim.unit.energy() / sim.unit.time());

    //! Mass of electron
    constexpr float_X ELECTRON_MASS = (float_X) (SI::ELECTRON_MASS_SI / sim.unit.mass());

    //! magnetic constexprant must be double 3.92907e-39
    constexpr float_X MUE0
        = (float_X) (SI::MUE0_SI / sim.unit.length() / sim.unit.mass() * sim.unit.charge() * sim.unit.charge());

    //! electric constexprant must be double 2.54513e+38
    constexpr float_X EPS0 = (float_X) (1. / MUE0 / sim.pic.getSpeedOfLight() / sim.pic.getSpeedOfLight());

    // = 1/c^2
    constexpr float_X MUE0_EPS0 = float_X(1. / sim.pic.getSpeedOfLight() / sim.pic.getSpeedOfLight());

    //! Impedance of free space
    constexpr float_X Z0 = MUE0 * sim.pic.getSpeedOfLight();

    /* Atomic unit of electric field in PIC Efield units */
    constexpr float_X ATOMIC_UNIT_EFIELD = float_X(SI::ATOMIC_UNIT_EFIELD / sim.unit.eField());

    /* Atomic unit of time in PIC units */
    constexpr float_X ATOMIC_UNIT_TIME = float_X(SI::ATOMIC_UNIT_TIME / sim.unit.time());

} // namespace picongpu
