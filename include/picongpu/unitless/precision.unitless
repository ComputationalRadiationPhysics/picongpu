/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/math/Vector.hpp>


namespace picongpu
{

    using float_X = precisionPIConGPU::precisionType;

    namespace precision32Bit
    {
        using float_X = precisionType;
        /* 32 Bit defines */
        using float1_X = ::pmacc::math::Vector< float_X, 1 >;
        using float2_X = ::pmacc::math::Vector< float_X, 2 >;
        using float3_X = ::pmacc::math::Vector< float_X, 3 >;
        using floatD_X = ::pmacc::math::Vector< float_X, simDim >;
    }

    namespace precision64Bit
    {
        using float_X = precisionType;
        /* 64 Bit defines */
        using float1_X = ::pmacc::math::Vector< float_X, 1 >;
        using float2_X = ::pmacc::math::Vector< float_X, 2 >;
        using float3_X = ::pmacc::math::Vector< float_X, 3 >;
        using floatD_X = ::pmacc::math::Vector< float_X, simDim >;
    }

    using float_32 = precision32Bit::float_X;
    using float_64 = precision64Bit::float_X;

    /* variable precision defines */
    using float1_X = ::pmacc::math::Vector< float_X, 1 >;
    using float2_X = ::pmacc::math::Vector< float_X, 2 >;
    using float3_X = ::pmacc::math::Vector< float_X, 3 >;
    using floatD_X = ::pmacc::math::Vector< float_X, simDim >;
    /* 32 Bit defines */
    using float1_32 = precision32Bit::float1_X;
    using float2_32 = precision32Bit::float2_X;
    using float3_32 = precision32Bit::float3_X;
    using floatD_32 = precision32Bit::floatD_X;
    /* 64 Bit defines */
    using float1_64 = precision64Bit::float1_X;
    using float2_64 = precision64Bit::float2_X;
    using float3_64 = precision64Bit::float3_X;
    using floatD_64 = precision64Bit::floatD_X;

    // literals for short-hand notations
    constexpr float_X
    operator""_X( long double x )
    {
        return float_X( x );
    }

    // special functions
    using sqrt_X = precisionSqrt::precisionType;
    using exp_X = precisionExp::precisionType;
    // trigonometric functions
    using trigo_X = precisionTrigonometric::precisionType;

} // namespace picongpu
