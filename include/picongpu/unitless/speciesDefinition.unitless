/* Copyright 2014-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/traits/frame/GetCharge.hpp"
#include "picongpu/traits/frame/GetMass.hpp"
#include "picongpu/traits/attribute/GetCharge.hpp"
#include "picongpu/traits/attribute/GetChargeState.hpp"
#include "picongpu/traits/attribute/GetMass.hpp"
#include "picongpu/fields/currentDeposition/Solver.hpp"
#include "picongpu/particles/Particles.tpp"
#include "picongpu/particles/ionization/byField/ionizers.hpp"
#include "picongpu/particles/ionization/byCollision/ionizers.hpp"


namespace picongpu
{
namespace traits
{
namespace frame
{

/** default `getMass()` specialization
 *
 * - the default mass is `BASE_MASS * massRatio<>`
 * - massRatio<> is the user defined ratio which is pinned as flag to a species
 */
template<typename T_Frame>
HDINLINE float_X getMass()
{
    using MassRatioValue = typename pmacc::traits::Resolve<
        typename GetFlagType<
            T_Frame,
            massRatio<>
        >::type
    >::type;

    return BASE_MASS * MassRatioValue::getValue();
};


/** default `getCharge()` specialization
 *
 * - the default charge is `BASE_CHARGE * chargeRatio<>`
 * - chargeRatio<> is the user defined ratio which is pinned as flag to a species
 */
template<typename T_Frame>
HDINLINE float_X getCharge()
{
    using ChargeRatioValue = typename pmacc::traits::Resolve<
        typename GetFlagType<
            T_Frame,
            chargeRatio<>
        >::type
    >::type;

    return BASE_CHARGE * ChargeRatioValue::getValue();
};

} // namespace frame
} // namespace traits
} // namespace picongpu
