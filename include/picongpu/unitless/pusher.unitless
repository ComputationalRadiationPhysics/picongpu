/* Copyright 2013-2021 Axel Huebl, Rene Widera, Richard Pausch, Annegret Roeszler
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/algorithms/Gamma.hpp"
#include "picongpu/algorithms/Velocity.hpp"
#include "picongpu/particles/pusher/particlePusherAcceleration.hpp"
#include "picongpu/particles/pusher/particlePusherBoris.hpp"
#include "picongpu/particles/pusher/particlePusherComposite.hpp"
#include "picongpu/particles/pusher/particlePusherFree.hpp"
#include "picongpu/particles/pusher/particlePusherHigueraCary.hpp"
#include "picongpu/particles/pusher/particlePusherPhoton.hpp"
#include "picongpu/particles/pusher/particlePusherPhotonWithPhase.hpp"
#include "picongpu/particles/pusher/particlePusherProbe.hpp"
#include "picongpu/particles/pusher/particlePusherReducedLandauLifshitz.hpp"
#include "picongpu/particles/pusher/particlePusherVay.hpp"
#if(SIMDIM == DIM3)
#    include "picongpu/particles/pusher/particlePusherAxel.hpp"
#endif

#include <pmacc/math/operation.hpp>


namespace picongpu
{
    namespace particles
    {
        namespace pusher
        {
            struct Acceleration : public particlePusherAcceleration::Push<Velocity, Gamma<>>
            {
            };

#if(SIMDIM == DIM3)

            struct Axel : public particlePusherAxel::Push<Velocity, Gamma<>>
            {
            };
#endif

            struct Boris : public particlePusherBoris::Push<Velocity, Gamma<>>
            {
            };

            struct Vay : public particlePusherVay::Push<Velocity, Gamma<>>
            {
            };

            struct HigueraCary : public particlePusherHigueraCary::Push<Velocity, Gamma<>>
            {
            };

            struct Free : public particlePusherFree::Push<Velocity, Gamma<>>
            {
            };

            struct Photon : public particlePusherPhoton::Push<Velocity, Gamma<>>
            {
            };

            struct PhotonWithPhase : public particlePusherPhotonWithPhase::Push<Velocity, Gamma<>>
            {
            };

            struct ReducedLandauLifshitz : public particlePusherReducedLandauLifshitz::Push<Velocity, Gamma<>>
            {
            };

            struct Probe
                : public particlePusherProbe::Push<pmacc::math::operation::Assign, particlePusherProbe::ActualPusher>
            {
            };

            template<typename T_FirstPusher, typename T_SecondPusher, typename T_ActivationFunctor>
            struct Composite : public particlePusherComposite::Push<T_FirstPusher, T_SecondPusher, T_ActivationFunctor>
            {
            };

            template<uint32_t T_switchTimeStep>
            struct CompositeBinarySwitchActivationFunctor
                : public particlePusherComposite::BinarySwitchActivationFunctor<T_switchTimeStep>
            {
            };

        } // namespace pusher
    } // namespace particles
} // namespace picongpu
