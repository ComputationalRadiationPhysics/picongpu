/* Copyright 2013-2023 Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include <pmacc/math/ConstVector.hpp>
#include <pmacc/math/Vector.hpp>

namespace picongpu
{
    struct Sim
    {
        struct PicUnits
        {
            /** cell size width, high, depth */
            template<typename T_Type = float_X>
            constexpr math::Vector<T_Type, 3u> getCellSize() const
            {
                return precisionCast<T_Type>(si.getCellSize() / unit.length());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getDt() const
            {
                return static_cast<T_Type>(si.getDt() / unit.time());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getSpeedOfLight() const
            {
                return static_cast<T_Type>(si.getSpeedOfLight() / unit.speed());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getBaseMass() const
            {
                return static_cast<T_Type>(si.getBaseMass() / unit.mass());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getBaseCharge() const
            {
                return static_cast<T_Type>(si.getBaseCharge() / unit.charge());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getBaseDensity() const
            {
                return static_cast<T_Type>(si.getBaseDensity() * unit.length() * unit.length() * unit.length());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getElectronMass() const
            {
                return static_cast<T_Type>(si.getElectronMass() / unit.mass());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getElectronCharge() const
            {
                return static_cast<T_Type>(si.getElectronCharge() / unit.charge());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getMue0() const
            {
                return static_cast<T_Type>(si.getMue0() / unit.length() / unit.mass() * unit.charge() * unit.charge());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getEps0() const
            {
                return static_cast<T_Type>(
                    1. / pic.getMue0<T_Type>() / pic.getSpeedOfLight<T_Type>() / pic.getSpeedOfLight<T_Type>());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getMue0Eps0() const
            {
                return static_cast<T_Type>(1. / pic.getSpeedOfLight<T_Type>() / pic.getSpeedOfLight<T_Type>());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getZ0() const
            {
                return static_cast<T_Type>(pic.getMue0<T_Type>() * pic.getSpeedOfLight<T_Type>());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getHbar() const
            {
                return static_cast<T_Type>(si.getHbar() / unit.energy() / unit.time());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getRydbergEnergy() const
            {
                return static_cast<T_Type>(si.getRydbergEnergy() / unit.energy());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getBohrRadius() const
            {
                return static_cast<T_Type>(si.getBohrRadius() / unit.length());
            }

            template<typename T_Type = float_X>
            constexpr T_Type getClassicalElectronRadius() const
            {
                return static_cast<T_Type>(si.getClassicalElectronRadius() / unit.length());
            }
        };
        struct SiUnits
        {
            /** unit: meter */
            constexpr float3_64 getCellSize() const
            {
                return {SI::CELL_WIDTH_SI, SI::CELL_HEIGHT_SI, SI::CELL_DEPTH_SI};
            }

            /** unit: seconds */
            constexpr float_64 getDt() const
            {
                return SI::DELTA_T_SI;
            }

            /** unit: meter / seconds */
            constexpr float_64 getSpeedOfLight() const
            {
                return SI::SPEED_OF_LIGHT_SI;
            }

            /** Base density in particles per m^3 in the density profiles.
             *
             * This is often taken as reference maximum density in normalized profiles.
             * Individual particle species can define a `densityRatio` flag relative
             * to this value.
             *
             * unit: ELEMENTS/m^3
             */
            constexpr float_64 getBaseDensity() const
            {
                return SI::BASE_DENSITY_SI;
            }

            /** base particle mass
             *
             * reference for massRatio in speciesDefinition.param
             *
             * unit: kg
             */
            constexpr float_64 getBaseMass() const
            {
                return SI::BASE_MASS_SI;
            }
            /** base particle charge
             *
             * reference for chargeRatio in speciesDefinition.param
             *
             * unit: C
             */
            constexpr float_64 getBaseCharge() const
            {
                return SI::BASE_CHARGE_SI;
            }

            /** Electron properties
             * unit: kg
             */
            constexpr float_64 getElectronMass() const
            {
                return SI::ELECTRON_MASS_SI;
            }
            /** Electron properties
             * unit: C
             */
            constexpr float_64 getElectronCharge() const
            {
                return SI::ELECTRON_CHARGE_SI;
            }

            /** vacuum magnetic permability
             *
             * unit: N / A^2
             *
             * 2022 CODATA Value, https://physics.nist.gov/cgi-bin/cuu/Value?mu0
             */
            constexpr float_64 getMue0() const
            {
                return SI::MUE0_SI;
            }

            /** unit: C / (V m) */
            constexpr float_64 getEps0() const
            {
                return 1.0 / getMue0() / getSpeedOfLight() / getSpeedOfLight();
            }

            /** = 1/c^2 */
            constexpr float_64 getMue0Eps0() const
            {
                return 1.0 / getSpeedOfLight() / getSpeedOfLight();
            }

            /** impedance of free space
             * unit: ohm */
            constexpr float_64 getZ0() const
            {
                return getMue0() * getSpeedOfLight();
            }

            /** reduced Planck constant
             *
             * unit: J * s
             *
             * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?hbar
             */
            constexpr float_64 getHbar() const
            {
                return 1.054571817e-34;
            }

            /** Rydberg energy, unit: J
             *
             * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?rydhcev
             */
            constexpr float_64 getRydbergEnergy() const
            {
                // convert from  unit eV to Joule
                return conv.ev2Joule(13.605693122990);
            }

            /** bohr radius, unit: m
             *
             * 2022 CODATA value, https://physics.nist.gov/cgi-bin/cuu/Value?bohrrada0
             */
            constexpr float_64 getBohrRadius() const
            {
                return 5.29177210544e-11;
            }

            /** Avogadro number
             * unit: mol^-1
             *
             * Y. Azuma et al. Improved measurement results for the Avogadro
             * constant using a 28-Si-enriched crystal, Metrologie 52, 2015, 360-375
             * doi:10.1088/0026-1394/52/2/360
             */
            constexpr float_64 getNAvogadro() const
            {
                return 6.02214076e23;
            }

            /** Classical electron radius, unit: m */
            constexpr float_64 getClassicalElectronRadius() const
            {
                return getElectronCharge() * getElectronCharge()
                    / (4.0 * PI * getEps0() * getElectronMass() * getSpeedOfLight() * getSpeedOfLight());
            }

            struct Convert
            {
                /** convert from eV into joule */
                constexpr float_64 ev2Joule(float_64 eV = 1.0) const
                {
                    return eV * 1.602176634e-19;
                }

                /** convert from joule into eV */
                constexpr float_64 joule2ev(float_64 joule = 1.0) const
                {
                    return joule / ev2Joule(1.0);
                }
            };

            static constexpr Convert conv{};
        };

        /** units to convert from SI into PIConGPU's SI unit system */
        struct Units
        {
            constexpr float_64 length() const
            {
                return time() * speed();
            }

            constexpr float_64 time() const
            {
                return si.getDt();
            }

            constexpr float_64 speed() const
            {
                return si.getSpeedOfLight();
            }

            constexpr float_64 mass() const
            {
                return si.getBaseMass() * typicalNumParticlesPerMacroParticle();
            }

            constexpr float_64 charge() const
            {
                return -1.0 * si.getBaseCharge() * typicalNumParticlesPerMacroParticle();
            }

            constexpr float_64 energy() const
            {
                return mass() * length() * length() / (time() * time());
            }

            /** Unit of EField: V/m */
            constexpr float_64 eField() const
            {
                return 1.0 / (time() * time() / mass() / length() * charge());
            }

            /** Unit of BField: Tesla [T] = Vs/m^2 */
            constexpr float_64 bField() const
            {
                return mass() / (time() * charge());
            }
            /** Typical number of particles per macro particle (= typical macro particle weighting)
             *  unit: none
             */
            constexpr float_64 typicalNumParticlesPerMacroParticle() const
            {
                return (si.getBaseDensity() * si.getCellSize().productOfComponents())
                    / static_cast<float_64>(getTypicalNumParticlesPerCell());
            }
        };

        static constexpr uint32_t getTypicalNumParticlesPerCell()
        {
            return TYPICAL_PARTICLES_PER_CELL;
        }

        static constexpr uint32_t dim()
        {
            static_assert(
                simDim == SIMDIM,
                "Preprocessor define SIMDIM and simDim must be equal! see file dimension.param");
            return simDim;
        }

        static constexpr PicUnits pic{};
        static constexpr SiUnits si{};
        static constexpr Units unit{};
    };

    constexpr auto sim = Sim{};
} // namespace picongpu
