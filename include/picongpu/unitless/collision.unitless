/* Copyright 2021-2023 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/param/collision.param"

#include <pmacc/math/Vector.hpp>

namespace picongpu
{
    namespace particles
    {
        namespace collision
        {
            namespace precision
            {
                // literals for short-hand notations for collisions
                constexpr float_COLL operator""_COLL(long double x)
                {
                    return float_COLL(x);
                }

                using float3_COLL = pmacc::math::Vector<float_COLL, 3>;
                const float_COLL DELTA_T_COLL = static_cast<float_COLL>(sim.pic.getDt());
                const float_COLL EPS0_COLL = static_cast<float_COLL>(sim.pic.getEps0());
                const float_COLL WEIGHT_NORM_COLL
                    = static_cast<float_COLL>(sim.unit.typicalNumParticlesPerMacroParticle());
                const float_COLL CELL_VOLUME_COLL
                    = static_cast<float_COLL>(sim.pic.getCellSize().productOfComponents());
            } // namespace precision
        } // namespace collision
    } // namespace particles
} // namespace picongpu
