/* Copyright 2013-2019 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/static_assert.hpp>
#include <type_traits>


namespace picongpu
{
namespace traits
{
    template< typename >
    struct is_laser_none : std::false_type {};

    template< typename T >
    struct is_laser_none< fields::laserProfiles::None< T > > : std::true_type {};

    template< typename >
    struct is_laser_planewave : std::false_type {};

    template< typename T >
    struct is_laser_planewave< fields::laserProfiles::PlaneWave< T > > : std::true_type {};
}
    // asserts for wrong user configurations
    //
    // setting 1: Laser
#if( EM_FIELD_SCALE_CHANNEL1 == 1 || EM_FIELD_SCALE_CHANNEL2 == 1 || EM_FIELD_SCALE_CHANNEL3 == 1 )
    PMACC_CASSERT_MSG(
        You_can_not_scale_your_preview_to_laser_without_using_a_laser___change_png_param,
        !traits::is_laser_none< fields::laserProfiles::Selected >::value
    );
#endif

    // setting 2: Drifting Plasma
#if( EM_FIELD_SCALE_CHANNEL1 == 2 || EM_FIELD_SCALE_CHANNEL2 == 2 || EM_FIELD_SCALE_CHANNEL3 == 2 )
    PMACC_CASSERT_MSG( You_can_not_scale_your_preview_to_drift_without_a_initially_drifting_plasma___change_png_param, ((PARTICLE_INIT_DRIFT_GAMMA)>1.0) );
#endif

    // setting 3: Plasma Wave
#if( EM_FIELD_SCALE_CHANNEL1 == 3 || EM_FIELD_SCALE_CHANNEL2 == 3 || EM_FIELD_SCALE_CHANNEL3 == 3 )
    PMACC_CASSERT_MSG( You_can_not_scale_your_preview_to_a_zero_plasma_density___change_png_param, (BASE_DENSITY>0.0) );
#endif

    // setting 4: Thermal Warm Plasma
#if( EM_FIELD_SCALE_CHANNEL1 == 4 || EM_FIELD_SCALE_CHANNEL2 == 4 || EM_FIELD_SCALE_CHANNEL3 == 4 )
    PMACC_CASSERT_MSG( You_can_not_scale_your_preview_to_a_zero_plasma_density___change_png_param, (BASE_DENSITY>0.0) );
    PMACC_CASSERT_MSG( You_can_not_scale_your_preview_to_a_zero_electron_temperature___change_png_param, ((ELECTRON_TEMPERATURE)>0.0) );
#endif

    // setting 5: Blow Out
#if( EM_FIELD_SCALE_CHANNEL1 == 5 || EM_FIELD_SCALE_CHANNEL2 == 5 || EM_FIELD_SCALE_CHANNEL3 == 5 )
    //PMACC_CASSERT_MSG( You_can_not_scale_your_preview_to_a_zero_plasma_density___change_png_param, (BASE_DENSITY>0.0) );
    PMACC_CASSERT_MSG(
        You_can_not_scale_your_preview_to_blowout_without_a_laser___change_png_param,
        !traits::is_laser_none< fields::laserProfiles::Selected >::value
    );
    PMACC_CASSERT_MSG(
        You_can_not_scale_your_preview_to_blowout_with_a_laser_without_beam_waist___change_png_param,
        !traits::is_laser_planewave< fields::laserProfiles::Selected >::value
    );
#endif
}
