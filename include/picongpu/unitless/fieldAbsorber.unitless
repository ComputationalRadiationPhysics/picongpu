/* Copyright 2019-2023 Sergei Bastrakov, Klaus Steiniger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


#include <pmacc/math/Vector.hpp>

namespace picongpu
{
    namespace fields
    {
        namespace absorber
        {
            namespace pml
            {
                // Assert parameters are in the valid ranges
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_grading_order_for_pml_kappa_and_sigma___change_pml_param,
                    (SIGMA_KAPPA_GRADING_ORDER >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_value_pml_sigma_max_x___change_pml_param,
                    (SIGMA_MAX_SI[0] >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_value_pml_sigma_max_y___change_pml_param,
                    (SIGMA_MAX_SI[1] >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_value_pml_sigma_max_z___change_pml_param,
                    (SIGMA_MAX_SI[2] >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_pml_kappa_max_x_value_less_than_one___change_pml_param,
                    (KAPPA_MAX[0] >= 1.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_pml_kappa_max_y_value_less_than_one___change_pml_param,
                    (KAPPA_MAX[1] >= 1.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_pml_kappa_max_z_value_less_than_one___change_pml_param,
                    (KAPPA_MAX[2] >= 1.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_grading_order_for_pml_alpha___change_pml_param,
                    (ALPHA_GRADING_ORDER >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_pml_alpha_max_x___change_pml_param,
                    (ALPHA_MAX_SI[0] >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_pml_alpha_max_y___change_pml_param,
                    (ALPHA_MAX_SI[1] >= 0.0));
                PMACC_CASSERT_MSG(
                    You_can_not_set_negative_pml_alpha_max_z___change_pml_param,
                    (ALPHA_MAX_SI[2] >= 0.0));

                /* Normalize artificial conductivity by eps0, so that the result can be used
                 * for matching electric conductivity and magnetic permeability
                 * unit: 1 / s
                 */
                constexpr float_64 NORMALIZED_SIGMA_MAX_SI[3]
                    = {SIGMA_MAX_SI[0] / sim.si.getEps0(),
                       SIGMA_MAX_SI[1] / sim.si.getEps0(),
                       SIGMA_MAX_SI[2] / sim.si.getEps0()};

                /** Max value of normalized conductivity in PIC units
                 *
                 * unit: 1 / time
                 * (that is why we multiply by sim.unit.time() and not divide)
                 */
                constexpr float_64 NORMALIZED_SIGMA_MAX[3]
                    = {NORMALIZED_SIGMA_MAX_SI[0] * sim.unit.time(),
                       NORMALIZED_SIGMA_MAX_SI[1] * sim.unit.time(),
                       NORMALIZED_SIGMA_MAX_SI[2] * sim.unit.time()};

                /* Normalize complex frequency shift by eps0, so that the result can be used
                 * for matching electric conductivity and magnetic permeability
                 * unit: 1 / s
                 */
                constexpr float_64 NORMALIZED_ALPHA_MAX_SI[3]
                    = {ALPHA_MAX_SI[0] / sim.si.getEps0(),
                       ALPHA_MAX_SI[1] / sim.si.getEps0(),
                       ALPHA_MAX_SI[2] / sim.si.getEps0()};

                /** Max value of normalized complex frequency shift in PIC units
                 *
                 * unit: 1 / time
                 * (that is why we multiply by sim.unit.time() and not divide)
                 */
                constexpr float_64 NORMALIZED_ALPHA_MAX[3]
                    = {NORMALIZED_ALPHA_MAX_SI[0] * sim.unit.time(),
                       NORMALIZED_ALPHA_MAX_SI[1] * sim.unit.time(),
                       NORMALIZED_ALPHA_MAX_SI[2] * sim.unit.time()};

            } // namespace pml
        } // namespace absorber
    } // namespace fields
} // namespace picongpu
