/* Copyright 2015-2019 Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/types.hpp>

namespace picongpu
{
namespace particles
{
namespace ionization
{
    /** Barrier Suppression Ionization - Implementation
     *
     * \tparam T_DestSpecies electron species to be created
     * \tparam T_SrcSpecies particle species that is ionized
     *         default is boost::mpl placeholder because specialization
     *         cannot be known in list of particle species' flags
     *         \see speciesDefinition.param
     */
    template< typename T_IonizationAlgorithm, typename T_DestSpecies, typename T_SrcSpecies = bmpl::_1 >
    struct BSI_Impl;

    /** Barrier Suppression Ionization - Hydrogen-Like
     *
     * - takes the ionization energies of the various charge states of ions
     * - calculates the corresponding field strengths necessary to overcome
     *   the binding energy of the electron to the core
     * - if the field strength is locally exceeded: increase the charge state
     * - see for example: Delone, N. B.; Krainov, V. P. (1998).
     *   "Tunneling and barrier-suppression ionization of atoms and ions in a laser radiation field"
     *   doi:10.1070/PU1998v041n05ABEH000393
     *
     * - This model accounts for naive ion charge shielding by inner electrons
     *   as it assumes that the charge the electron 'feels' is equal to
     *   `proton number - number of inner shell electrons`.
     * - This model neglects the Stark upshift of ionization energies.
     *
     * \tparam T_DestSpecies electron species to be created
     *
     * wrapper class,
     * needed because the SrcSpecies cannot be known during the
     * first specialization of the ionization model in the particle definition
     * \see speciesDefinition.param
     */
    template< typename T_DestSpecies >
    struct BSI
    {
        using IonizationAlgorithm = particles::ionization::AlgorithmBSI;
        using type = BSI_Impl< IonizationAlgorithm, T_DestSpecies >;
    };

    /** Barrier Suppression Ionization - Effective Atomic Numbers
     *
     * - similar to BSI
     *
     * - tries to account for electron shielding by issuing a lookup table of
     *   effective atomic numbers for each filled electron shell @see ionizer.param
     * - unvalidated and still in development
     *
     * \tparam T_DestSpecies electron species to be created
     */
    template< typename T_DestSpecies >
    struct BSIEffectiveZ
    {
        using IonizationAlgorithm = particles::ionization::AlgorithmBSIEffectiveZ;
        using type = BSI_Impl< IonizationAlgorithm, T_DestSpecies >;
    };

    /** Barrier Suppression Ionization - Ion. energies Stark-upshifted
     *
     * - similar to BSI
     *
     * - developed by Bauer and Mulser (book: High Power Laser Matter Interaction)
     * - accounts for stark upshift of ionization energy but only covers the
     *   hydrogenlike ions originally
     * - \todo needs to be extrapolated to arbitrary ions
     *
     * \tparam T_DestSpecies electron species to be created
     */
    template< typename T_DestSpecies >
    struct BSIStarkShifted
    {
        using IonizationAlgorithm = particles::ionization::AlgorithmBSIStarkShifted;
        using type = BSI_Impl< IonizationAlgorithm, T_DestSpecies >;
    };

} // namespace ionization
} // namespace particles
} // namespace picongpu
