/* Copyright 2022-2023 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/particleToGrid/CombinedDerivedAttribute.hpp"
#include "picongpu/particles/particleToGrid/derivedAttributes/EnergyDensity.def"

namespace picongpu
{
    namespace particles
    {
        namespace particleToGrid
        {
            namespace combinedAttributes
            {
                //! Compute the inverse square of a single species screening length
                struct ScreeningInvSquaredOperation
                {
                    template<typename T_Species>
                    struct apply
                    {
                        using type = ScreeningInvSquaredOperation;
                    };

                    /** Functor implementation
                     *
                     * Result overwrites the chargeDensity value.
                     *
                     * @tparam T_Acc alpaka accelerator type
                     * @param acc alpaka accelerator
                     * @param density charge density value and the result destination
                     * @param energyDensity energy density value
                     */
                    template<typename T_Acc>
                    HDINLINE void operator()(T_Acc const& acc, float1_X& chargeDensity, const float1_X& energyDensity)
                        const;
                };
                struct ScreeningInvSquaredDescription;

                /** inverse square of a single species screening length
                 *
                 * This attribute is equal to \f$ \frac{1}{\epsilon_0}nq^2/T $\f
                 * with T - species temperature, n - number density, q - charge.
                 *
                 * We use here average charge for ion species and use average kinetic
                 * energy for temperature. This calculation uses an equivalent formula
                 * \f$\lambda^{-2} = \frac{1}{\epsilon_0} \frc{\rho^2}{\varepsilon}$\f
                 * with \f$\varepsilon$\f - kinetic energy density, \f$\rho$\f - charge density.
                 */
                using ScreeningInvSquared = CombinedDeriveAttribute<
                    particleToGrid::derivedAttributes::ChargeDensity,
                    particleToGrid::derivedAttributes::EnergyDensity,
                    ScreeningInvSquaredOperation,
                    ScreeningInvSquaredDescription>;
            } // namespace combinedAttributes
        } // namespace particleToGrid
    } // namespace particles
} // namespace picongpu
