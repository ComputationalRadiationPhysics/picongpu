/* Copyright 2013-2019 Axel Huebl, Rene Widera, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "picongpu/traits/SIBaseUnits.hpp"
#include "picongpu/particles/traits/SpeciesEligibleForSolver.hpp"
#include "picongpu/particles/particleToGrid/derivedAttributes/EnergyDensity.def"

#include <pmacc/traits/HasIdentifiers.hpp>
#include <pmacc/traits/HasFlag.hpp>

#include <boost/mpl/and.hpp>

#include <vector>

namespace picongpu
{
namespace particles
{
namespace particleToGrid
{
namespace derivedAttributes
{
    /** Energy Density Operation with Maxmimum Energy Cut-Off for Particle to Grid Projections
     *
     * Derives a scalar field for average kinetic particle energy per cell times the
     * particle density from a particle species at runtime.
     * Each value is mapped per cell according to the species' spatial shape.
     *
     * @note Only energies below a user-definable cut-off energy are taken for
     *       calculation!
     *
     * @tparam T_ParamClass parameter class containing the maximum energy cutoff
     *
     * @note T_ParamClass requires the member `constexpr float_X cutoffMaxEnergy`.
     */
    template< typename T_ParamClass >
    struct EnergyDensityCutoff : public EnergyDensity
    {

        HINLINE static
        std::string
        getName()
        {
            return "energyDensityCutoff";
        }

        /** Calculate a new attribute  per particle
         *
         * Returns a new (on-the-fly calculated) attribute of a particle
         * that can then be mapped to the cells the particle contributes to.
         * This method is called on a per-thread basis (each thread of a block
         * handles a particle of a frame).
         *
         * @tparam T_Particle particle in the frame
         * @param particle particle in the frame
         *
         * @return new attribute for the particle (type @see T_AttributeType)
         */
        template< class T_Particle >
        DINLINE float_X
        operator()( T_Particle& particle ) const;
    };
} // namespace derivedAttributes
} // namespace particleToGrid

namespace traits
{
    template<
        typename T_Species,
        typename T_ParamClass
    >
    struct SpeciesEligibleForSolver<
        T_Species,
        particleToGrid::derivedAttributes::EnergyDensityCutoff< T_ParamClass >
    > : public SpeciesEligibleForSolver<
        T_Species,
        particleToGrid::derivedAttributes::EnergyDensity
    >
    {
    };
} // namespace traits
} // namespace particles
} // namespace picongpu
