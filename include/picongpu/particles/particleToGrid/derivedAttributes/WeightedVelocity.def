/* Copyright 2022-2023 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/traits/SpeciesEligibleForSolver.hpp"
#include "picongpu/plugins/misc/ComponentNames.hpp"
#include "picongpu/traits/SIBaseUnits.hpp"

#include <pmacc/static_assert.hpp>
#include <pmacc/traits/HasIdentifiers.hpp>

#include <cstdint>
#include <vector>


namespace picongpu
{
    namespace particles
    {
        namespace particleToGrid
        {
            namespace derivedAttributes
            {
                /** Chosen component of velocity for particle to grid projections (weighted)
                 *
                 * Derives a scalar field for a sum of a chosen particle velocity component from a particle species
                 * at runtime. The contributions are weighted with particle weighting. Use only in combination
                 * with AveragedAttribute to calculate average velocity.
                 * Each value is mapped per cell according to the species' spatial shape.
                 *
                 * @param T_direction direction defining the component x=0, y=1, z=2
                 */
                template<size_t T_direction>
                struct WeightedVelocity
                {
                    PMACC_CASSERT_MSG(
                        _error_valid_Velocity_directions_are_0_to_2_for_X_to_Z__in_fileOutput_param,
                        (T_direction >= 0) && (T_direction < 3));

                    //! Get unit
                    HDINLINE float1_64 getUnit() const;

                    //! Get unit dimension
                    HINLINE std::vector<float_64> getUnitDimension() const
                    {
                        /* L, M, T, I, theta, N, J
                         *
                         * momentum is in mass times speed: kg * m / s
                         *   -> L * M * T^-1
                         */
                        std::vector<float_64> unitDimension(7, 0.0);
                        unitDimension.at(SIBaseUnits::length) = 1.0;
                        unitDimension.at(SIBaseUnits::mass) = 0.0;
                        unitDimension.at(SIBaseUnits::time) = -1.0;
                        return unitDimension;
                    }

                    //! Get text name
                    HINLINE static std::string getName()
                    {
                        auto const componentNames = plugins::misc::getComponentNames(3);
                        return "weightedVelocity/" + componentNames[T_direction];
                    }

                    /** Calculate value of the derived attribute per particle
                     *
                     * Returns an on-the-fly calculated value of a derived particle attribute for the given particle.
                     * The result can then be mapped to the cells the particle contributes to according to the
                     * assignment function.
                     *
                     * @tparam T_Particle particle type
                     * @param particle particle handle
                     *
                     * @return values of the derived attribute
                     */
                    template<typename T_Particle>
                    DINLINE float_X operator()(T_Particle& particle) const;
                };
            } // namespace derivedAttributes
        } // namespace particleToGrid

        namespace traits
        {
            /** Compatibility trait for species and momentum derived attribute
             *
             * @tparam T_Species species type
             * @tparam T_direction direction defining velocity component x=0, y=1, z=2
             */
            template<typename T_Species, size_t T_direction>
            struct SpeciesEligibleForSolver<
                T_Species,
                particleToGrid::derivedAttributes::WeightedVelocity<T_direction>>
            {
                using FrameType = typename T_Species::FrameType;

                using RequiredIdentifiers = MakeSeq_t<position<>, momentum>;
                using SpeciesHasIdentifiers =
                    typename pmacc::traits::HasIdentifiers<FrameType, RequiredIdentifiers>::type;
                // needs mass
                using SpeciesHasFlags = typename pmacc::traits::HasFlag<FrameType, massRatio<>>::type;
                using type = pmacc::mp_and<SpeciesHasIdentifiers, SpeciesHasFlags>;
            };
        } // namespace traits
    } // namespace particles
} // namespace picongpu
