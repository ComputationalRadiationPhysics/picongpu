/* Copyright 2014-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/functor/Filtered.hpp>
#include <pmacc/functor/Interface.hpp>
#include "picongpu/particles/filter/filter.def"
#include <pmacc/filter/Interface.hpp>
#include <pmacc/filter/operators/And.hpp>

namespace picongpu
{
namespace particles
{
namespace manipulators
{

    /** interface for a binary filtered particle functor
     *
     * The result of the filter is linked by a logic AND operation and the functor
     * is only called if the filter result is `true`.
     * The user functor and filter is passed by the manipulation algorithm
     * (e.g. picongpu::particles::ManipulateDerive, ...) to this interface, there is
     * no need to do this explicitly in the param files.
     *
     * @tparam T_BinaryFunctor binary particle functor, must contain
     *                         `void operator()(P1 & particle1, P2 & particle2, ...)`
     *                          and support at least two particles
     * @tparam T_UnaryFilter unary particle filter, must contain `bool operator()(P particle)`
     *                       each particle of the `T_BinaryFunctor::operator()`is passed through the filter
     */
    template<
        typename T_BinaryFunctor,
        typename T_UnaryFilter = filter::All
    >
    using IBinary = pmacc::functor::Filtered<
        pmacc::filter::operators::And,
        pmacc::filter::Interface<
            T_UnaryFilter,
            1u
        >,
        pmacc::functor::Interface<
            T_BinaryFunctor,
            2u,
            void
        >
    >;

} // namespace manipulators
} // namespace particles
} // namespace picongpu
