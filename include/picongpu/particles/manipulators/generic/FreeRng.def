/* Copyright 2015-2017 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <boost/mpl/integral_c.hpp>
#include <boost/mpl/placeholders.hpp>


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace generic
{

    /** call simple free user defined functor and provide a random number generator
     *
     *
     * @tparam T_Functor user defined unary functor
     * @tparam T_Distribution random number distribution
     * @tparam T_Seed seed to initialize the random number generator
     * @tparam T_SpeciesType type of the species that shall be manipulated
     *
     * example: add
     *   @code{.cpp}
     *   #include <pmacc/nvidia/rng/distributions/Uniform_float.hpp>
     *
     *   struct RandomXFunctor
     *   {
     *       template< typename T_Rng, typename T_Particle >
     *       DINLINE void operator()( T_Rng& rng, T_Particle& particle )
     *       {
     *           particle[ position_ ].x() = rng();
     *       }
     *   };
     *
     *   using RandomXPos = FreeRng<
     *      RandomXFunctor,
     *      nvidia::rng::distributions::Uniform_float
     *   >;
     *   particles::Manipulate< RandomXPos, SPECIES_NAME >
     *   @endcode
     *   to `InitPipeline` in `speciesInitialization.param`
     */
    template<
        typename T_Functor,
        typename T_Distribution,
        typename T_Seed = boost::mpl::integral_c<
            size_t,
            FREERNG_SEED
        >,
        typename T_SpeciesType = boost::mpl::_1
    >
    struct FreeRng;

} // namespace generic
} // namespace manipulators
} // namespace particles
} // namespace picongpu
