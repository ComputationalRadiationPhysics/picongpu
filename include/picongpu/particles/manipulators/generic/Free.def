/* Copyright 2015-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace generic
{

    /** call simple free user defined manipulators
     *
     * @tparam T_Functor user defined manipulators
     *                   **optional**: can implement **one** host side constructor
     *                   `T_Functor()` or `T_Functor(uint32_t currentTimeStep)`
     *
     * example for `particle.param`: set in cell position to zero
     *   @code{.cpp}
     *
     *   struct FunctorInCellPositionZero
     *   {
     *       template< typename T_Particle >
     *       HDINLINE void operator()( T_Particle & particle )
     *       {
     *           particle[ position_ ] = floatD_X::create( 0.0 );
     *       }
     *       static constexpr char const * name = "inCellPositionZero";
     *   };
     *
     *   using InCellPositionZero = generic::Free<
     *      FunctorInCellPositionZero
     *   >;
     *   @endcode
     */
    template< typename T_Functor >
    struct Free;

} // namespace generic
} // namespace manipulators
} // namespace particles
} // namespace picongpu
