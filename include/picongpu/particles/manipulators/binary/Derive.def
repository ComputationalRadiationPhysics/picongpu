/* Copyright 2015-2023 Rene Widera, Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/manipulators/generic/Free.def"

#include <pmacc/particles/operations/Assign.hpp>


namespace picongpu
{
    namespace particles
    {
        namespace manipulators
        {
            namespace binary
            {
                namespace acc
                {
                    //! assign attributes of one particle to another
                    struct Derive
                    {
                        IdGenerator m_idGen;

                        Derive(uint32_t, IdGenerator idGenerator) : m_idGen(idGenerator)
                        {
                        }

                        /** execute assign operator
                         *
                         * @tparam T_DestParticle pmacc::Particle, type of the destination particle
                         * @tparam T_SrcParticle pmacc::Particle, type of the source particle
                         * @tparam T_Args pmacc::Particle, arbitrary number of particles types
                         *
                         * @param particleDest destination particle
                         * @param particleSrc source particle
                         */
                        template<typename T_Worker, typename T_DestParticle, typename T_SrcParticle>
                        HDINLINE void operator()(
                            T_Worker const& worker,
                            T_DestParticle& particleDest,
                            T_SrcParticle& particleSrc)
                        {
                            particleDest.derive(worker, m_idGen, particleSrc);
                        }
                    };
                } // namespace acc

                /** derive attributes of one particle to another
                 *
                 * Compared to Copy, this functor can be called on species with different attribute lists.
                 * Typically common attributes are copied and unique attributes only existing in the destination
                 * particle will set to the initial default value. Please check the definition of all the particle
                 * attributes in speciesAttributes.param. Attributes are allowed to changes the behaviour for the
                 * derive operation.
                 */
                using Derive = generic::Free<acc::Derive>;

            } // namespace binary
        } // namespace manipulators
    } // namespace particles
} // namespace picongpu
