/* Copyright 2014-2024 Rene Widera, Sergei Bastrakov, Sergey Ermakov,
 *                     Sergey Ermakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/manipulators/generic/FreeRng.def"
#include "picongpu/particles/manipulators/unary/FreeTotalCellOffsetRng.def"

#include <pmacc/math/operation.hpp>
#include <pmacc/random/distributions/Uniform.hpp>

#include <cstdint>


namespace picongpu::particles::manipulators::unary
{
    namespace acc
    {
        /** Functor to modify particle momentum based on temperature for relativistic case
         * Use Maxwell Juettner Distribution, implementation based on https://doi.org/10.1063/1.4919383
         * This functor is for the highly-relativistic case.
         * In this case the added momentum follows the Maxwell-Juettner distribution.
         *
         * @tparam T_ValueFunctor pmacc::math::operation::*, binary functor type to
         *                        add a new momentum to an old one
         */

        /** Version with fixed temperature given via parameter struct
         *
         * @tparam T_ParamClass configuration parameter, follows requirements of param::MaxwellJuettnerCfg
         *
         * USE THIS IN THE SAME WAY AS Temperature.hpp JUST REPLACE Temperature with MaxwellJuettner FOR
         * ALL FUNCTOR AND TEMPLATE NAMES
         **/
        template<typename T_ParamClass, typename T_ValueFunctor>
        struct MaxwellJuettner;

        /** Version with user-provided temperature functor
         *
         * @tparam T_MaxwellJuettnerFunctor temperature functor, follows requirements of
         * param::MaxwellJuettnerFunctor
         **/
        template<typename T_Functor, typename T_ValueFunctor>
        struct FreeMaxwellJuettner;

        /** @} */
    } // namespace acc

    namespace param
    {
        //! Configuration struct for the unary manipulator MaxwellJuettner
        struct MaxwellJuettnerCfg
        {
            /** Initial temperature
             *  unit: keV
             */
            static constexpr float_64 temperature = 0.0;
        };

        //! Configuration functor for the unary manipulator FreeMaxwellJuettner
        struct MaxwellJuettnerFunctor
        {
            /** Constructors
             *
             * At least one of them must be provided (or auto-generated by a compiler).
             * The version with current step will be called when available.
             *
             * @{
             */

            //! Default constructor
            HINLINE MaxwellJuettnerFunctor()
            {
            }

            /** Constructor with current step
             *
             * @param currentStep current time iteration
             */
            HINLINE MaxwellJuettnerFunctor(uint32_t currentStep)
            {
            }

            /** @} */

            /** Return the temperature in keV for the given position
             *
             * Return type may be float_X or float_64.
             *
             * @param position_SI total offset including all slides [meter]
             * @param cellSize_SI cell sizes [meter]
             */
            HDINLINE float_X operator()(floatD_64 const& position_SI, float3_64 const& cellSize_SI)
            {
                return 0.0_X;
            }
        };
    } // namespace param

    /** Modify particle momentum based on temperature
     *
     * Sample a random momentum value distributed according to the given temperature and add it to the
     * existing particle momentum.
     *
     * Note: initial electron temperature should generally be chosen so that the resulting Debye length is
     *       resolved by the grid.
     *
     * @tparam T_ValueFunctor pmacc::math::operation::*, binary functor type to
     *                        add a new momentum to an old one
     *
     * @{
     */

    /** Version with fixed temperature given via parameter struct
     *
     * @tparam T_ParamClass configuration parameter, follows requirements of param::MaxwellJuettnerCfg
     */
    template<typename T_ParamClass = param::MaxwellJuettnerCfg, typename T_ValueFunctor = pmacc::math::operation::Add>
    using MaxwellJuettner = generic::FreeRng<
        acc::MaxwellJuettner<T_ParamClass, T_ValueFunctor>,
        pmacc::random::distributions::Uniform<pmacc::random::distributions::uniform::ExcludeZero<float_X>>>;

    /** Version with user-provided temperature functor
     *
     * @tparam T_MaxwellJuettnerFunctor temperature functor, follows requirements of
     * param::MaxwellJuettnerFunctor
     */
    template<
        typename T_MaxwellJuettnerFunctor = param::MaxwellJuettnerFunctor,
        typename T_ValueFunctor = pmacc::math::operation::Add>
    using FreeMaxwellJuettner = FreeTotalCellOffsetRng<
        acc::FreeMaxwellJuettner<T_MaxwellJuettnerFunctor, T_ValueFunctor>,
        pmacc::random::distributions::Uniform<pmacc::random::distributions::uniform::ExcludeZero<float_X>>>;

    /** @} */

} // namespace picongpu::particles::manipulators::unary
