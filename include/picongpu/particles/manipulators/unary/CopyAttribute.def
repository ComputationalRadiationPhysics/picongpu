/* Copyright 2017-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/manipulators/generic/Free.def"


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace unary
{
namespace acc
{

    /** helper functor to copy a particle source attribute to a destination attribute
     *
     * @tparam T_DestAttribute type of the destination attribute e.g. `momentumPrev1`
     * @tparam T_SrcAttribute type of the source attribute e.g. `momentum`
     */
    template<
        typename T_DestAttribute,
        typename T_SrcAttribute
    >
    struct CopyAttribute
    {
        /** copy attribute
         *
         * @tparam T_Particle pmacc::Particle, particle type
         * @tparam T_Args pmacc::Particle, arbitrary number of particles types
         *
         * @param particle particle to be manipulated
         * @param ... unused particles
         */
        template<
            typename T_Particle,
            typename ... T_Args
        >
        HDINLINE void operator( )(
            T_Particle & particle,
            T_Args && ...
        )
        {
            particle[ T_DestAttribute{ } ] = particle[ T_SrcAttribute{ } ];
        }
    };

} // namespace acc

    /** copy a particle source attribute to a destination attribute
     *
     * This is an unary functor and operates on one particle.
     *
     * @tparam T_DestAttribute type of the destination attribute e.g. `momentumPrev1`
     * @tparam T_SrcAttribute type of the source attribute e.g. `momentum`
     */
    template<
        typename T_DestAttribute,
        typename T_SrcAttribute
    >
    using CopyAttribute = generic::Free<
        acc::CopyAttribute<
            T_DestAttribute,
            T_SrcAttribute
        >
    >;

} // namespace unary
} // namespace manipulators
} // namespace particles
} // namespace picongpu
