/* Copyright 2017-2019 Rene Widera, Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <boost/mpl/integral_c.hpp>
#include <boost/mpl/placeholders.hpp>


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace unary
{
    /** call simple free user defined manipulators and provide the cell information
     *
     * The functor passes the cell offset of the particle relative to the total
     * domain origin into the functor.
     *
     * @tparam T_Functor user defined unary functor
     *
     * example for `particle.param`: set a user-defined species attribute y0
     * (type: uint32_t) to the current total y-cell index
     *   @code{.cpp}
     *   struct FunctorSaveYcell
     *   {
     *       template< typename T_Particle >
     *       HDINLINE void operator()(
     *          DataSpace< simDim > const & particleOffsetToTotalOrigin,
     *          T_Particle & particle
     *       )
     *       {
     *           particle[ y0_ ] = particleOffsetToTotalOrigin.y();
     *       }
     *       static constexpr char const * name = "saveYcell";
     *   };
     *
     *   using SaveYcell = unary::FreeTotalCellOffset<
     *      FunctorSaveYcell
     *   >;
     *   @endcode
     */
    template< typename T_Functor >
    struct FreeTotalCellOffset;

} // namespace unary
} // namespace manipulators
} // namespace particles
} // namespace picongpu
