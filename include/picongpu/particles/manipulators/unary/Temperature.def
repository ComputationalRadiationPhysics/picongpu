/* Copyright 2014-2023 Rene Widera, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/manipulators/generic/FreeRng.def"
#include "picongpu/particles/manipulators/unary/FreeTotalCellOffsetRng.def"

#include <pmacc/math/operation.hpp>
#include <pmacc/random/distributions/Normal.hpp>

#include <cstdint>


namespace picongpu
{
    namespace particles
    {
        namespace manipulators
        {
            namespace unary
            {
                namespace acc
                {
                    /** Functors implementing modifying particle momentum based on temperature
                     *
                     * Sample a random momentum value distributed according to the given
                     * temperature and add it to the existing particle momentum.
                     * These functors are for the non-relativistic case only.
                     * In this case the added momentum follows the Maxwell-Boltzmann distribution.
                     *
                     * @tparam T_ValueFunctor pmacc::math::operation::*, binary functor type to
                     *                        add a new momentum to an old one
                     * @{
                     */

                    /** Version with fixed temperature given via parameter struct
                     *
                     * @tparam T_ParamClass configuration parameter, follows requirements of param::TemperatureCfg
                     */
                    template<typename T_ParamClass, typename T_ValueFunctor>
                    struct Temperature;

                    /** Version with user-provided temperature functor
                     *
                     * @tparam T_TemperatureFunctor temperature functor, follows requirements of
                     * param::TemperatureFunctor
                     */
                    template<typename T_Functor, typename T_ValueFunctor>
                    struct FreeTemperature;

                    /** @} */
                } // namespace acc

                namespace param
                {
                    //! Configuration struct for the unary manipulator Temperature
                    struct TemperatureCfg
                    {
                        /** Initial temperature
                         *  unit: keV
                         */
                        static constexpr float_64 temperature = 0.0;
                    };

                    //! Configuration functor for the unary manipulator FreeTemperature
                    struct TemperatureFunctor
                    {
                        /** Constructors
                         *
                         * At least one of them must be provided (or auto-generated by a compiler).
                         * The version with current step will be called when available.
                         *
                         * @{
                         */

                        //! Default constructor
                        HINLINE TemperatureFunctor()
                        {
                        }

                        /** Constructor with current step
                         *
                         * @param currentStep current time iteration
                         */
                        HINLINE TemperatureFunctor(uint32_t currentStep)
                        {
                        }

                        /** @} */

                        /** Return the temperature in keV for the given position
                         *
                         * Return type may be float_X or float_64.
                         *
                         * @param position_SI total offset including all slides [meter]
                         * @param cellSize_SI cell sizes [meter]
                         */
                        HDINLINE float_X operator()(floatD_64 const& position_SI, float3_64 const& cellSize_SI)
                        {
                            return 0.0_X;
                        }
                    };
                } // namespace param

                /** Modify particle momentum based on temperature
                 *
                 * Sample a random momentum value distributed according to the given temperature and add it to the
                 * existing particle momentum.
                 *
                 * Note: initial electron temperature should generally be chosen so that the resulting Debye length is
                 *       resolved by the grid.
                 *
                 * @tparam T_ValueFunctor pmacc::math::operation::*, binary functor type to
                 *                        add a new momentum to an old one
                 *
                 * @{
                 */

                /** Version with fixed temperature given via parameter struct
                 *
                 * @tparam T_ParamClass configuration parameter, follows requirements of param::TemperatureCfg
                 */
                template<
                    typename T_ParamClass = param::TemperatureCfg,
                    typename T_ValueFunctor = pmacc::math::operation::Add>
                using Temperature = generic::FreeRng<
                    acc::Temperature<T_ParamClass, T_ValueFunctor>,
                    pmacc::random::distributions::Normal<float_X>>;

                /** Version with user-provided temperature functor
                 *
                 * @tparam T_TemperatureFunctor temperature functor, follows requirements of param::TemperatureFunctor
                 */
                template<
                    typename T_TemperatureFunctor = param::TemperatureFunctor,
                    typename T_ValueFunctor = pmacc::math::operation::Add>
                using FreeTemperature = FreeTotalCellOffsetRng<
                    acc::FreeTemperature<T_TemperatureFunctor, T_ValueFunctor>,
                    pmacc::random::distributions::Normal<float_X>>;

                /** @} */

            } // namespace unary
        } // namespace manipulators
    } // namespace particles
} // namespace picongpu
