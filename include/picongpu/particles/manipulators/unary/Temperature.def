/* Copyright 2014-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/random/distributions/Normal.hpp>
#include <pmacc/nvidia/functors/Add.hpp>

#include <boost/mpl/integral_c.hpp>


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace unary
{
namespace acc
{
    template<
        typename T_ParamClass,
        typename T_ValueFunctor
    >
    struct Temperature;
} // namespace acc

namespace param
{
    //! configuration for the unary manipulator functor Temperature
    struct TemperatureCfg
    {
        /** Initial temperature
         *  unit: keV
         */
        static constexpr float_64 temperature = 0.0;
    };
} // namespace param

    /** change particle's momentum based on a temperature
     *
     * allow to change the temperature (randomly normal distributed)
     * of a particle.
     *
     * @tparam T_ParamClass param::TemperatureCfg, configuration parameter
     * @tparam T_ValueFunctor pmacc::nvidia::functors::*,  binary functor type to manipulate the momentum attribute
     */
    template<
        typename T_ParamClass = param::TemperatureCfg,
        typename T_ValueFunctor = pmacc::nvidia::functors::Add
    >
    using Temperature = generic::FreeRng<
        acc::Temperature<
            T_ParamClass,
            T_ValueFunctor
        >,
        pmacc::random::distributions::Normal< float_X >
    >;

} // namespace unary
} // namespace manipulators
} // namespace particles
} // namespace picongpu
