/* Copyright 2017-2023 Rene Widera, Axel Huebl, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"

namespace picongpu
{
    namespace particles
    {
        namespace manipulators
        {
            namespace unary
            {
                /** Call simple free user defined functor and provide the cell information and rng functor
                 *
                 * This functor is effectively a combination of two wrappers around T_Functor:
                 * FreeTotalCellOffset and FreeRng.
                 * Currently there is no easy way to achieve such a combination via sequantial application.
                 * So here is a special wrapper for it.
                 *
                 * @tparam T_Functor user-defined unary functor
                 * @tparam T_Distribution pmacc::random::distributions, random number distribution
                 *
                 * example (no physical meaning, just for interface):
                 *   @code{.cpp}
                 *   struct FunctorCellRng
                 *   {
                 *       template< typename T_Rng, typename T_Particle >
                 *       HDINLINE void operator()(
                 *          DataSpace< simDim > const & particleOffsetToTotalOrigin,
                 *          T_Rng& rng,
                 *          T_Particle & particle
                 *       )
                 *       {
                 *           if (particleOffsetToTotalOrigin.y() < 10)
                 *               particle[position_].y() = rng();
                 *       }
                 *       static constexpr char const * name = "functorCellRng";
                 *   };
                 *
                 *   using CellRng = unary::FreeTotalCellOffsetRng<
                 *      FunctorCellRng,
                 *      pmacc::random::distributions::Uniform< float_X >
                 *   >;
                 *   @endcode
                 */
                template<typename T_Functor, typename T_Distribution>
                struct FreeTotalCellOffsetRng;

            } // namespace unary
        } // namespace manipulators
    } // namespace particles
} // namespace picongpu
