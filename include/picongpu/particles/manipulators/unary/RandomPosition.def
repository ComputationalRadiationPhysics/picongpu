/* Copyright 2017-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/random/distributions/Uniform.hpp>

#include <boost/mpl/integral_c.hpp>


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace unary
{
namespace acc
{

    /** set the particle attribute position
     *
     * The particle attribute position is overwritten with a random
     * in-cell position.
     */
    struct RandomPosition
    {
        /** set in-cell position
         *
         * @tparam T_Rng pmacc::nvidia::rng::RNG, type of the random number generator
         * @tparam T_Particle pmacc::Particle, particle type
         * @tparam T_Args pmacc::Particle, arbitrary number of particles types
         *
         * @param rng random number generator
         * @param particle particle to be manipulated
         * @param ... unused particles
         */
        template<
            typename T_Rng,
            typename T_Particle,
            typename ... T_Args
        >
        HDINLINE void operator()(
            T_Rng & rng,
            T_Particle & particle,
            T_Args && ...
        )
        {
            floatD_X tmpPos;

            for( uint32_t d = 0; d < simDim; ++d )
                tmpPos[ d ] = rng( );

            particle[ position_ ] = tmpPos;
        }
    };

} // namespace acc


    /** Change the in cell position
     *
     * This functor changes the in-cell position of a particle.
     * The new in-cell position is uniformly distributed position between [0.0;1.0).
     *
     * example: add
     *   ```
     *     particles::Manipulate<RandomPosition,SPECIES_NAME>
     *   ```
     *   to `InitPipeline` in `speciesInitialization.param`
     */
    using RandomPosition = generic::FreeRng<
        acc::RandomPosition,
        pmacc::random::distributions::Uniform< float_X >
    >;
} // namespace unary
} // namespace manipulators
} // namespace particles
} // namespace picongpu
