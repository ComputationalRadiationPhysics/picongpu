/* Copyright 2017-2022 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

// pmacc
#include <pmacc/dataManagement/ISimulationData.hpp>
#include <pmacc/dimensions/GridLayout.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/memory/Array.hpp>
#include <pmacc/memory/buffers/GridBuffer.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>


namespace picongpu
{
    namespace particles
    {
        namespace flylite
        {
            namespace helperFields
            {
                /** Generate and add a local energy histogram
                 *
                 * Generate a (per-supercell) energy histogram and add it to global memory.
                 */

                struct KernelAddLocalEnergyHistogram
                {
                    /** Functor
                     *
                     * The functor is executed frame-list-wise, meaning locally per
                     * supercell. All particles of a supercell generate a shared memory
                     * histogram and write that back into global memory. Particles outside
                     * of the range of the histogram are ignored and not counted.
                     *
                     * @todo In case the local averging in flylite shall be larger then a
                     * supercell (in multiples of integers), the results need to be merged.
                     *
                     * @tparam T_ParBox pmacc::ParticlesBox, particle box type
                     * @tparam T_LocalEnergyHistogramBox pmacc::DataBox, local energy histograms,
                     *                                   e.g. for each supercell
                     * @tparam T_Worker lockstep worker type
                     *
                     * @param worker lockstep worker
                     * @param pb particles of a species
                     * @param energyHistogramBox box with global memory for each supercell's histogram
                     * @param minEnergy minimum energy to account for (eV)
                     * @param maxEnergy maximum energy to account for (eV)
                     */
                    template<
                        typename T_ParBox,
                        typename T_LocalEnergyHistogramBox,
                        typename T_Mapping,
                        typename T_Worker>
                    DINLINE void operator()(
                        T_Worker const& worker,
                        T_ParBox pb,
                        T_LocalEnergyHistogramBox energyHistogramBox,
                        float_X const minEnergy,
                        float_X const maxEnergy,
                        T_Mapping const mapper) const
                    {
                        using picongpu::flylite::spatialAverageBox;
                        constexpr uint16_t numBins = picongpu::flylite::energies;

                        using SuperCellSize = typename MappingDesc::SuperCellSize;

                        // supercell index of current (frame-wise) supercell including GUARD
                        DataSpace<simDim> const superCellIdx(
                            mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

                        /* index inside local energy histogram in averaged space (has no GUARD)
                         * integer division: we average over multiples of supercells;
                         *                   this index selects the according local energy
                         *                   histogram in global RAM
                         */
                        DataSpace<simDim> const localEnergyBlock
                            = (superCellIdx - GuardSize::toRT()) * SuperCellSize::toRT() / spatialAverageBox::toRT();

                        /* shift the energyHistogramBox to the local spatial average box and
                         * get a reference on the histogram
                         */
                        auto& localEnergyHistogram = *energyHistogramBox.shift(localEnergyBlock);

                        // shared memory for local energy histogram
                        PMACC_SMEM(worker, shLocalEnergyHistogram, memory::Array<float_X, numBins>);


                        constexpr uint32_t numWorkers = T_Worker::getNumWorkers();
                        // empty the histogram to contain only zeroes
                        lockstep::makeForEach<numWorkers>(worker)(
                            [&](uint32_t const linearIdx)
                            {
                                /* set all bins to 0 */
                                for(int i = linearIdx; i < numBins; i += numWorkers)
                                    shLocalEnergyHistogram[i] = float_X(0.);
                            });

                        worker.sync();

                        auto forEachParticle = pmacc::particles::algorithm::acc::makeForEach(worker, pb, superCellIdx);

                        // end kernel if we have no particles
                        if(!forEachParticle.hasParticles())
                            return;

                        forEachParticle(
                            [minEnergy, maxEnergy, numBins, &shLocalEnergyHistogram](
                                auto const& lockstepWorker,
                                auto& particle)
                            {
                                /* kinetic Energy for Particles: E^2 = p^2*c^2 + m^2*c^4
                                 *                                   = c^2 * [p^2 + m^2*c^2]
                                 */
                                float3_X const mom = particle[momentum_];
                                float_X const weighting = particle[weighting_];
                                float_X const mass = attribute::getMass(weighting, particle);

                                // calculate kinetic energy of the macro particle
                                float_X particleEnergy = KinEnergy<>()(mom, mass);

                                particleEnergy /= weighting;

                                // calculate bin number
                                int binNumber = math::floor(
                                    (particleEnergy - minEnergy) / (maxEnergy - minEnergy)
                                    * static_cast<float_X>(numBins));

                                /* all entries larger than maxEnergy or smaller
                                 * than minEnergy are ignored
                                 */
                                if(binNumber >= 0 and binNumber < numBins)
                                {
                                    // artifical norm for reduce
                                    float_X const normedWeighting
                                        = weighting / float_X(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE);

                                    cupla::atomicAdd(
                                        lockstepWorker.getAcc(),
                                        &(shLocalEnergyHistogram[binNumber]),
                                        normedWeighting,
                                        ::alpaka::hierarchy::Threads{});
                                }
                            });

                        worker.sync();

                        // write histogram back to global memory (add)
                        lockstep::makeForEach<T_Worker::getNumWorkers()>(worker)(
                            [&](uint32_t const linearIdx)
                            {
                                for(int i = linearIdx; i < numBins; i += numWorkers)
                                    cupla::atomicAdd(
                                        worker.getAcc(),
                                        &(localEnergyHistogram[i]),
                                        shLocalEnergyHistogram[i],
                                        ::alpaka::hierarchy::Blocks{});
                            });
                    }
                };

            } // namespace helperFields
        } // namespace flylite
    } // namespace particles
} // namespace picongpu
