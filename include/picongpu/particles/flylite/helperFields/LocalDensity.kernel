/* Copyright 2017-2022 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

// pmacc
#include <pmacc/dataManagement/ISimulationData.hpp>
#include <pmacc/device/Reduce.hpp>
#include <pmacc/dimensions/GridLayout.hpp>
#include <pmacc/lockstep/lockstep.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/Array.hpp>
#include <pmacc/memory/buffers/GridBuffer.hpp>
#include <pmacc/memory/shared/Allocate.hpp>


namespace picongpu
{
    namespace particles
    {
        namespace flylite
        {
            namespace helperFields
            {
                /** Average a FieldTmp density to a smaller resolution
                 *
                 * Average a FieldTmp density to a smaller (per-supercell) resolution and
                 * add it to a local density field.
                 */
                struct KernelAverageDensity
                {
                    /** Functor
                     *
                     * @tparam T_TmpBox pmacc::DataBox with full-resolution density
                     * @tparam T_LocalDensityBox pmacc::DataBox local density with less
                     *                           resolution
                     * @tparam T_Worker lockstep worker type
                     *
                     * @param worker lockstep worker
                     * @param fieldTmp pmacc::DataBox with FieldTmp density scalar field
                     * @param localDensity pmacc::DataBox with global memory, e.g. for each
                     *                     supercell's density
                     */
                    template<typename T_TmpBox, typename T_LocalDensityBox, typename T_Worker>
                    DINLINE void operator()(T_Worker const& worker, T_TmpBox fieldTmp, T_LocalDensityBox localDensity)
                        const
                    {
                        using picongpu::flylite::spatialAverageBox;
                        using ValueType = typename T_TmpBox::ValueType;
                        constexpr uint32_t numWorkers = T_Worker::getNumWorkers();

                        // cell index in the average box in reduced resolution
                        DataSpace<simDim> const avgBoxCell(cupla::blockIdx(worker.getAcc()));
                        // first cell index inside FieldTmp (originating from BORDER) for block
                        DataSpace<simDim> const fieldTmpBlockOriginCell = avgBoxCell * spatialAverageBox::toRT();

                        // shift the fieldTmp to the start of average box
                        auto fieldTmpBlock = fieldTmp.shift(fieldTmpBlockOriginCell);

                        // shared memory for reduce
                        PMACC_SMEM(worker, shReduceBuffer, memory::Array<ValueType, numWorkers>);

                        // re-map access indices to local average view
                        using D1Box = DataBoxDim1Access<T_TmpBox>;
                        D1Box d1access(fieldTmpBlock, spatialAverageBox::toRT());

                        worker.sync();

                        uint32_t const numAvgCells = pmacc::math::CT::volume<spatialAverageBox>::type::value;

                        pmacc::device::reduce::Kernel<ValueType, numAvgCells> reduce{};


                        reduce(
                            worker,
                            numAvgCells,
                            /* access inside local average view */
                            d1access,
                            numAvgCells,
                            pmacc::math::operation::Add(),
                            shReduceBuffer);

                        worker.sync();

                        /* continue with master
                         *
                         * - before working with this field, multiply by
                         *   particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE
                         * - divide by for average by numAvgCells
                         * - write back to global
                         *
                         * - change those lines if you want to re-use this kernel for a vector field
                         */
                        lockstep::makeMaster(worker)(
                            [&]()
                            {
                                ValueType localAverageResult = shReduceBuffer[0]
                                    * static_cast<float_X>(particles::TYPICAL_NUM_PARTICLES_PER_MACROPARTICLE)
                                    / float_X(numAvgCells);

                                localDensity(avgBoxCell)
                                    = static_cast<typename T_LocalDensityBox::ValueType>(localAverageResult);
                            });
                    }
                };

            } // namespace helperFields
        } // namespace flylite
    } // namespace particles
} // namespace picongpu
