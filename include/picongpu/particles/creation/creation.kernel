/* Copyright 2015-2023 Marco Garten, Axel Huebl, Heiko Burau, Rene Widera,
 *                     Richard Pausch, Felix Schmitt
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/Particles.hpp"
#include "picongpu/particles/ParticlesInit.kernel"
#include "picongpu/simulation/control/MovingWindow.hpp"

#include <pmacc/kernel/atomic.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/simulation/GridController.hpp>
#include <pmacc/math/vector/Int.hpp>
#include <pmacc/memory/Array.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/traits/Resolve.hpp>

#include <iostream>


namespace picongpu
{
    namespace particles
    {
        namespace creation
        {
            //! Functor with main kernel for particle creation
            struct CreateParticlesKernel
            {
                /** Goes over all frames and calls `ParticleCreator`
                 *
                 * @tparam T_Worker lockstep worker type
                 * @tparam T_ParticleCreator type of the particle creation functor
                 * @tparam T_ParBoxSource container of the source species
                 * @tparam T_ParBoxTarget container of the target species
                 * @tparam T_Mapping mapper functor type
                 *
                 * @param worker lockstep worker
                 * @param particleCreator particle creation functor
                 * @param parBoxSource particle box of the source species
                 * @param parBoxTarget particle box of the target species
                 * @param mapper functor to map a block to a supercell
                 */
                template<
                    typename T_Worker,
                    typename T_ParticleCreator,
                    typename T_ParBoxSource,
                    typename T_ParBoxTarget,
                    typename T_Mapping>
                DINLINE void operator()(
                    T_Worker const& worker,
                    T_ParticleCreator particleCreator,
                    T_ParBoxSource sourceBox,
                    T_ParBoxTarget targetBox,
                    IdGenerator idGen,
                    T_Mapping const& mapper) const
                {
                    const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(worker.blockDomIdxND()));

                    DataSpace<simDim> const supercellCellOffset = superCellIdx * SuperCellSize::toRT();

                    /* "particle box" : container/iterator where the particles live in
                     * and where one can get the frame in a super cell from
                     */
                    using SourceFramePtr = typename T_ParBoxSource::FramePtr;
                    using TargetFramePtr = typename T_ParBoxTarget::FramePtr;

                    /* for not mixing operations::assign up with the nvidia functor assign */
                    namespace partOp = pmacc::particles::operations;

                    constexpr lcellId_t maxParticlesInFrame = T_ParBoxSource::frameSize;

                    /* use two frames to allow that all virtual workers can create new particles
                     * even if newFrameFillLvl is not zero.
                     */
                    using FrameArray = memory::Array<TargetFramePtr, 2>;

                    PMACC_SMEM(worker, targetFrames, FrameArray);

                    // find last frame in super cell
                    SourceFramePtr sourceFrame(sourceBox.getLastFrame(superCellIdx));

                    // end method if we have no frames
                    if(!sourceFrame.isValid())
                        return;

                    auto forEachParticle = lockstep::makeForEach<maxParticlesInFrame>(worker);

                    // initialize the collective part of the functor (e.g. field caching)
                    particleCreator.collectiveInit(worker, supercellCellOffset);

                    auto particleCreatorCtx = lockstep::makeVar<T_ParticleCreator>(forEachParticle);

                    forEachParticle(
                        [&](uint32_t const idx, auto& destParticleCreator)
                        {
                            // create a copy of the functor for each virtual worker
                            destParticleCreator = particleCreator;

                            // init particle creator functor for each virtual worker
                            destParticleCreator.init(worker, superCellIdx - mapper.getGuardingSuperCells(), idx);
                        },
                        particleCreatorCtx);

                    /* Declare counter in shared memory that will later tell the current fill level or
                     * occupation of the newly created target frames.
                     */
                    PMACC_SMEM(worker, newFrameFillLvl, int);

                    // used to maintain the frame double buffer
                    auto frameMasters = lockstep::makeForEach<2>(worker);

                    // Declare local variable oldFrameFillLvl for each thread
                    int oldFrameFillLvl;

                    /* Initialize local (register) counter for each thread
                     * - describes how many new macro target particles should be created
                     */
                    auto numNewParticlesCtx = lockstep::makeVar<uint32_t>(forEachParticle, 0u);

                    // Master initializes the frame fill level with 0
                    frameMasters(
                        [&](uint32_t const linearIdx)
                        {
                            if(linearIdx == 0)
                                newFrameFillLvl = 0;
                            targetFrames[linearIdx] = nullptr;
                        });

                    worker.sync();

                    /* move over source species frames and call particleCreator
                     * frames are worked on in backwards order to avoid asking if there is another frame
                     * --> performance
                     * Because all frames are completely filled except the last and apart from that last frame
                     * one wants to make sure that all threads are working and every frame is worked on.
                     */
                    while(sourceFrame.isValid())
                    {
                        forEachParticle(
                            [&](uint32_t const idx, auto& particleCreator, uint32_t& numNewParticles)
                            {
                                auto const isParticle = static_cast<bool>(sourceFrame[idx][multiMask_]);
                                numNewParticles = 0u;
                                if(isParticle)
                                    /* ask the particle creator functor how many new particles to create. */
                                    numNewParticles = particleCreator.numNewParticles(worker, *sourceFrame, idx);
                            },
                            particleCreatorCtx,
                            numNewParticlesCtx);

                        worker.sync();

                        /* always true while-loop over all particles inside source frame until each thread breaks out
                         * individually
                         *
                         * **Attention**: Speaking of 1st and 2nd frame only may seem odd.
                         * The question might arise what happens if more target particles are created than would fit
                         * into two frames. Well, multi-particle creation during a time step is accounted for. The
                         * number of new target particles is determined inside the outer loop over the valid frames
                         * while in the inner loop each thread can create only ONE new macro target particle. But the
                         * loop repeats until each thread has created all the target particles needed in the time step.
                         */
                        while(true)
                        {
                            /* < INIT >
                             * - targetParId is initialized as -1 (meaning: invalid)
                             * - (local) oldFrameFillLvl set equal to (shared) newFrameFillLvl for each thread
                             * --> each thread remembers the old "counter"
                             */

                            /* Declare local target particle ID
                             * - describes at which position in the new frame the new target particle is to be created
                             */
                            auto targetParIdCtx = lockstep::makeVar<int>(forEachParticle, -1);

                            oldFrameFillLvl = newFrameFillLvl;

                            worker.sync();

                            /* < CHECK & ADD >
                             * - if a thread wants to create target particles in each cycle it can do that only once
                             * and before that it atomically adds to the shared counter and uses the current
                             * value as targetParId in the new frame
                             */
                            forEachParticle(
                                [&](uint32_t const idx, uint32_t const numNewParticles, int& targetParId)
                                {
                                    if(numNewParticles > 0u)
                                        targetParId = kernel::atomicAllInc(
                                            worker,
                                            &newFrameFillLvl,
                                            ::alpaka::hierarchy::Threads{});
                                },
                                numNewParticlesCtx,
                                targetParIdCtx);

                            worker.sync();

                            /* < EXIT? >
                             * - if the counter hasn't changed all threads break out of the loop
                             */
                            if(oldFrameFillLvl == newFrameFillLvl)
                                break;

                            worker.sync();

                            /* < NEW FRAME >
                             * - if there is no frame, yet, the master will create a new target particle frame
                             * and attach it to the back of the frame list
                             */
                            frameMasters(
                                [&](uint32_t const linearIdx)
                                {
                                    uint32_t const numFramesNeeded
                                        = (newFrameFillLvl + maxParticlesInFrame - 1u) / maxParticlesInFrame;
                                    if(linearIdx < numFramesNeeded && !targetFrames[linearIdx].isValid())
                                    {
                                        targetFrames[linearIdx] = targetBox.getEmptyFrame(worker);
                                        targetBox.setAsLastFrame(worker, targetFrames[linearIdx], superCellIdx);
                                    }
                                });

                            worker.sync();

                            /* < CREATE >
                             * - all target particles were created
                             * - internal particle creation counter is decremented by 1
                             */
                            forEachParticle(
                                [&](uint32_t const idx,
                                    int& targetParId,
                                    uint32_t& numNewParticles,
                                    auto& particleCreator)
                                {
                                    uint32_t targetFrameIdx = 0;
                                    if(targetParId >= maxParticlesInFrame)
                                    {
                                        targetFrameIdx = 1;
                                        targetParId -= maxParticlesInFrame;
                                    }
                                    if(0 <= targetParId)
                                    {
                                        // each virtual worker makes the attributes of its source particle accessible
                                        auto sourceParticle = sourceFrame[idx];
                                        // each virtual worker initializes a target particle if one should be created
                                        auto targetParticle = targetFrames[targetFrameIdx][targetParId];

                                        // create a target particle in the new target particle frame:
                                        particleCreator(worker, idGen, sourceParticle, targetParticle);

                                        numNewParticles -= 1;
                                    }
                                },
                                targetParIdCtx,
                                numNewParticlesCtx,
                                particleCreatorCtx);

                            worker.sync();

                            frameMasters(
                                [&](uint32_t const linearIdx)
                                {
                                    if(linearIdx == 0 && newFrameFillLvl >= maxParticlesInFrame)
                                    {
                                        newFrameFillLvl -= maxParticlesInFrame;
                                        // copy the not filled frame pointer to the beginning
                                        targetFrames[0] = targetFrames[1];
                                        // reset second frame
                                        targetFrames[1] = nullptr;
                                    }
                                });

                            worker.sync();
                        }

                        worker.sync();

                        sourceFrame = sourceBox.getPreviousFrame(sourceFrame);
                    }
                }
            };

        } // namespace creation
    } // namespace particles
} // namespace picongpu
