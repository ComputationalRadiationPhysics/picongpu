/* Copyright 2013-2021 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Richard Pausch, Alexander Debus, Marco Garten,
 *                     Benjamin Worpitz, Alexander Grund, Sergei Bastrakov,
 *                     Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"


/// @todo : get histogram type from param files
// histogram of electron distribution
#include "picongpu/particles/atomicPhysics/electronDistribution/histogram/AdaptiveHistogram.hpp"

// sub steps of atomic physics
#include "picongpu/particles/atomicPhysics/DecelerateElectrons.hpp"
#include "picongpu/particles/atomicPhysics/FillHistogram.hpp"
#include "picongpu/particles/atomicPhysics/SolveRateEquation.hpp"

// atomic rate calculation functor
#include "picongpu/particles/atomicPhysics/AtomicRate.hpp"
// conversion to/from atomic state index
#include "picongpu/particles/atomicPhysics/stateRepresentation/ConfigNumber.hpp"

#include <cstdint>


/**@file
 * This file implements the device atomic physics kernel
 *
 * This kernel is called once for every super cell, for every PIC time step.
 *
 * @tparam T_maxNumBins ... maximum number of Bins of the histogram
 */

namespace picongpu
{
    namespace particles
    {
        namespace atomicPhysics
        {
            template<uint16_t T_maxNumBins>
            struct AtomicPhysicsKernel
            {
                // note: maybe rename variables later
                RngFactoryInt rngFactoryInt;
                RngFactoryFloat rngFactoryFloat;

                AtomicPhysicsKernel(
                    RngFactoryInt rngFactoryInt = RngFactoryInt{0},
                    RngFactoryFloat rngFactoryFloat = RngFactoryFloat{0})
                    : rngFactoryInt(rngFactoryInt)
                    , rngFactoryFloat(rngFactoryFloat)
                {
                }

                // template parameters are automatically deduced from input
                template<
                    typename T_Worker,
                    typename T_ElectronBox,
                    typename T_IonBox,
                    typename T_Mapping,
                    typename T_AtomicDataBox>
                HDINLINE void operator()(
                    T_Worker const& worker,
                    T_ElectronBox electronBox,
                    T_IonBox ionBox,
                    T_Mapping mapper,
                    T_AtomicDataBox const atomicDataBox,
                    float_X const initialGridWidth, // unit: ATOMIC_UNIT_ENERGY
                    float_X const relativeErrorTarget, // unit: 1/s /( 1/( m^3 * ATOMIC_UNIT_ENERGY ) )
                    uint32_t const step) const
                {
                    // Create and initialize a histogram on shared memory
                    constexpr uint32_t frameSize = pmacc::math::CT::volume<SuperCellSize>::type::value;

                    // TODO: get this from ion species
                    // hard coded for now
                    using ConfigNumberDataType = picongpu::atomicPhysics::configNumberDataType;
                    // number of levels modelled
                    constexpr uint8_t numLevels = picongpu::atomicPhysics::numLevels;

                    // conversion to/from atomic state index
                    using ConfigNumber = picongpu::particles::atomicPhysics::stateRepresentation::
                        ConfigNumber<ConfigNumberDataType, numLevels, atomicDataBox.getAtomicNumber()>;

                    // atomic rate calculation methods
                    using AtomicRate = picongpu::particles::atomicPhysics::
                        AtomicRate<T_AtomicDataBox, ConfigNumberDataType, ConfigNumber, numLevels>;

                    using Histogram = electronDistribution::histogram2::
                        AdaptiveHistogram<T_maxNumBins, frameSize, T_AtomicDataBox>;

                    // get new histogram
                    // Histogram histogram;
                    PMACC_SMEM(
                        worker, // mandatory first parameter
                        histogram, // variable name
                        Histogram // variable type
                    );

                    // init histogram and relative error
                    lockstep::makeMaster(worker)(
                        [&]()
                        {
                            // pass through parameters of histogram
                            histogram.init(relativeErrorTarget, initialGridWidth);
                        });
                    worker.sync();
                    // necessary since all access relativeError and histogram, but both are only valid after init

                    fillHistogram(worker, electronBox, mapper, &histogram, atomicDataBox);
                    worker.sync();

                    solveRateEquation<AtomicRate>(
                        worker,
                        mapper,
                        rngFactoryInt,
                        rngFactoryFloat,
                        ionBox,
                        atomicDataBox,
                        &histogram);

                    worker.sync();

                    decelerateElectrons(worker, mapper, electronBox, histogram, atomicDataBox);

                    worker.sync();
                }
            };

        } // namespace atomicPhysics
    } // namespace particles
} // namespace picongpu
