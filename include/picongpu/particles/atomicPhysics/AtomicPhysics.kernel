/* Copyright 2013-2020 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Richard Pausch, Alexander Debus, Marco Garten,
 *                     Benjamin Worpitz, Alexander Grund, Sergei Bastrakov,
 *                     Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/Histogram.hpp"
#include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/AdaptiveHistogram.hpp"

#include "picongpu/particles/atomicPhysics/DecelerateElectrons.hpp"
#include "picongpu/particles/atomicPhysics/FillHistogram.hpp"
#include "picongpu/particles/atomicPhysics/SolveRateEquation.hpp"


#include <cstdint>

namespace picongpu
{
namespace particles
{
namespace atomicPhysics
{


    template<
        uint32_t T_numWorkers,
        uint32_t T_maxNumBins
    >
    struct AtomicPhysicsKernel
    {

        // note: maybe rename variables later
        RngFactoryInt rngFactoryInt;
        RngFactoryFloat rngFactoryFloat;

        AtomicPhysicsKernel(
            RngFactoryInt rngFactoryInt = RngFactoryInt{ 0 },
            RngFactoryFloat rngFactoryFloat = RngFactoryFloat{ 0 }
        ):
            rngFactoryInt( rngFactoryInt ),
            rngFactoryFloat( rngFactoryFloat )
        {
        }

        template<
            typename T_Acc,
            typename T_ElectronBox,
            typename T_IonBox,
            typename T_Mapping,
            typename T_RateMatrixBox
        >
        HDINLINE void operator()(
            T_Acc const & acc,
            T_ElectronBox electronBox,
            T_IonBox ionBox,
            T_Mapping mapper,
            T_RateMatrixBox const rateMatrixBox,
            float_X initialGridWidth,
            float_X relativeErrorTarget
        ) const
        {
            // we assume 1d thread indices
            // thread index inside a block
            uint32_t const workerIdx = cupla::threadIdx( acc ).x;

            // Create and initialize a histogram on shared memory
            constexpr uint32_t frameSize = pmacc::math::CT::volume< SuperCellSize >::type::value;
            using Histogram = electronDistribution::histogram2::AdaptiveHistogram<
                T_maxNumBins,
                frameSize
            >;
            PMACC_SMEM(
                acc, // mandatory first parameter
                histogram, // variable name
                Histogram // variable type
            );
            if( workerIdx == 0 )
                histogram.init( relativeErrorTarget, initialGridWidth );
            cupla::__syncthreads( acc );

            fillHistogram< T_numWorkers >(
                acc,
                electronBox,
                mapper,
                &histogram
            );
            cupla::__syncthreads( acc );

            solveRateEquation< T_numWorkers >(
                acc,
                mapper,
                rngFactoryInt,
                rngFactoryFloat,
                ionBox,
                rateMatrixBox,
                &histogram
            );
            cupla::__syncthreads( acc );

            decelerateElectrons< T_numWorkers >(
                acc,
                mapper,
                electronBox,
                histogram
            );

        }
    };

} // namespace atomicPhysics
} // namespace particles
} // namespace picongpu
