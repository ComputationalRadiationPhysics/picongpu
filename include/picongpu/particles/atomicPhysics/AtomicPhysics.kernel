/* Copyright 2013-2020 Axel Huebl, Felix Schmitt, Heiko Burau, Rene Widera,
 *                     Richard Pausch, Alexander Debus, Marco Garten,
 *                     Benjamin Worpitz, Alexander Grund, Sergei Bastrakov,
 *                     Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"


// TODO: get histogram type from param files
// include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/Histogram.hpp"
// histogram of electron distribution
#include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/AdaptiveHistogram.hpp"

// sub steps of atomic physics
#include "picongpu/particles/atomicPhysics/DecelerateElectrons.hpp"
#include "picongpu/particles/atomicPhysics/FillHistogram.hpp"
#include "picongpu/particles/atomicPhysics/SolveRateEquation.hpp"

// relativeError calculation
#include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/RateRelativeError.hpp"
// numerical differentiation
#include "picongpu/particles/atomicPhysics/electronDistribution/histogram2/FornbergNumericalDifferentiation.hpp"
// atomic rate calculation functor
#include "picongpu/particles/atomicPhysics/AtomicRate.hpp"


#include <cstdint>

namespace picongpu
{
namespace particles
{
namespace atomicPhysics
{

    template<
        uint32_t T_numWorkers,
        uint16_t T_maxNumBins,
    >
    struct AtomicPhysicsKernel
    {

        // note: maybe rename variables later
        RngFactoryInt rngFactoryInt;
        RngFactoryFloat rngFactoryFloat;

        AtomicPhysicsKernel(
            RngFactoryInt rngFactoryInt = RngFactoryInt{ 0 },
            RngFactoryFloat rngFactoryFloat = RngFactoryFloat{ 0 }
        ):
            rngFactoryInt( rngFactoryInt ),
            rngFactoryFloat( rngFactoryFloat )
        {
        }

        // template parameters are automatically deduced from input
        template<
            typename T_Acc,
            typename T_ElectronBox,
            typename T_IonBox,
            typename T_Mapping,
            typename T_AtomicDataBox
        >
        HDINLINE void operator()(
            T_Acc const & acc,
            T_ElectronBox electronBox,
            T_IonBox ionBox,
            T_Mapping mapper,
            T_AtomicDataBox const atomicDataBox,
            float_X const initialGridWidth, // unit: ATOMIC_ENERGY_UNIT
            float_X const relativeErrorTarget // unit: 1/s /( 1/( m^3 * ATOMIC_ENERGY_UNIT ) )
        ) const
        {
            // we assume 1d thread indices
            // thread index inside a block
            uint32_t const workerIdx = cupla::threadIdx( acc ).x;

            // Create and initialize a histogram on shared memory
            constexpr uint32_t frameSize = pmacc::math::CT::volume< SuperCellSize >::type::value;

            // get species particle mass
            using IonFrameType = typename ionBox::FrameType;
            const float_X mass = frame::getMass<FrameType>();

            // TODO: get this from ion species
            // hard coded for now
            constexpr using T_ConfigNumberDataType = uint64_t;
            constexpr uint8_t T_numLevels = 10u;

            // hard coded for now
            // TODO: get from param file
            constexpr using RelativeError = electronDistribution::histogram2::RateRelativeError<
                1u,     // T_minOrderApprox
                1u,     // T_maxOrderApprox
                3u,     // T_numSamplePoints
                electronDistribution::histogram2::FornbergNumericalDifferentiation<
                    float_X,    // T_Value
                    float_X     // T_Argument
                >, // T_WeightingGen
                picongpu::particles::atomicPhysics::AtomicRate<
                    T_AtomicDataBox,
                    T_ConfigNumberDataType,
                    T_numLevels
                    >
                T_AtomicDataBox,
                T_ConfigNumberDataType
            >;

            using Histogram = electronDistribution::histogram2::AdaptiveHistogram<
                T_maxNumBins,
                frameSize,
                RelativeError
            >;

            constexpr using AtomicRate = picongpu::particles::atomicPhysics::AtomicRate<
                T_AtomicDataBox,
                T_ConfigNumberDataTypember,
                T_numLevels
                >

            // get new histogram
            PMACC_SMEM(
                acc, // mandatory first parameter
                histogram, // variable name
                Histogram // variable type
            );

            PMACC_SMEM(
                acc, // mandatory first parameter
                relativeError, // variable name
                RelativeError // variable type
            );

            // init histogram
            if( workerIdx == 0 )
            {
                // pass through parameters of histogram
                histogram.init(
                    relativeErrorTarget,
                    initialGridWidth,
                    atomicDataBox,
                    relativeError
                    );
                // calculate weightings once
                relativeError.init( );
            }
            cupla::__syncthreads( acc );
            // necessary since all access relativeError and histogram, but both are only valid after init

            fillHistogram< T_numWorkers >(
                acc,
                electronBox,
                mapper,
                &histogram
            );
            cupla::__syncthreads( acc );

            solveRateEquation< T_numWorkers, T_AtomicRate >(
                acc,
                mapper,
                rngFactoryInt,
                rngFactoryFloat,
                ionBox,
                atomicDataBox,
                &histogram
            );
            cupla::__syncthreads( acc );

            decelerateElectrons< T_numWorkers >(
                acc,
                mapper,
                electronBox,
                histogram
            );

        }
    };

} // namespace atomicPhysics
} // namespace particles
} // namespace picongpu
