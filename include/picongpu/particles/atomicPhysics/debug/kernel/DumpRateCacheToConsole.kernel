/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** debug kernel
     *
     * dump all rateCache to console
     *
     * @attention only useful in serial and cpu-build!
     */
    struct DumpRateCacheToConsoleKernel
    {
        /** call operator
         *
         * called by DumpAllIonsToConsole atomicPhysics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param localRateCacheBox deviceDataBox giving access to the local rate cache of
         *  all local superCells
         */
        template<typename T_Worker, typename T_AreaMapping, typename T_LocalRateCacheBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalRateCacheBox const localRateCacheBox) const
        {
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(worker.blockDomIdxND()) - areaMapping.getGuardingSuperCells();

            auto& rateCache = localRateCacheBox(superCellFieldIdx);

            rateCache.printToConsole(worker.getAcc(), superCellFieldIdx);
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
