/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software you can redistribute it and or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
// need: picongpu/param/atomicPhysics_Debug.param,
//       picongpu/param/atomicPhysics.param

#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/enums/IsProcess.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/initElectrons/InitIonizationElectrons.hpp"
#include "picongpu/particles/atomicPhysics/ionizationPotentialDepression/PassIPDInputs.hpp"

#include <pmacc/lockstep/ForEach.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace detail
    {
        enum struct Access : uint32_t
        {
            low = 0u,
            high = 1u
        };
    } // namespace detail

    /** spawn ionization macro electrons for every ionization transitions
     *
     * @tparam T_ProcessClassGroup group of processClass values to spawn electrons for,
     *  see "picongpu/particles/atomicPhysics/enums/IsProcess.hpp
     *
     * @attention T_ProcessClassGroup must be either boundFreeBased, or autonomousBased!
     */
    template<typename T_IPDModel, picongpu::particles::atomicPhysics::enums::ProcessClassGroup T_ProcessClassGroup>
    struct SpawnIonizationMacroElectronsKernel
    {
        template<typename T_TransitionDataBox, typename T_IonBox, typename T_IonizationElectronBox>
        static constexpr bool checkPassedDataBoxes()
        {
            PMACC_CASSERT_MSG(
                processClassGroup_and_transition_dataBox_not_consistent,
                u8(T_ProcessClassGroup) == u8(T_TransitionDataBox::processClassGroup));
            PMACC_CASSERT_MSG(
                ion_and_electron_framesize_must_be_equal,
                T_IonBox::frameSize == T_IonizationElectronBox::frameSize);

            return true;
        }

        /** call operator
         *
         * called by SpawnIonizationMacroElectrons atomic physics sub-stage
         *
         * @param worker object containing the device and block information,
         *  passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to the particle frames of T_IonSpecies
         *  of all local superCells
         * @param ionizationElectronBox deviceDataBox giving access to the particle frames
         *  of T_IonSpecies ionization electrons of all local superCells
         * @param atomicStateBox deviceDataBox giving access to atomic state property data
         * @param transitionBox deviceDataBox giving access to transition property data,
         * @param rngFactoryAndChargeStateBoxAndIPDInput optional, factory for uniformly distributed float random
         * number generator and deviceDataBox giving access to charge state property data and deviceDataBoxes giving
         * access to the ionization potential depression input for all local superCells, required for
         * T_ProcessClassGroup = autonomousBased
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_IonBox,
            typename T_IonizationElectronBox,
            typename T_AtomicStateDataBox,
            typename T_TransitionDataBox,
            typename... T_RNGFactoryAndChargeStateDataBoxAndIPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            IdGenerator idGen,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_IonBox ionBox,
            T_IonizationElectronBox ionizationElectronBox,
            T_AtomicStateDataBox atomicStateBox,
            T_TransitionDataBox transitionBox,
            T_RNGFactoryAndChargeStateDataBoxAndIPDInput... rngFactoryAndChargeStateBoxAndIPDInput) const
        {
            namespace s_enums = picongpu::particles::atomicPhysics::enums;

            using ElectronFramePtr = typename T_IonizationElectronBox::FramePtr;
            using IonFramePtr = typename T_IonBox::FramePtr;

            PMACC_CASSERT(checkPassedDataBoxes<T_TransitionDataBox, T_IonBox, T_IonizationElectronBox>());

            constexpr uint32_t frameSize = T_IonBox::frameSize;

            pmacc::DataSpace<picongpu::simDim> const superCellIdx
                = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto forEachFrameSlot = pmacc::lockstep::makeForEach<frameSize, T_Worker>(worker);
            auto forEachFrameMaster = pmacc::lockstep::makeForEach<2u, T_Worker>(worker);
            auto onlyMaster = pmacc::lockstep::makeMaster(worker);

            IonFramePtr ionFrame = ionBox.getLastFrame(superCellIdx);
            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);

            // end kernel if superCell already finished or no ions in superCell --> no bound electrons to ionize
            if((timeRemaining <= 0._X) || (!ionFrame.isValid()))
                return;

            using FrameArray = memory::Array<ElectronFramePtr, u32(2u)>;
            PMACC_SMEM(worker, electronFrameArray, FrameArray);

            PMACC_SMEM(worker, offsetLowFrame, int32_t);
            PMACC_SMEM(worker, totalNumberMacroElectronsToSpawn, uint32_t);
            PMACC_SMEM(worker, spawnCounter, uint32_t);

            auto numberIonizationElectronsCtxArr = lockstep::makeVar<uint8_t>(forEachFrameSlot, u8(0u));

            [[maybe_unused]] float_X ionizationPotentialDepression = 0._X;
            if constexpr(T_ProcessClassGroup == s_enums::ProcessClassGroup::autonomousBased)
                ionizationPotentialDepression
                    = ionizationPotentialDepression::PassIPDInputs::template calculateIPD_RngFactory<T_IPDModel>(
                        superCellFieldIdx,
                        rngFactoryAndChargeStateBoxAndIPDInput...);

            // init shared memory
            onlyMaster(
                [&superCellIdx,
                 &ionizationElectronBox,
                 &offsetLowFrame,
                 &spawnCounter,
                 &totalNumberMacroElectronsToSpawn,
                 &electronFrameArray]()
                {
                    offsetLowFrame
                        = static_cast<int32_t>(ionizationElectronBox.getSuperCell(superCellIdx).getSizeLastFrame());

                    totalNumberMacroElectronsToSpawn = u32(0u);
                    spawnCounter = u32(0u);

                    // might be nullptr if no electrons in superCell
                    electronFrameArray[u32(detail::Access::low)] = ionizationElectronBox.getLastFrame(superCellIdx);
                    electronFrameArray[u32(detail::Access::high)] = nullptr;
                });
            worker.sync();

            while(ionFrame.isValid())
            {
                // Predictor: get number ionization electrons for each ion in current ion frame
                forEachFrameSlot(
                    [&worker, &ionFrame, &totalNumberMacroElectronsToSpawn, &atomicStateBox, &transitionBox](
                        uint32_t const idx,
                        uint8_t& numberIonizationElectrons)
                    {
                        auto const ion = ionFrame[idx];

                        // slot not occupied or not bound-free transition based ionizing process
                        if(
                            // slot is not occupied
                            !static_cast<bool>(ion[multiMask_])
                            // no bound-free based ionizing process
                            || !(s_enums::IsProcess<T_ProcessClassGroup>::check(ion[processClass_])))
                        {
                            numberIonizationElectrons = u8(0u);
                            return;
                        }

                        uint32_t const transitionCollectionIndex = ion[transitionIndex_];

                        uint32_t const upperStateClctIdx
                            = transitionBox.upperStateCollectionIndex(transitionCollectionIndex);
                        uint32_t const lowerStateClctIdx
                            = transitionBox.lowerStateCollectionIndex(transitionCollectionIndex);

                        auto const upperStateConfigNumber = atomicStateBox.configNumber(upperStateClctIdx);
                        auto const lowerStateConfigNumber = atomicStateBox.configNumber(lowerStateClctIdx);

                        uint8_t const lowerChargeState
                            = T_AtomicStateDataBox::ConfigNumber::getChargeState(lowerStateConfigNumber);
                        uint8_t const upperChargeState
                            = T_AtomicStateDataBox::ConfigNumber::getChargeState(upperStateConfigNumber);

                        // set context array value
                        if constexpr(u8(T_ProcessClassGroup) == u8(s_enums::ProcessClassGroup::autonomousBased))
                        {
                            // for autonomous transitions allows initialState == upperState
                            numberIonizationElectrons = lowerChargeState - upperChargeState;
                        }
                        else
                        {
                            if constexpr(u8(T_ProcessClassGroup) == u8(s_enums::ProcessClassGroup::boundFreeBased))
                            {
                                numberIonizationElectrons = upperChargeState - lowerChargeState;
                            }
                            else
                            {
                                printf(
                                    "atomicPhysics ERROR: unknown processClassGroup %u in "
                                    "SpawnionizationMacroElectronsKernel\n",
                                    static_cast<uint16_t>(u8(T_ProcessClassGroup)));
                                numberIonizationElectrons = static_cast<int8_t>(0u);
                            }
                        }

                        uint32_t const temp = numberIonizationElectrons;
                        // update global counter
                        alpaka::atomicAdd(
                            worker.getAcc(),
                            &totalNumberMacroElectronsToSpawn,
                            temp,
                            ::alpaka::hierarchy::Threads{});
                    },
                    numberIonizationElectronsCtxArr);
                worker.sync();

                // work over current frame until all predicted electrons have been spawned
                while(true)
                {
                    // need new frame? provide!
                    /* might create frame not used in current iteration but never one not used at all */
                    forEachFrameMaster(
                        [&worker,
                         &frameSize,
                         &superCellIdx,
                         &offsetLowFrame,
                         &totalNumberMacroElectronsToSpawn,
                         &ionizationElectronBox,
                         &electronFrameArray](uint32_t const linearIdx)
                        {
                            int32_t const numberFreeSlotsPreviousLinearIdx
                                = static_cast<int32_t>(linearIdx * frameSize) - offsetLowFrame;
                            // for low will always be <0(partially filled) or ==0(nullptr)

                            if(
                                // need slots from frame, since previous is not enough
                                (numberFreeSlotsPreviousLinearIdx
                                 < static_cast<int32_t>(totalNumberMacroElectronsToSpawn))
                                &&
                                // is nullPtr
                                !(electronFrameArray[linearIdx].isValid()))
                            {
                                electronFrameArray[linearIdx] = ionizationElectronBox.getEmptyFrame(worker);
                                ionizationElectronBox.setAsLastFrame(
                                    worker,
                                    electronFrameArray[linearIdx],
                                    superCellIdx);
                            }
                        });
                    worker.sync();

                    // try to init one electron for each logical worker
                    forEachFrameSlot(
                        [&worker,
                         &ionizationPotentialDepression,
                         &ionFrame,
                         &electronFrameArray,
                         &idGen,
                         &frameSize,
                         &spawnCounter,
                         &offsetLowFrame,
                         &areaMapping,
                         &superCellIdx,
                         &atomicStateBox,
                         &transitionBox,
                         &rngFactoryAndChargeStateBoxAndIPDInput...](
                            uint32_t const frameSlotIdx,
                            uint8_t& numberIonizationElectrons)
                        {
                            auto ion = ionFrame[frameSlotIdx];

                            // not occupied or does not want to spawn an electron
                            if(numberIonizationElectrons == u32(0u))
                                return;

                            uint32_t const globalSlotIndex = alpaka::atomicAdd(
                                worker.getAcc(),
                                &spawnCounter,
                                u32(1u),
                                ::alpaka::hierarchy::Threads{});

                            uint32_t const electronFrameIndex = (globalSlotIndex + offsetLowFrame) / frameSize;
                            uint32_t const localSlotIndex = (globalSlotIndex + offsetLowFrame) % frameSize;

                            auto electron = electronFrameArray[electronFrameIndex][localSlotIndex];

                            // init frame slot, mark as valid particle
                            electron[multiMask_] = 1u;

                            // init new electron attributes
                            if constexpr(T_ProcessClassGroup == s_enums::ProcessClassGroup::boundFreeBased)
                            {
                                uint8_t const processClass = ion[processClass_];

                                /// @note do not need chargeStateBox since we init electron as co-moving currently
                                if(processClass == u8(s_enums::ProcessClass::electronicIonization))
                                {
                                    initElectrons::InitIonizationElectron<
                                        s_enums::ProcessClass::electronicIonization>{}(worker, ion, electron, idGen);
                                }
                                else
                                {
                                    // field ionization
                                    initElectrons::InitIonizationElectron<s_enums::ProcessClass::fieldIonization>{}(
                                        worker,
                                        ion,
                                        electron,
                                        idGen);
                                }

                                /// @todo implement field ionization, Brian Marre, 2023
                            }
                            else if constexpr(T_ProcessClassGroup == s_enums::ProcessClassGroup::autonomousBased)
                            {
                                auto const superCellLocalOffset = superCellIdx - areaMapping.getGuardingSuperCells();

                                initElectrons::InitIonizationElectron<s_enums::ProcessClass::autonomousIonization>{}(
                                    worker,
                                    ionizationPotentialDepression,
                                    ion,
                                    electron,
                                    idGen,
                                    atomicStateBox,
                                    transitionBox,
                                    superCellLocalOffset,
                                    ionizationPotentialDepression::PassIPDInputs::extractRNGFactory(
                                        rngFactoryAndChargeStateBoxAndIPDInput...),
                                    ionizationPotentialDepression::PassIPDInputs::extractChargeStateBox_RngFactory(
                                        rngFactoryAndChargeStateBoxAndIPDInput...));
                            }

                            // update frame slot counter
                            //      will never underflow since we check for 0 above
                            numberIonizationElectrons -= u8(1u);
                        },
                        numberIonizationElectronsCtxArr);
                    worker.sync();

                    // book keeping
                    onlyMaster(
                        [&spawnCounter,
                         &totalNumberMacroElectronsToSpawn,
                         &ionizationElectronBox,
                         &superCellIdx,
                         &offsetLowFrame,
                         &frameSize,
                         &electronFrameArray]()
                        {
                            totalNumberMacroElectronsToSpawn -= spawnCounter;
                            // will never underflow since we only spawn what was previously predicted

                            offsetLowFrame += spawnCounter;

                            if(offsetLowFrame >= static_cast<int32_t>(frameSize))
                            {
                                // low frame of electronFrameArray is full
                                // --> need to shift one further in linked list

                                // update offset
                                offsetLowFrame -= frameSize;

                                // shift high to low to keep partially filled frame at low
                                //  and "empty" frame at high
                                /// @attention high may be nullptr if no further electrons to
                                ///     spawn
                                electronFrameArray[u32(detail::Access::low)]
                                    = electronFrameArray[u32(detail::Access::high)];

                                // reset high with nullptr to mark for next "need new frame?" pass
                                electronFrameArray[u32(detail::Access::high)] = nullptr;
                            }

                            using SuperCellType = typename T_IonizationElectronBox::SuperCellType;
                            SuperCellType& superCell = ionizationElectronBox.getSuperCell(superCellIdx);

                            // update numParticles in superCell for electrons
                            superCell.setNumParticles(superCell.getNumParticles() + spawnCounter);

                            spawnCounter = u32(0u);
                        });
                    worker.sync();

                    if(totalNumberMacroElectronsToSpawn == u32(0u))
                        break;
                }

                // get next ion frame
                ionFrame = ionBox.getPreviousFrame(ionFrame);

                //  no need to set "totalNumberMacroElectronsToSpawn = 0",
                //   already guaranteed by break condition

                worker.sync();
            }
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
