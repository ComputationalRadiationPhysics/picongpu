/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionOrdering.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/AutonomousTransitionRates.hpp"

#include <pmacc/lockstep/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace enums = picongpu::particles::atomicPhysics::enums;

    /** fill rate cache kernel
     *
     * add for all atomic states the rate of each downward autonomous transition to the
     *  rate cache slot of the atomic state.
     *
     * @attention assumes that the rate cache has been reset to 0 before first
     *  fillLocalRateChacheKernel call this atomicPhysics step
     *
     * @tparam T_numberAtomicStates number of atomic states in atomic data data base
     * @tparam T_autonomousIonization is channel active?
     * @tparam T_TransitionOrdering ordering of assumed for transition DataBox
     */
    template<
        uint32_t T_numberAtomicStates,
        bool T_autonomousIonization,
        enums::TransitionOrdering T_TransitionOrdering>
    struct FillLocalRateCacheKernel_Autonomous
    {
        /** call operator
         *
         * called by FillLocalRateCache atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param startIndexDataBox deviceDataBox giving access to the start index of each atomic states'
         *  block of transitions in the up-/down-ward bound-bound transition collection
         * @param numberTransitionsDataBox deviceDataBox giving access to the number of transitions
         *   of each atomic state up- and down-ward
         * @param autonomousTransitionDataBox deviceDataBox giving access to autonomous
         *  transition property data
         *
         * @todo implement recombination, Brian Marre, 2023
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_LocalRateCacheBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_AutonomousTransitionDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_AutonomousTransitionDataBox const autonomousTransitionDataBox) const
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transitions_dataBox_not_autonomous_based,
                u8(T_AtomicStateNumberTransitionsBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::autonomousBased));
            PMACC_CASSERT_MSG(
                startIndex_DataBox_not_autonomous_based,
                u8(T_AtomicStateStartIndexBox::processClassGroup) == u8(enums::ProcessClassGroup::autonomousBased));
            PMACC_CASSERT_MSG(
                transition_dataBox_not_autonomousBased,
                u8(T_AutonomousTransitionDataBox::processClassGroup) == u8(enums::ProcessClassGroup::autonomousBased));
            // check ordering of transition dataBox
            PMACC_CASSERT_MSG(
                wrong_ordering_of_DataBox,
                u8(T_AutonomousTransitionDataBox::transitionOrdering) == u8(T_TransitionOrdering));

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = areaMapping.getSuperCellIndex(worker.blockDomIdxND()) - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            if constexpr(T_autonomousIonization)
            {
                auto forEachAtomicState = pmacc::lockstep::makeForEach<T_numberAtomicStates, T_Worker>(worker);
                auto& rateCache = localRateCacheBox(superCellFieldIdx);

                forEachAtomicState(
                    [&worker, &rateCache, &startIndexDataBox, &numberTransitionsDataBox, &autonomousTransitionDataBox](
                        uint32_t const atomicStateCollectionIndex)
                    {
                        // check if atomic state present at all
                        if(!rateCache.present(atomicStateCollectionIndex))
                            return;

                        uint32_t const numberTransitionsDown
                            = numberTransitionsDataBox.numberOfTransitionsDown(atomicStateCollectionIndex);
                        uint32_t offset = startIndexDataBox.startIndexBlockTransitionsDown(atomicStateCollectionIndex);

                        for(uint32_t i = u32(0u); i < numberTransitionsDown; i++)
                        {
                            // 1/sim.unit.time()
                            rateCache.template add<atomicPhysics::enums::ChooseTransitionGroup::autonomousDownward>(
                                atomicStateCollectionIndex,
                                picongpu::particles::atomicPhysics::rateCalculation::AutonomousTransitionRates::
                                    template rateAutonomousIonization<T_AutonomousTransitionDataBox>(
                                        // transitionCollectionIndex
                                        offset + i,
                                        autonomousTransitionDataBox));
                        }
                    });
            }
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
