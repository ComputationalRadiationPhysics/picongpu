/* Copyright 2023 Brian Marre
 *
 * This file is part of PMacc.
 *
 * PIConGPU is free software you can redistribute it and or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** @class reset accepted status kernel
     *
     * reset the macro-ion attribute accepted to false for all macro-ions for specified superCell
     *
     * @attention will break an in progress atomicPhysics step, only call at the start of
     *  atomicPhysicsStep
     * @attention must be called before first calling the chooseTransitionKernel in an atomicPhysics step
     */
    struct ResetAcceptedStatusKernel
    {
        /** call operator
         *
         * called by ResetAcceptedStatus atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox pointing to the particle frames of the species
         *   T_IonSpecies of all local superCells
         */
        template<typename T_Worker, typename T_AreaMapping, typename T_LocalTimeRemainingBox, typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_IonBox const ionBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if no particles
            if(!forEachLocalIonBoxEntry.hasParticles())
                return;

            // set accepted attribute to false
            forEachLocalIonBoxEntry([](T_Worker const& worker, auto& particle) { particle[accepted_] = false; });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
