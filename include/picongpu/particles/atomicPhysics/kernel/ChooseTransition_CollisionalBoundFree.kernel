/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/CheckForInvalidChooseTransitionGroup.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/electronDistribution/CachedHistogram.hpp"
#include "picongpu/particles/atomicPhysics/enums/ChooseTransitionGroup.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionDirection.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionOrderingFor.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/BoundFreeCollisionalTransitionRates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    /** choose specific transition from previously selected transitionType for bound-free collisional transitions
     *
     * A transition is selected by rolling a random number r, [0,1) and comparing it to the cumulative sums of the
     *  normalized rates of the physical transitions of the transitionType.
     * The transition corresponding to the interval containing r is the chosen and accepted.
     *
     * @tparam T_Histogram type of the histogram
     * @tparam T_n_max number of levels of atomic states in input
     * @tparam T_IPDModel ionization potential depression model to use
     */
    template<typename T_Histogram, uint8_t T_n_max, typename T_IPDModel>
    struct ChooseTransitionKernel_CollisionalBoundFree
    {
        template<
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_BoundFreeTransitionDataBox>
        static constexpr bool checkCorrectAtomicDataBoxesPassed()
        {
            PMACC_CASSERT_MSG(
                number_transition_dataBox_not_bound_free_based,
                u8(T_AtomicStateBoundFreeNumberTransitionsDataBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_free_based,
                u8(T_AtomicStateBoundFreeStartIndexBlockDataBox::processClassGroup)
                    == u8(enums::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                boundFreeTransitiondataBox_not_bound_free_based,
                u8(T_BoundFreeTransitionDataBox::processClassGroup) == u8(enums::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                wrong_transition_ordering_boundFreeTransitionDataBox,
                u8(T_BoundFreeTransitionDataBox::transitionOrdering)
                    == u8(s_enums::TransitionOrderingFor<s_enums::TransitionDirection::upward>::ordering));
            return true;
        }

        /** call operator
         *
         * called by ChooseTransition atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator, for float_X [0,1)
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param numberTransitionsBox deviceDataBox giving access to the number of
         *  bound-free transitions for each atomic state
         * @param startIndexBox deviceDataBox giving access to the start index of each
         *  bound-free transitions for each atomic state
         * @param transitionDataBox deviceDataBox giving access to bound-free transition data
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the local
         *  electron histograms of all local superCells
         * @param localRateCacheBox deviceDataBox giving access to the sum of all transitions rates for each
         *  chooseTransitionGroup cache previously filled by the FillLocalRateCache sub-stage
         * @param ionBox deviceDataBox giving access to the ion frames of all local superCells
         * @param ipdInput everything required by T_IPDModel to calculate the IonizationPotentialDepression,
         *  passed by T_IPDModel::callKernelWithIPDInput
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateBoundFreeNumberTransitionsDataBox,
            typename T_AtomicStateBoundFreeStartIndexBlockDataBox,
            typename T_BoundFreeTransitionDataBox,
            typename T_LocalTimeRemainingBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox,
            typename... T_IPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateBoundFreeNumberTransitionsDataBox const numberTransitionsBox,
            T_AtomicStateBoundFreeStartIndexBlockDataBox const startIndexBox,
            T_BoundFreeTransitionDataBox const transitionDataBox,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalElectronHistogramDataBox localElectronHistogramDataBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_IonBox ionBox,
            T_IPDInput const... ipdInput) const
        {
            PMACC_CASSERT(checkCorrectAtomicDataBoxesPassed<
                          T_AtomicStateBoundFreeStartIndexBlockDataBox,
                          T_AtomicStateBoundFreeNumberTransitionsDataBox,
                          T_BoundFreeTransitionDataBox>());

            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no particles
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto rngGeneratorFloat = rngFactoryFloat(worker, superCellFieldIdx);
            auto& rateCache = localRateCacheBox(superCellFieldIdx);
            T_Histogram& electronHistogram = localElectronHistogramDataBox(superCellFieldIdx);

            // sim.unit.length()^3
            constexpr float_X volumeScalingFactor
                = pmacc::math::CT::volume<SuperCellSize>::type::value * sim.pic.getCellSize().productOfComponents();

            PMACC_SMEM(worker, cachedHistogram, CachedHistogram<T_Histogram::numberBins>);
            cachedHistogram.fill(worker, electronHistogram, volumeScalingFactor);

            float_X const ionizationPotentialDepression
                = T_IPDModel::template calculateIPD<T_ChargeStateDataDataBox::atomicNumber>(
                    superCellFieldIdx,
                    ipdInput...);

            // check whether collisional bound-free transition and if yes, roll specific transition and bin
            forEachLocalIonBoxEntry(
                [&rngGeneratorFloat,
                 &chargeStateDataDataBox,
                 &atomicStateDataDataBox,
                 &numberTransitionsBox,
                 &startIndexBox,
                 &transitionDataBox,
                 &cachedHistogram,
                 &rateCache,
                 &ionizationPotentialDepression](T_Worker const& worker, auto& ion)
                {
                    // debug
                    checkForInvalidChooseTransitionGroup(ion);

                    // reject already accepted macro-ions and other transitionTypes
                    bool const selectedCollisionalBoundFreeUpwardTransition
                        = (ion[transitionIndex_] == u32(s_enums::ChooseTransitionGroup::collisionalBoundFreeUpward));
                    if(ion[accepted_] || !selectedCollisionalBoundFreeUpwardTransition)
                        return;

                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    // get possible transitions' collectionIndices
                    uint32_t const numberTransitions
                        = numberTransitionsBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    uint32_t const startIndexTransitionBlock
                        = startIndexBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);

                    // get random number
                    float_X const r = rngGeneratorFloat();

                    // compare to cumulative sum of normalized transition rates to find choosen transition
                    constexpr uint32_t numberBins = T_Histogram::numberBins;

                    float_X cumSum = 0._X;
                    for(uint32_t transitionID = 0u; transitionID < numberTransitions; ++transitionID)
                    {
                        uint32_t const transitionIndex = transitionID + startIndexTransitionBlock;

                        for(uint32_t binIndex = 0u; binIndex < numberBins; ++binIndex)
                        {
                            // 1/sim.unit.time()
                            float_X const rateTransition = picongpu::particles::atomicPhysics::rateCalculation::
                                BoundFreeCollisionalTransitionRates<T_n_max>::
                                    template rateCollisionalIonizationTransition<
                                        T_ChargeStateDataDataBox,
                                        T_AtomicStateDataDataBox,
                                        T_BoundFreeTransitionDataBox>(
                                        cachedHistogram.energy[binIndex],
                                        cachedHistogram.binWidth[binIndex],
                                        cachedHistogram.density[binIndex],
                                        ionizationPotentialDepression,
                                        transitionIndex,
                                        chargeStateDataDataBox,
                                        atomicStateDataDataBox,
                                        transitionDataBox);

                            cumSum += rateTransition
                                / rateCache.rate(
                                    u32(s_enums::ChooseTransitionGroup::collisionalBoundFreeUpward),
                                    atomicStateCollectionIndex);

                            // inclusive limit, to make sure that r==1 is assigned a transition
                            if(r <= cumSum)
                            {
                                // found chosen transition
                                updateIon(
                                    ion,
                                    u8(picongpu::particles::atomicPhysics::enums::ProcessClass::electronicIonization),
                                    transitionIndex,
                                    binIndex);
                                return;
                            }
                        }
                    }

                    /// @todo not calculate the last transitions rate, instead directly skip to last resort, Brian
                    /// Marre, 2024
                    // select last resort, choose last possible transition
                    updateIon(
                        ion,
                        u8(picongpu::particles::atomicPhysics::enums::ProcessClass::electronicIonization),
                        startIndexTransitionBlock + numberTransitions - 1u,
                        numberBins - 1u);
                });
        }

        //! update ion with selected transition data
        template<typename T_Ion>
        HDINLINE static void updateIon(
            T_Ion& ion,
            uint8_t selectedProcessClass,
            uint32_t selectedTransitionIndex,
            uint32_t selectedBinIndex)
        {
            ion[processClass_] = selectedProcessClass;
            ion[transitionIndex_] = selectedTransitionIndex;
            ion[binIndex_] = selectedBinIndex;
            ion[accepted_] = true;
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
