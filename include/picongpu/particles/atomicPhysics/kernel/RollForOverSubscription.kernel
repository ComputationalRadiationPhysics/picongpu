/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/debug/PrintAtomicPhysicsIonToConsole.hpp"
#include "picongpu/particles/atomicPhysics/enums/IsProcess.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/localHelperFields/RejectionProbabilityCache.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** roll for over subscription kernel
     *
     * check for each macro ion, whether the ion accepted a transition, the accepted
     *  transition is a collisional transition and whether the interaction bin is over
     *  subscribed. If yes roll for rejection of the transition.
     * Rejection probability stored for each bin in localRejectionProbabilityCache.
     */
    template<typename T_Histogram>
    struct RollForOverSubscriptionKernel
    {
        /** call operator
         *
         * called by RollForSubscription atomic physics sub-stage
         *
         * @param worker object containing the device and block information,
         *  passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory random number generator factory
         * @param localElectronHistogramOverSubscribedBox deviceDataBox giving access to
         *  the histogram oversubscribed switch of all local superCells
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param localRejectionProbabilityCacheBox deviceDataBox giving access to the
         *  local RejectionProbabilityCache of each local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_LocalTimeRemainingBox,
            typename T_LocalElectronHistogramOverSubscribedDataBox,
            typename T_IonBox,
            typename T_LocalRejectionProbabilityCacheDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            /// const?, @todo Brian Marre, 2023
            T_RngGeneratorFactoryFloat rngFactory,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalElectronHistogramOverSubscribedDataBox const localElectronHistogramOverSubscribedBox,
            T_IonBox ionBox,
            T_LocalRejectionProbabilityCacheDataBox localRejectionProbabilityCacheBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();


            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            bool const histogramOverSubscribed
                = static_cast<bool>(localElectronHistogramOverSubscribedBox(superCellFieldIdx));

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no bin over subscribed or contains no particles
            if((timeRemaining <= 0._X) || (!histogramOverSubscribed) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            picongpu::particles::atomicPhysics::localHelperFields::RejectionProbabilityCache<T_Histogram::numberBins>&
                rejectionProbabilityCache
                = localRejectionProbabilityCacheBox(superCellFieldIdx);

            auto rngGenerator = rngFactory(worker, superCellFieldIdx);

            // try to reject each accepted macro-ion, which takes from an oversubscribed bin
            forEachLocalIonBoxEntry(
                [&](T_Worker const& worker, auto& ion)
                {
                    uint32_t const binIndex = ion[binIndex_];
                    uint8_t const processClass = ion[processClass_];

                    namespace enums = picongpu::particles::atomicPhysics::enums;

                    bool const processUsesElectronHistogramWeight
                        = enums::IsProcess<enums::ProcessClassGroup::electronicCollisional>::check(processClass);
                    bool usesNotOverSubcribedBin = false;

                    if(processUsesElectronHistogramWeight)
                        usesNotOverSubcribedBin = (rejectionProbabilityCache.rejectionProbability(binIndex) <= 0._X);

                    if constexpr(picongpu::atomicPhysics::debug::kernel::rollForOverSubscription::
                                     PRINT_DEBUG_TO_CONSOLE)
                    {
                        if(ion[accepted_] && processUsesElectronHistogramWeight && !usesNotOverSubcribedBin)
                        {
                            picongpu::particles::atomicPhysics::debug::PrintAtomicPhysicsIonToConsole{}(
                                worker.getAcc(),
                                ion);
                        }
                    }

                    if((!ion[accepted_]) || (!processUsesElectronHistogramWeight) || usesNotOverSubcribedBin)
                        return;

                    if(rngGenerator() < rejectionProbabilityCache.rejectionProbability(binIndex))
                    {
                        // reject transition
                        ion[accepted_] = false;
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
