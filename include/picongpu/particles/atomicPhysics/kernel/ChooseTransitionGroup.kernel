/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file implements kernel randomly rolling a transitionType for each macro-ion

#pragma once

#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClass.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    /** choose transitionType
     *
     * @tparam T_RateCache dataType if RateCache
     * @tparam T_electronicExcitation is channel active?
     * @tparam T_electronicDeexcitation is channel active?
     * @tparam T_spontaneousDeexcitation is channel active?
     * @tparam T_autonomousIonization is channel active?
     * @tparam T_electonicIonization is channel active?
     * @tparam T_fieldIonization is channel active?
     */
    template<
        typename T_RateCache,
        bool T_electronicExcitation,
        bool T_electronicDeexcitation,
        bool T_spontaneousDeexcitation,
        bool T_electronicIonization,
        bool T_autonomousIonization,
        bool T_fieldIonization>
    struct ChooseTransitionGroupKernel
    {
    private:
        /** is transitionType active in user channel configuration?
         *
         * @param transitionTypeIndex index of the transitionType to test
         *
         * @returns true if active, false otherwise
         */
        HDINLINE static constexpr bool transitionTypeActive(uint32_t const transitionTypeIndex)
        {
            if(transitionTypeIndex == u32(s_enums::ChooseTransitionGroup::noChange))
                return true;
            if constexpr(T_electronicExcitation)
                if(transitionTypeIndex == u32(s_enums::ChooseTransitionGroup::boundBoundUpward))
                    return true;
            if constexpr(T_electronicDeexcitation || T_spontaneousDeexcitation)
                if(transitionTypeIndex == u32(s_enums::ChooseTransitionGroup::boundBoundDownward))
                    return true;
            if constexpr(T_electronicIonization || T_fieldIonization)
                if(transitionTypeIndex == u32(s_enums::ChooseTransitionGroup::boundFreeUpward))
                    return true;
            if constexpr(T_autonomousIonization)
                if(transitionTypeIndex == u32(s_enums::ChooseTransitionGroup::autonomousDownward))
                    return true;

            // unknown or deactivated transitionType
            return false;
        }

    public:
        /** call operator
         *
         * called by ChooseTransitionGroup atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactoryFloat factory for uniformly distributed random number generator for float_X in [0,1)
         * @param localTimeStepBox deviceDataBox giving access to the atomic physics time
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param localRateCacheBox deviceDataBox giving access the local rate cache of all local super cells
         * @param ionBox deviceDataBox giving access to all ion frames of a species of all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_RngGeneratorFactoryFloat,
            typename T_TimeStepDataBox,
            typename T_LocalTimeRemainingBox,
            typename T_LocalRateCacheBox,
            typename T_IonBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_RngGeneratorFactoryFloat rngFactoryFloat,
            T_TimeStepDataBox const localTimeStepBox,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_IonBox ionBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or if contains no ions
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto const timeStep = localTimeStepBox(superCellFieldIdx);
            T_RateCache& rateCache = localRateCacheBox(superCellFieldIdx);
            auto rngGenerator = rngFactoryFloat(worker, superCellFieldIdx);

            // choose transition type randomly
            forEachLocalIonBoxEntry(
                [&rngGenerator, &rateCache, &timeStep](T_Worker const& worker, auto& ion)
                {
                    constexpr uint32_t numberRateCacheTransitionTypes = T_RateCache::numberStoredDataSets;

                    if(ion[accepted_])
                        return;
                    auto const atomicStateCollectionIndex = ion[atomicStateCollectionIndex_];

                    float_X const r = rngGenerator();

                    /// @todo change to compile time loop, Brian Marre, 2023
                    float_X cumSum = 0._X;
                    for(uint32_t transitionTypeID = 0u; transitionTypeID < numberRateCacheTransitionTypes;
                        ++transitionTypeID)
                    {
                        // check whether user activated at least one process from the transitionType
                        if(transitionTypeActive(transitionTypeID))
                        {
                            cumSum += timeStep * rateCache.rate(transitionTypeID, atomicStateCollectionIndex);
                            if(r < cumSum)
                            {
                                // only in between storage
                                ion[transitionIndex_] = transitionTypeID;
                                break;
                            }
                        }
                    }
                    // noChange transition as last resort transition, never stored in RateCache
                    if(r >= cumSum) // and <= 1
                    {
                        ion[processClass_] = u8(s_enums::ProcessClass::noChange);
                        // no need to set ion[transitionIndex_] since already uniquely known by processClass = noChange
                        //  and accepted_ = true prevents it being worked on by ChooseTransitionKernels
                        ion[accepted_] = true;
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
