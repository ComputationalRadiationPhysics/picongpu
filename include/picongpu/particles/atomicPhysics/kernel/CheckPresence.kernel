/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    struct CheckPresenceKernel
    {
        /** call operator
         *
         * called by checkPresence atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to all ion frames of a species of all local
         *  superCells
         * @param localTimeStepBox deviceDataBox giving access to superCell local rateCaches
         *  of all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_IonBox,
            typename T_LocalRateCache>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_IonBox const ionBox,
            T_LocalRateCache localRateCacheBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            // end kernel if superCell already finished or no ions
            if((timeRemaining <= 0._X) || (!forEachLocalIonBoxEntry.hasParticles()))
                return;

            auto& rateCache = localRateCacheBox(superCellFieldIdx);

            forEachLocalIonBoxEntry([&rateCache](T_Worker const& worker, auto& ion)
                                    { rateCache.setPresent(worker, ion[atomicStateCollectionIndex_], true); });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
