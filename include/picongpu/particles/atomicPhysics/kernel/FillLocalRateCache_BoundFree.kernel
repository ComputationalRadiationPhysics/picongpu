/* Copyright 2023-2024 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

// need unit.param for normalisation and units, memory.param for SuperCellSize and dim.param for simDim
#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/atomicPhysics/electronDistribution/CachedHistogram.hpp"
#include "picongpu/particles/atomicPhysics/enums/ADKLaserPolarization.hpp"
#include "picongpu/particles/atomicPhysics/enums/ProcessClassGroup.hpp"
#include "picongpu/particles/atomicPhysics/enums/TransitionOrdering.hpp"
#include "picongpu/particles/atomicPhysics/kernel/EFieldNormExtrema.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/BoundFreeCollisionalTransitionRates.hpp"
#include "picongpu/particles/atomicPhysics/rateCalculation/BoundFreeFieldTransitionRates.hpp"

#include <pmacc/algorithms/math/PowerFunction.hpp>
#include <pmacc/lockstep/ForEach.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/static_assert.hpp>

#include <cstdint>
#include <limits>

namespace picongpu::particles::atomicPhysics::kernel
{
    namespace s_enums = picongpu::particles::atomicPhysics::enums;

    /** fill rate cache kernel
     *
     * add for all atomic states and all bins the rate of each upward bound-free
     *  transition to the rate cache slot of the atomic state.
     *
     * called by fillRateCache atomicPhysics sub-stage
     *
     * @todo implement recombination, Brian Marre, 2023
     *
     * @attention assumes that the rate cache has been reset to 0 before first
     *  fillLocalRateChacheKernel call this atomicPhysics step
     *
     * @tparam T_IPDModel ionization potential depression model to use
     * @tparam T_ADKLaserPolarization polarization direction to use in the ADK rate calculation
     *
     * @tparam T_numberLevels maximum principal quantum number of atomic states of ion species
     * @tparam T_numberAtomicStates number of atomic states in atomic data data base
     * @tparam T_numberBins number of regular bins in histogram
     *
     * @tparam T_electronicIonization is collisional electronic ionization channel active?
     * @tparam T_fieldIonization is field ionization channel active?
     * @tparam T_TransitionOrdering ordering of assumed for transition DataBox
     */
    template<
        typename T_IPDModel,
        s_enums::ADKLaserPolarization T_ADKLaserPolarization,
        uint8_t T_numberLevels,
        uint32_t T_numberAtomicStates,
        uint32_t T_numberBins,
        bool T_electronicIonization,
        bool T_fieldIonization,
        s_enums::TransitionOrdering T_TransitionOrdering>
    struct FillLocalRateCacheKernel_BoundFree
    {
        template<
            typename T_AtomicStateNumberTransitionsBox,
            typename T_AtomicStateStartIndexBox,
            typename T_BoundFreeTransitionDataBox>
        static constexpr bool correctAtomicDataBoxes()
        {
            // check that correct databoxes are given
            PMACC_CASSERT_MSG(
                number_transitions_dataBox_not_bound_free_based,
                u8(T_AtomicStateNumberTransitionsBox::processClassGroup)
                    == u8(s_enums::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                startIndex_dataBox_not_bound_free_based,
                u8(T_AtomicStateStartIndexBox::processClassGroup) == u8(s_enums::ProcessClassGroup::boundFreeBased));
            PMACC_CASSERT_MSG(
                transition_dataBox_not_boud_free_based,
                u8(T_BoundFreeTransitionDataBox::processClassGroup) == u8(s_enums::ProcessClassGroup::boundFreeBased));
            // check ordering of transition dataBox
            PMACC_CASSERT_MSG(
                wrong_ordering_of_DataBox,
                u8(T_BoundFreeTransitionDataBox::transitionOrdering) == u8(T_TransitionOrdering));

            return true;
        };

        template<
            typename T_Worker,
            typename T_RateCache,
            typename T_LocalElectronHistogramDataBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_BoundFreeTransitionDataBox>
        HDINLINE static void fillWithCollisonalIonization(
            T_Worker const& worker,
            pmacc::DataSpace<picongpu::simDim> superCellFieldIdx,
            T_RateCache& rateCache,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionDataBox,
            float_X const ionizationPotentialDepression)
        {
            auto forEachAtomicStateAndBin
                = pmacc::lockstep::makeForEach<T_numberAtomicStates * T_numberBins, T_Worker>(worker);

            auto& histogram = localElectronHistogramDataBox(superCellFieldIdx);

            // picongpu::sim.unit.length()^3
            constexpr float_X volumeScalingFactor = pmacc::math::CT::volume<picongpu::SuperCellSize>::type::value
                * picongpu::sim.pic.getCellSize().productOfComponents();

            PMACC_SMEM(worker, cachedHistogram, CachedHistogram<T_numberBins>);
            cachedHistogram.fill(worker, histogram, volumeScalingFactor);

            /// @todo maybe cache transition data instead of electron histogram, Brian Marre, 2024
            forEachAtomicStateAndBin(
                [&worker,
                 &rateCache,
                 &cachedHistogram,
                 &chargeStateDataDataBox,
                 &atomicStateDataDataBox,
                 &startIndexDataBox,
                 &numberTransitionsDataBox,
                 &boundFreeTransitionDataBox,
                 &ionizationPotentialDepression](uint32_t const linearIdx)
                {
                    uint32_t const binIndex = linearIdx / T_numberAtomicStates;
                    uint32_t const atomicStateCollectionIndex = linearIdx % T_numberAtomicStates;

                    // check if atomic state present at all
                    if(!rateCache.present(atomicStateCollectionIndex))
                        return;

                    uint32_t const numberTransitionsUp
                        = numberTransitionsDataBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    uint32_t const offset = startIndexDataBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);

                    float_X const energy = cachedHistogram.energy[binIndex];
                    float_X const binWidth = cachedHistogram.binWidth[binIndex];
                    float_X const density = cachedHistogram.density[binIndex];

                    // 1/picongpu::sim.unit.time()
                    float_X sumRateTransitions = 0._X;
                    for(uint32_t transitionID = u32(0u); transitionID < numberTransitionsUp; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = offset + transitionID;

                        // 1/ picongpu::sim.unit.time()
                        sumRateTransitions
                            += atomicPhysics::rateCalculation::BoundFreeCollisionalTransitionRates<T_numberLevels>::
                                template rateCollisionalIonizationTransition<
                                    T_ChargeStateDataDataBox,
                                    T_AtomicStateDataDataBox,
                                    T_BoundFreeTransitionDataBox>(
                                    energy,
                                    binWidth,
                                    density,
                                    ionizationPotentialDepression,
                                    transitionCollectionIndex,
                                    chargeStateDataDataBox,
                                    atomicStateDataDataBox,
                                    boundFreeTransitionDataBox);
                    }

                    rateCache.template add<T_Worker, s_enums::ChooseTransitionGroup::collisionalBoundFreeUpward>(
                        worker,
                        atomicStateCollectionIndex,
                        sumRateTransitions);
                });
        }

        template<
            typename T_Worker,
            typename T_RateCache,
            typename T_EFieldDataBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_BoundFreeTransitionDataBox>
        HDINLINE static void fillWithFieldIonization(
            T_Worker const& worker,
            pmacc::DataSpace<picongpu::simDim> superCellIdx,
            T_RateCache& rateCache,
            T_EFieldDataBox const eFieldBox,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionDataBox,
            float_X const ionizationPotentialDepression)
        {
            // sim.unit.eField()
            PMACC_SMEM(worker, minEFieldSuperCell, typename T_EFieldDataBox::ValueType::type);
            // sim.unit.eField()
            PMACC_SMEM(worker, maxEFieldSuperCell, typename T_EFieldDataBox::ValueType::type);

            EFieldNormExtrema::find(worker, superCellIdx, eFieldBox, minEFieldSuperCell, maxEFieldSuperCell);
            worker.sync();

            // calculate ADK field ionization rate, for each atomic state and maximum field value
            auto forEachAtomicState = pmacc::lockstep::makeForEach<T_numberAtomicStates, T_Worker>(worker);
            forEachAtomicState(
                [&ionizationPotentialDepression,
                 &maxEFieldSuperCell,
                 &minEFieldSuperCell,
                 &rateCache,
                 &numberTransitionsDataBox,
                 &startIndexDataBox,
                 &chargeStateDataDataBox,
                 &atomicStateDataDataBox,
                 &boundFreeTransitionDataBox](uint32_t const atomicStateCollectionIndex)
                {
                    // check if atomic state present at all
                    if(!rateCache.present(atomicStateCollectionIndex))
                        return;

                    uint32_t const numberTransitionsUp
                        = numberTransitionsDataBox.numberOfTransitionsUp(atomicStateCollectionIndex);
                    uint32_t const offset = startIndexDataBox.startIndexBlockTransitionsUp(atomicStateCollectionIndex);

                    // 1/picongpu::sim.unit.time()
                    float_X sumRateTransitions = 0._X;
                    for(uint32_t transitionID = u32(0u); transitionID < numberTransitionsUp; ++transitionID)
                    {
                        uint32_t const transitionCollectionIndex = offset + transitionID;

                        // 1/picongpu::sim.unit.time()
                        sumRateTransitions
                            += atomicPhysics::rateCalculation::BoundFreeFieldTransitionRates<T_ADKLaserPolarization>::
                                template maximumRateADKFieldIonization(
                                    minEFieldSuperCell,
                                    maxEFieldSuperCell,
                                    ionizationPotentialDepression,
                                    transitionCollectionIndex,
                                    chargeStateDataDataBox,
                                    atomicStateDataDataBox,
                                    boundFreeTransitionDataBox);
                    }

                    rateCache.template add<s_enums::ChooseTransitionGroup::fieldBoundFreeUpward>(
                        atomicStateCollectionIndex,
                        sumRateTransitions);
                });
        }

        /** call operator
         *
         * called by FillLocalRateCache atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param localTimeRemainingBox deviceDataBox giving access to the local time remaining of all local super
         * cells
         * @param localRateCacheBox deviceDataBox giving access to the local rate cache of
         *  all local superCells
         * @param localElectronHistogramDataBox giving access to the local electron histograms
         *  of all local superCells
         * @param chargeStateDataDataBox deviceDataBox giving access to charge state property data
         * @param atomicStateDataDataBox deviceDataBox giving access to atomic state property data
         * @param startIndexDataBox deviceDataBox giving access to the start index of each atomic states'
         *  block of transitions in the up-/down-ward bound-bound transition collection
         * @param numberTransitionsDataBox deviceDataBox giving access to the number of transitions
         *   of each atomic state up- and down-ward
         * @param boundFreeTransitionDataBox deviceDataBox giving access to bound-free transition property data
         * @param ipdInput deviceDataBoxes giving access to ionization potential depression input for each superCell
         *
         * @todo implement recombination, Brian Marre, 2023
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_LocalRateCacheBox,
            typename T_LocalElectronHistogramDataBox,
            typename T_EFieldDataBox,
            typename T_ChargeStateDataDataBox,
            typename T_AtomicStateDataDataBox,
            typename T_AtomicStateStartIndexBox,
            typename T_AtomicStateNumberTransitionsBox,
            typename T_BoundFreeTransitionDataBox,
            typename... T_IPDInput>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalRateCacheBox localRateCacheBox,
            T_LocalElectronHistogramDataBox const localElectronHistogramDataBox,
            T_EFieldDataBox const eFieldBox,
            T_ChargeStateDataDataBox const chargeStateDataDataBox,
            T_AtomicStateDataDataBox const atomicStateDataDataBox,
            T_AtomicStateStartIndexBox const startIndexDataBox,
            T_AtomicStateNumberTransitionsBox const numberTransitionsDataBox,
            T_BoundFreeTransitionDataBox const boundFreeTransitionDataBox,
            T_IPDInput... ipdInput) const
        {
            PMACC_CASSERT(correctAtomicDataBoxes<
                          T_AtomicStateNumberTransitionsBox,
                          T_AtomicStateStartIndexBox,
                          T_BoundFreeTransitionDataBox>());

            pmacc::DataSpace<picongpu::simDim> const superCellIdx
                = areaMapping.getSuperCellIndex(worker.blockDomIdxND());
            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            // picongpu::sim.unit.time()
            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);

            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            float_X const ionizationPotentialDepression
                = T_IPDModel::template calculateIPD<T_ChargeStateDataDataBox::atomicNumber>(
                    superCellFieldIdx,
                    ipdInput...);

            auto& rateCache = localRateCacheBox(superCellFieldIdx);

            if constexpr(T_electronicIonization)
                fillWithCollisonalIonization(
                    worker,
                    superCellFieldIdx,
                    rateCache,
                    localElectronHistogramDataBox,
                    chargeStateDataDataBox,
                    atomicStateDataDataBox,
                    startIndexDataBox,
                    numberTransitionsDataBox,
                    boundFreeTransitionDataBox,
                    ionizationPotentialDepression);

            if constexpr(T_fieldIonization)
                fillWithFieldIonization(
                    worker,
                    superCellIdx,
                    rateCache,
                    eFieldBox,
                    chargeStateDataDataBox,
                    atomicStateDataDataBox,
                    startIndexDataBox,
                    numberTransitionsDataBox,
                    boundFreeTransitionDataBox,
                    ionizationPotentialDepression);
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
