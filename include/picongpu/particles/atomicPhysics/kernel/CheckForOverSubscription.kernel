/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"

#include <pmacc/lockstep/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** check all bins for overSubscription
     *
     * check each histogram bin for deltaWeight > weight0, if yes mark bin as oversubscribed
     *
     * @tparam T_Histogram histogram type
     * @tparam T_numberAtomicPhysicsIonSpecies specialization template parameter used to prevent compilation of all
     *  atomicPhysics kernels if no atomic physics species is present.
     */
    template<typename T_Histogram, uint32_t T_numberAtomicPhysicsIonSpecies>
    struct CheckForOverSubscriptionKernel
    {
        /** call operator
         *
         * called by checkForOverSubscription atomic physics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areMapping mapping of blockIndex to block superCell index
         * @param rngFactory factory for uniformly distributed random number generator
         * @param localHistogramBox deviceDataBox giving access to localHistograms for
         *  all local superCells
         * @param localElectronHistogramOverSubscribed deviceDataBox giving access to
         *  histogram over subscription switch for each local superCell
         * @param localRejectionProbabilityCacheBox deviceDataBox giving access to
         *  localRejectionProbabilityCache for all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_LocalHistogramDataBox,
            typename T_LocalElectronHistogramOverSubscribedDataBox,
            typename T_LocalRejectionProbabilityCacheDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_LocalHistogramDataBox localHistogramBox,
            T_LocalElectronHistogramOverSubscribedDataBox localElectronHistogramOverSubscribedBox,
            T_LocalRejectionProbabilityCacheDataBox localRejectionProbabilityCacheBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            // end kernel if superCell already finished
            if(timeRemaining <= 0._X)
                return;

            auto forEachBin = pmacc::lockstep::makeForEach<T_Histogram::numberBins, T_Worker>(worker);
            auto onlyMaster = pmacc::lockstep::makeMaster<T_Worker>(worker);

            T_Histogram& histogram = localHistogramBox(superCellFieldIdx);

            uint32_t& histogramOverSubscribed = localElectronHistogramOverSubscribedBox(superCellFieldIdx);

            picongpu::particles::atomicPhysics::localHelperFields::RejectionProbabilityCache<T_Histogram::numberBins>&
                rejectionProbabilityCache
                = localRejectionProbabilityCacheBox(superCellFieldIdx);

            // reset to initial value
            onlyMaster([&histogramOverSubscribed]() { histogramOverSubscribed = u32(false); });
            worker.sync();

            /* check all bins for overSubscription
             *   if yes: calculate RejectionProbability mark entire histogram as over subscribed
             */
            forEachBin(
                [&worker, &histogram, &histogramOverSubscribed, &rejectionProbabilityCache](uint32_t const binIndex)
                {
                    float_X const weight0 = histogram.getBinWeight0(binIndex);
                    float_X const deltaWeight = histogram.getBinDeltaWeight(binIndex);

                    float_X rejectionProbability;

                    if(weight0 < deltaWeight)
                    {
                        // bin is oversubscribed by suggested changes

                        // calculate rejection probability
                        rejectionProbability = math::max(
                            // proportion of weight we want to reject
                            (deltaWeight - weight0) / deltaWeight,
                            // but at least one average one macro ion should be rejected
                            sim.unit.typicalNumParticlesPerMacroParticle() / deltaWeight);

                        // set flag that histogram has over subscribed bin
                        alpaka::atomicExch(
                            worker.getAcc(),
                            &histogramOverSubscribed,
                            u32(true),
                            ::alpaka::hierarchy::Threads{});
                    }
                    else
                        rejectionProbability = -1._X;

                    rejectionProbabilityCache.set(binIndex, rejectionProbability);
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
