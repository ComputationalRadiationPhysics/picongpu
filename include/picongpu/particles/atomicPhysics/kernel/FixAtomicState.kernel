/* Copyright 2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/atomicPhysics/ConvertEnum.hpp"
#include "picongpu/particles/traits/GetNumberAtomicStates.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** search for mismatch between atomic state charge state and boundElectrons and fix them by setting the
     *  atomic state to the ground state of the charge state if mismatched.
     *
     * @param T_IonSpecies resolved type of the Ion Species
     */
    template<typename T_IonSpecies>
    struct FixAtomicStateKernel
    {
        /** call operator
         *
         * called by FixAtomicStata atomicPhysics sub-stage
         *
         * @param worker object containing the device and block information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param ionBox deviceDataBox giving access to the particle frames of all local superCells
         * @param chargeStateOrgaBox deviceDataBox giving access to charge state orga data
         * @param atomicStateDataBox deviceDataBox giving access to atomic state property data
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_IonBox,
            typename T_ChargeStateOrgaDataBox,
            typename T_AtomicStateDataDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_IonBox ionBox,
            T_ChargeStateOrgaDataBox const chargeStateOrgaBox,
            T_AtomicStateDataDataBox const atomicStateDataBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());

            auto forEachLocalIonBoxEntry = pmacc::particles::algorithm::acc::makeForEach(worker, ionBox, superCellIdx);

            forEachLocalIonBoxEntry(
                [&chargeStateOrgaBox, &atomicStateDataBox](T_Worker const& worker, auto& ion)
                {
                    using ConfigNumber = typename T_AtomicStateDataDataBox::ConfigNumber;
                    uint8_t const boundElectrons = u8(ion[boundElectrons_]);
                    uint8_t const targetChargeState = ConfigNumber::atomicNumber - boundElectrons;

                    constexpr uint32_t numberAtomicStates
                        = u32(picongpu::traits::GetNumberAtomicStates<T_IonSpecies>::value);
                    uint32_t const collectionIndex = ion[atomicStateCollectionIndex_];

                    /* Check if index is in valid range, can be invalid because value is equal to value_identifier's
                     * default.
                     */
                    bool isValidCollectionIdx = collectionIndex < numberAtomicStates;
                    // update state if collection index is invalid
                    bool updateStateCollectionIdx = !isValidCollectionIdx;

                    if(isValidCollectionIdx)
                    {
                        typename ConfigNumber::DataType const configNumber
                            = atomicStateDataBox.configNumber(collectionIndex);
                        uint8_t const atomicPhysicsBoundElectrons = ConfigNumber::getBoundElectrons(configNumber);

                        if(boundElectrons != atomicPhysicsBoundElectrons)
                            updateStateCollectionIdx = true;
                    }

                    if(updateStateCollectionIdx)
                    {
                        ion[atomicStateCollectionIndex_] = atomicStateDataBox.findGroundState(
                            chargeStateOrgaBox.numberAtomicStates(targetChargeState),
                            chargeStateOrgaBox.startIndexBlockAtomicStates(targetChargeState));
                    }
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
