/* Copyright 2022-2023 Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software you can redistribute it and or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

//! @file binning of electrons into a superCell local histogram

#pragma once


#include "picongpu/defines.hpp"
// need: picongpu/param/atomicPhysics_Debug.param

#include "picongpu/particles/atomicPhysics/GetPhysicalEnergy.hpp"

#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdint>

namespace picongpu::particles::atomicPhysics::kernel
{
    /** binning kernel
     *
     * called by BinElectrons atomicPhysics sub-stage for each superCell, bins all macro electrons into the respective
     *  electron histogram.
     *
     * @attention assumes that the histogram has been reset previously
     * @tparam T_Histogram type of electron histogram
     */
    template<typename T_Histogram>
    struct BinElectronsKernel
    {
        /** call operator
         *
         * called by BinElectrons atomic physics sub-stage
         *
         * @param worker object containing the device and block
         *  information, passed by PMACC_KERNEL call
         * @param areaMapping mapping of blockIndex to block superCell index
         * @param localTimeRemainingBox deviceDataBox giving access to the atomic Physics step time remaining of all
         *  local superCells
         * @param electronBox deviceDataBox giving access to the electron specie's particle frames
         *   of all local superCells
         * @param localElectronHistogramDataBox deviceDataBox giving access to the
         *  local electron histograms of all local superCells
         */
        template<
            typename T_Worker,
            typename T_AreaMapping,
            typename T_LocalTimeRemainingBox,
            typename T_ElectronBox,
            typename T_LocalElectronHistogramDataBox>
        HDINLINE void operator()(
            T_Worker const& worker,
            T_AreaMapping const areaMapping,
            T_LocalTimeRemainingBox const localTimeRemainingBox,
            T_ElectronBox const electronBox,
            T_LocalElectronHistogramDataBox localElectronHistogramDataBox) const
        {
            pmacc::DataSpace<simDim> const superCellIdx = areaMapping.getSuperCellIndex(worker.blockDomIdxND());

            // atomicPhysics superCellFields have no guard, but areMapping includes a guard
            //  -> must subtract guard to get correct superCellFieldIdx
            pmacc::DataSpace<picongpu::simDim> const superCellFieldIdx
                = superCellIdx - areaMapping.getGuardingSuperCells();

            auto const timeRemaining = localTimeRemainingBox(superCellFieldIdx);
            auto forEachLocalElectronBoxEntry
                = pmacc::particles::algorithm::acc::makeForEach(worker, electronBox, superCellIdx);

            // end kernel if superCell already finished or if contains no particles
            if((timeRemaining <= 0._X) || (!forEachLocalElectronBoxEntry.hasParticles()))
                return;

            // get histogram for current superCell
            T_Histogram& histogram = localElectronHistogramDataBox(superCellFieldIdx);
            // bin electrons
            forEachLocalElectronBoxEntry(
                [&histogram](T_Worker const& worker, auto& particle)
                {
                    float_X const energy = GetPhysicalEnergy::KineticEnergy(particle); // eV

                    histogram.binParticle(
                        worker,
                        energy, // unit: eV
                        particle[weighting_]); // unitless
                });
        }
    };
} // namespace picongpu::particles::atomicPhysics::kernel
