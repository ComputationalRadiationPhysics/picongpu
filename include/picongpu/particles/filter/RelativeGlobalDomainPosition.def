/* Copyright 2014-2019 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
namespace particles
{
namespace filter
{
namespace param
{
    struct RelativeGlobalDomainPosition
    {
        /* lowerBound is included in the range*/
        static constexpr float_X lowerBound = 0.0;
        /* upperBound is excluded in the range*/
        static constexpr float_X upperBound = 1.0;
        /* dimension for the filter
         * x = 0; y= 1; z = 2
         */
        static constexpr uint32_t dimension = 0;

        // name of the filter
        static constexpr char const * name = "relativeGlobalDomainPosition";
    };
} // namespace param

    /** filter particle dependent on the global position
     *
     * Check if a particle is within a relative area in one direction of the global
     * domain.
     *
     * @tparam T_Params picongpu::particles::filter::param::RelativeGlobalDomainPosition,
     *                  parameter to configure the functor
     */
    template< typename T_Params = param::RelativeGlobalDomainPosition >
    struct RelativeGlobalDomainPosition;

} //namespace filter
} //namespace particles
} //namespace picongpu
