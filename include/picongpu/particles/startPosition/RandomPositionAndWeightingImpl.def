/* Copyright 2014-2023 Rene Widera, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/particles/startPosition/generic/FreeRng.def"

#include <pmacc/random/distributions/Uniform.hpp>

#include <boost/mpl/integral_c.hpp>


namespace picongpu
{
    namespace particles
    {
        namespace startPosition
        {
            namespace acc
            {
                /** Set the in cell position and weighting randomly
                 *
                 * @see startPosition::RandomPositionAndWeightingImpl
                 *
                 * @tparam T_ParamClass parameter class, must define ::numParticlesPerCell
                 */
                template<typename T_ParamClass>
                struct RandomPositionAndWeightingImpl;

            } // namespace acc


            /** Set the in cell position and weighting randomly
             *
             * The new position is uniformly distributed inside the cell.
             * The weightings are sampled randomly and uniformly around the weighting value of RandomImpl.
             * All weightings are guaranteed to be >= MIN_WEIGHTING and combined weightings in a cell correspond
             * to the represented density.
             *
             * @tparam T_ParamClass parameter class, must define ::numParticlesPerCell
             */
            template<typename T_ParamClass>
            using RandomPositionAndWeightingImpl = generic::FreeRng<
                acc::RandomPositionAndWeightingImpl<T_ParamClass>,
                pmacc::random::distributions::Uniform<float_X>>;
        } // namespace startPosition
    } // namespace particles
} // namespace picongpu
