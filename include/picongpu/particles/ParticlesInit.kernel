/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/particles/Particles.hpp"
#include "picongpu/particles/traits/GetDensityRatio.hpp"

#include <pmacc/kernel/atomic.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/memory/boxes/DataBox.hpp>
#include <pmacc/memory/boxes/PitchedBox.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/meta/conversion/ResolveAndRemoveFromSeq.hpp>
#include <pmacc/particles/operations/SetAttributeToDefault.hpp>

namespace picongpu
{
    /** Return physical particle density value for the given cell
     *
     * That is, the number of real (physical, not macro-) particles,
     * in PIC units of volume**-3.
     * Takes into account base density and density ratio of the species.
     * The resulting density is assumed constant inside a cell.
     *
     * @tparam T_Species particle species type
     * @tparam T_DensityProfile density functor type,
     *                          follows densityProfiles::IProfile concept
     *
     * @param totalCellOffset total offset from the start of the global
     *                        simulation area, including all slides [in cells]
     */
    template<typename T_Species, typename T_DensityProfile>
    DINLINE float_X calcRealDensity(T_DensityProfile& densityFunctor, DataSpace<simDim> const& totalCellOffset)
    {
        PMACC_CASSERT_MSG(
            Please_deselect_densityProfileInitMethod_for_your_species_or_set_BASE_DENSITY_to_a_value_greater_than_0,
            BASE_DENSITY > float_X(0.0));

        float_X const densityRatioOfSpecies = traits::GetDensityRatio<T_Species>::type::getValue();
        float_X const value = densityFunctor(totalCellOffset) * BASE_DENSITY * densityRatioOfSpecies;
        return value;
    }

    /** fill supercell grid with particles
     *
     * @tparam T_Species picongpu::Particles, species type which is initialized
     */
    template<typename T_Species>
    struct KernelFillGridWithParticles
    {
        /** fill supercell grid with particles
         *
         * @tparam T_DensityProfile densityProfiles::IProfile, density functor type
         * @tparam T_PositionFunctor startPosition::IFunctor, position functor type
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_Mapping supercell mapper functor type
         * @tparam T_Worker lockstep worker type
         *
         * @param worker lockstep worker
         * @param densityFunctor functor for the density profile
         * @param positionFunctor functor to calculate the in cell position and the number of
         *                        macro particles per cell
         * @param totalGpuCellOffset offset (in cells) from the origin of the simulation
         *                           to the origin of the current gpu
         *                           (globalDomain.offset + localDomain.offset)
         * @param pb particle memory
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_DensityProfile,
            typename T_PositionFunctor,
            typename T_ParBox,
            typename T_Mapping,
            typename T_Worker>
        DINLINE void operator()(
            T_Worker const& worker,
            T_DensityProfile densityFunctor,
            T_PositionFunctor positionFunctor,
            DataSpace<simDim> const totalGpuCellOffset,
            T_ParBox pb,
            IdGenerator idGen,
            T_Mapping mapper) const
        {
            constexpr int frameSize = T_ParBox::frameSize;
#if 1
            constexpr uint32_t cellsPerSupercell = pmacc::math::CT::volume<SuperCellSize>::type::value;
#endif
            using FramePtr = typename T_ParBox::FramePtr;
            using FrameType = typename T_ParBox::FrameType;
            using ParticleType = typename FrameType::ParticleType;
            DataSpace<simDim> const superCells(mapper.getGridSuperCells());

            // 1 == true, 0 == false, bool is not supported due to atomic usage
            PMACC_SMEM(worker, finished, int);
            PMACC_SMEM(worker, destFrames, memory::Array<FramePtr, 2u>);
            /* Points to the next free slot within the frame.
             * In case the value is larger than number of slots within a frame destFrame[1] must be used
             *
             * valid range: [0;num slot per frame * 2)
             */
            PMACC_SMEM(worker, destCounter, int);

            DataSpace<simDim> const superCellIdx(mapper.getSuperCellIndex(worker.blockDomIdxND()));

            /* offset of the superCell relative to the local domain [in supercells] (without guarding supercells) */
            DataSpace<simDim> const localSuperCellOffset(superCellIdx - mapper.getGuardingSuperCells());

            auto forEachCellInSuperCell = lockstep::makeForEach<cellsPerSupercell>(worker);

            /* number of particles to create for each cell (virtual worker) */
            auto numParsPerCellCtx = lockstep::makeVar<uint32_t>(forEachCellInSuperCell, 0u);
            auto onlyMaster = lockstep::makeMaster(worker);

            /* by default notify that there is no particle to create */
            onlyMaster([&]() { finished = 1; });

            worker.sync();

            // initialize the position functor for each cell in the supercell
            auto positionFunctorCtx = forEachCellInSuperCell(
                [&](int32_t const idx, uint32_t& numParsPerCell)
                {
                    /* cell index within the superCell */
                    DataSpace<simDim> const cellIdx = pmacc::math::mapToND(SuperCellSize::toRT(), idx);

                    /* cell offset to the begin of the simulation */
                    DataSpace<simDim> const totalCellOffset
                        = totalGpuCellOffset + localSuperCellOffset * SuperCellSize::toRT() + cellIdx;
                    float_X const realDensity = calcRealDensity<T_Species>(densityFunctor, totalCellOffset);

                    /** @bug volatile is required for CUDA 9.2 and sm_60 else the compiler will
                     * optimize out `if(realParticlesPerCell > 0.0_X)` later on.
                     */
                    volatile float_X const realParticlesPerCell = realDensity * CELL_VOLUME;

                    // create an independent position functor for each cell in the supercell
                    auto posFunctor = positionFunctor(forEachCellInSuperCell.getWorker(), localSuperCellOffset);

                    if(realParticlesPerCell > 0.0_X)
                        numParsPerCell
                            = posFunctor.template numberOfMacroParticles<ParticleType>(realParticlesPerCell);

                    if(numParsPerCell > 0)
                    {
                        // notify that at least one worker is creating a particle
                        kernel::atomicAllExch(worker, &finished, 0, ::alpaka::hierarchy::Threads{});
                    }

                    return posFunctor;
                },
                numParsPerCellCtx);

            worker.sync();

            if(finished == 1)
                return; // if there is no particle which has to be created

            onlyMaster(
                [&]()
                {
                    auto& superCell = pb.getSuperCell(superCellIdx);
                    int numParticlesLastFrame = static_cast<int>(superCell.getSizeLastFrame());
                    if(numParticlesLastFrame != frameSize && numParticlesLastFrame != 0)
                    {
                        // reuse the last frame if exists and not full
                        destCounter = numParticlesLastFrame;
                        destFrames[0] = pb.getLastFrame(superCellIdx);
                        destFrames[1] = FramePtr();
                    }
                    else
                    {
                        destCounter = 0;
                        for(int i = 0; i < 2; ++i)
                            destFrames[i] = FramePtr{};
                    }
                });

            worker.sync();

            // distribute the particles within the cell
            do
            {
                /* Old value of the destination counter is stored to check if a worker
                 * later requests slots for more particles.
                 */
                int oldDestCount = destCounter;

                worker.sync();

                auto destParticleIdxCtx = forEachCellInSuperCell(
                    [&](uint32_t const idx, uint32_t& numParsPerCell)
                    {
                        int destParticleIdx = -1;
                        if(numParsPerCell > 0u)
                        {
                            destParticleIdx
                                = alpaka::atomicAdd(worker.getAcc(), &destCounter, 1, ::alpaka::hierarchy::Threads{});
                            numParsPerCell--;
                        }
                        return destParticleIdx;
                    },
                    numParsPerCellCtx);

                worker.sync();

                onlyMaster(
                    [&]()
                    {
                        if(oldDestCount == destCounter)
                        {
                            finished = 1;
                        }
                        else
                        {
                            // provide frames to safely store all new particles
                            for(int i = 0; i < 2; ++i)
                                if(!destFrames[i].isValid() && destCounter > i * frameSize)
                                {
                                    destFrames[i] = pb.getEmptyFrame(worker);
                                    pb.setAsLastFrame(worker, destFrames[i], superCellIdx);
                                }
                        }
                    });

                worker.sync();
                if(!finished)
                {
                    forEachCellInSuperCell(
                        [&](uint32_t const idx, int& destParticleIdx, auto& positionFunctor)
                        {
                            if(destParticleIdx != -1)
                            {
                                // select first or second frame depending on the destination index
                                int frameIdx = destParticleIdx / frameSize;
                                destParticleIdx -= frameIdx * frameSize;

                                auto particle = destFrames[frameIdx][destParticleIdx];

                                /** we now initialize all attributes of the new particle to their default values
                                 *   some attributes, such as the position, localCellIdx, weighting or the
                                 *   multiMask (@see AttrToIgnore) of the particle will be set individually
                                 *   in the following lines since they are already known at this point.
                                 */
                                {
                                    using ParticleAttrList = typename FrameType::ValueTypeSeq;
                                    using AttrToIgnore
                                        = pmacc::mp_list<position<>, multiMask, localCellIdx, weighting>;
                                    using ParticleCleanedAttrList =
                                        typename ResolveAndRemoveFromSeq<ParticleAttrList, AttrToIgnore>::type;

                                    meta::ForEach<ParticleCleanedAttrList, SetAttributeToDefault<boost::mpl::_1>>
                                        setToDefault;

                                    setToDefault(worker, idGen, particle);
                                }
                                particle[multiMask_] = 1;
                                particle[localCellIdx_] = idx;
                                // initialize position and weighting
                                positionFunctor(worker, particle);
                            }
                        },
                        destParticleIdxCtx,
                        positionFunctorCtx);

                    worker.sync();

                    onlyMaster(
                        [&]()
                        {
                            if(destCounter >= frameSize)
                            {
                                // reuse the not full second frame in the next round as first frame and invalidate
                                // second frame
                                destFrames[0] = destFrames[1];
                                destFrames[1] = FramePtr{};
                                destCounter -= frameSize;
                            }
                        });
                    worker.sync();
                }
            } while(finished != 1);
        }
    };

} // namespace picongpu
