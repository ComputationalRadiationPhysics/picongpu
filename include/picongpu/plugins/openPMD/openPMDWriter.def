/* Copyright 2014-2023 Felix Schmitt, Axel Huebl, Franz Poeschel
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/plugins/common/DumpTimes.hpp"
#include "picongpu/plugins/openPMD/Json.hpp"
#include "picongpu/plugins/openPMD/Parameters.hpp"
#include "picongpu/plugins/openPMD/toml.hpp"
#include "picongpu/simulation/control/MovingWindow.hpp"

#include <pmacc/math/Vector.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/types.hpp>

#include <iostream> // std::cerr
#include <limits>
#include <list>
#include <memory> // std::unique_ptr
#include <optional>
#include <sstream>
#include <stdexcept> // throw std::runtime_error
#include <string>
#include <type_traits>

#include <openPMD/openPMD.hpp>

namespace picongpu
{
    namespace openPMD
    {
        using namespace pmacc;
        using AbstractJsonMatcher = json::AbstractJsonMatcher;


        namespace po = boost::program_options;


#define MESHES_PATH "fields"
#define PARTICLES_PATH "particles"

        template<typename T_Vec, typename T_Ret = std::vector<typename std::remove_reference<T_Vec>::type::type>>
        T_Ret asStandardVector(T_Vec const&);

        enum class WriteSpeciesStrategy
        {
            ADIOS,
            HDF5
        };


        /**
         * Writes simulation data to openPMD series.
         * Implements the ILightweightPlugin interface.
         */

        class openPMDWriter;
        class Help;

        struct ThreadParams : PluginParameters
        {
            std::unique_ptr<::openPMD::Series> openPMDSeries; /* is null iff there is no series currently open */

            /** current dump is a checkpoint */
            bool isCheckpoint;

            MPI_Comm communicator; /* MPI communicator for openPMD API */

            std::unique_ptr<AbstractJsonMatcher> jsonMatcher;

            WriteSpeciesStrategy strategy = WriteSpeciesStrategy::ADIOS;

            MappingDesc* cellDescription = nullptr;

            std::vector<char> fieldBuffer; /* temp. buffer for fields */

            Window window; /* window describing the volume to be dumped */

            //! defines the maximal particle data chunk size
            size_t particleIOChunkSize = 1024llu * 10llu;

            /** Offset from local moving window to local domain.
             *  Value for all components will always be >= 0.
             */
            DataSpace<simDim> localWindowToDomainOffset;

            std::vector<double> times;
            static constexpr bool enableTimeTrace = PIC_OPENPMD_TIMETRACE_NUMBER_OF_FILES > 0;
            DumpTimes<enableTimeTrace> m_dumpTimes
            {
#if PIC_OPENPMD_TIMETRACE_NUMBER_OF_FILES < 1
                "/dev/null"
#else
                []()
                {
                    constexpr unsigned maxLogFiles = PIC_OPENPMD_TIMETRACE_NUMBER_OF_FILES;
                    static GridController<simDim>& gc = Environment<simDim>::get().GridController();
                    auto const size = gc.getGlobalSize();
                    auto const rank = gc.getGlobalRank();
                    std::string outputFile = "PIC_openPMD_TimeTrace_" + std::to_string(rank) + ".txt";
                    if(size <= maxLogFiles)
                    {
                        return outputFile;
                    }
                    else
                    {
                        /*
                         * Only up to maxLogFiles logs should be written in parallel in order not to
                         * overload the file system with measuring I/O efficiency, e.g. 20 logs.
                         * The following logic figures out if this rank should write a log and
                         * which log index from 0 to 19 should be used locally.
                         *
                         * Log file with index i is written from `rank = bottom(i/maxLogFiles * size)`
                         * This means that there exists an e < 1 s.t. `rank + e = i/maxLogFiles * size`,
                         * which can be given as `i = rank*maxLogFiles/size + e*maxLogFiles/size`.
                         * In this if branch, `maxLogFiles/size < 1` was checked before entering,
                         * hence also `e*maxLogFiles/size < 1`.
                         * This means that the log index `i` can be computed
                         * via `i = ceil(rank*maxLogFiles/size)`.
                         * In order to find out if this rank writes a log, the rank is then
                         * computed with `rank = bottom(i/maxLogFiles * size)` (see first formula above)
                         * and compared to the actual rank ID.
                         */
                        auto div_ceil = [](auto a, auto b) { return (a + b - 1) / b; };
                        size_t proposed_log_idx = div_ceil(rank * maxLogFiles, size);
                        size_t rank_of_that_log = (proposed_log_idx * size) / maxLogFiles;
                        return rank == rank_of_that_log ? outputFile : "/dev/null";
                    }
                }()
#endif
            };

            ::openPMD::Series& openSeries(::openPMD::Access at);

            void closeSeries();

            /*
             * If file is empty, read from command line parameters.
             */
            void initFromConfig(
                Help&,
                size_t id,
                uint32_t const currentStep,
                std::string const& dir,
                std::optional<std::string> file = {});

            /**
             * Wrapper for ::openPMD::resetDataset, set dataset parameters
             * @tparam DIM number of variable dimensions
             * @param recordComponent Location of the dataset within the openPMD
             * Series
             * @param datatype Variable type
             * @param globalDimensions Dataset global dimensions
             * @return The input recordComponent
             */
            template<unsigned DIM>
            ::openPMD::RecordComponent& initDataset(
                ::openPMD::RecordComponent& recordComponent,
                ::openPMD::Datatype datatype,
                pmacc::math::UInt64<DIM> const& globalDimensions,
                std::string const& datasetName);
        };

        std::string printAvailableExtensions();
    } // namespace openPMD
} // namespace picongpu
