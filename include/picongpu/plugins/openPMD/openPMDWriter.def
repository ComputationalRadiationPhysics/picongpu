/* Copyright 2014-2021 Felix Schmitt, Axel Huebl, Franz Poeschel
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/plugins/openPMD/Json.hpp"
#include "picongpu/simulation/control/MovingWindow.hpp"

#include <pmacc/math/Vector.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/types.hpp>

#include <iostream> // std::cerr
#include <limits>
#include <list>
#include <memory> // std::unique_ptr
#include <sstream>
#include <stdexcept> // throw std::runtime_error
#include <string>
#include <type_traits>

#include <openPMD/openPMD.hpp>

namespace picongpu
{
    namespace openPMD
    {
        using namespace pmacc;
        using AbstractJsonMatcher = json::AbstractJsonMatcher;


        namespace po = boost::program_options;


#define MESHES_PATH "fields"
#define PARTICLES_PATH "particles"


        enum class WriteSpeciesStrategy
        {
            ADIOS,
            HDF5
        };


        /**
         * Writes simulation data to openPMD series.
         * Implements the ILightweightPlugin interface.
         */

        class openPMDWriter;
        class Help;

        struct ThreadParams
        {
            uint32_t currentStep; /** current simulation step */


            std::unique_ptr<::openPMD::Series> openPMDSeries; /* is null iff there is no series currently open */

            /** current dump is a checkpoint */
            bool isCheckpoint;

            MPI_Comm communicator; /* MPI communicator for openPMD API */
            std::string compressionMethod; /* openPMD data transform compression method */
            std::string fileName; /* Name of the openPMDSeries, excluding the extension */
            std::string fileExtension; /* Extension of the file name */
            std::string fileInfix;

            std::unique_ptr<AbstractJsonMatcher> jsonMatcher;

            WriteSpeciesStrategy strategy = WriteSpeciesStrategy::ADIOS;

            pmacc::math::UInt64<simDim> fieldsSizeDims;
            pmacc::math::UInt64<simDim> fieldsGlobalSizeDims;
            pmacc::math::UInt64<simDim> fieldsOffsetDims;

            GridLayout<simDim> gridLayout;
            MappingDesc* cellDescription;

            std::vector<float_X> fieldBuffer; /* temp. buffer for fields */

            Window window; /* window describing the volume to be dumped */

            DataSpace<simDim> localWindowToDomainOffset; /** offset from local moving
                                                            window to local domain */

            std::vector<double> times;

            ::openPMD::Series& openSeries(::openPMD::Access at);

            void closeSeries();

            void initFromConfig(Help&, size_t id, std::string const& file, std::string const& dir);

            /**
             * Wrapper for ::openPMD::resetDataset, set dataset parameters
             * @tparam DIM number of variable dimensions
             * @param recordComponent Location of the dataset within the openPMD
             * Series
             * @param datatype Variable type
             * @param globalDimensions Dataset global dimensions
             * @param compression Enable compression data transform
             * @param compressionMethod String denoting the data transform to use
             * @return The input recordComponent
             */
            template<unsigned DIM>
            ::openPMD::RecordComponent& initDataset(
                ::openPMD::RecordComponent& recordComponent,
                ::openPMD::Datatype datatype,
                pmacc::math::UInt64<DIM> const& globalDimensions,
                bool compression,
                std::string const& compressionMethod,
                std::string const& datasetName);
        };
    } // namespace openPMD
} // namespace picongpu
