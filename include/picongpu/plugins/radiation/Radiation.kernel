/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch,
 *                     Klaus Steiniger, Felix Schmitt, Benjamin Worpitz, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once


#include "picongpu/defines.hpp"
#include "picongpu/plugins/radiation/VectorTypes.hpp"
#include "picongpu/plugins/radiation/amplitude.hpp"
#include "picongpu/plugins/radiation/calc_amplitude.hpp"
#include "picongpu/plugins/radiation/check_consistency.hpp"
#include "picongpu/plugins/radiation/getRadiationMask.hpp"
#include "picongpu/plugins/radiation/nyquist_low_pass.hpp"
#include "picongpu/plugins/radiation/particle.hpp"
#include "picongpu/plugins/radiation/radFormFactor.hpp"
#include "picongpu/plugins/radiation/windowFunctions.hpp"
#include "picongpu/traits/frame/GetCharge.hpp"
#include "sys/stat.h"

#include <pmacc/kernel/atomic.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/memory/Array.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/mpi/MPIReduce.hpp>
#include <pmacc/mpi/reduceMethods/Reduce.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>

#include <cstdlib>
#include <fstream>
#include <iostream>
#include <string>

namespace picongpu
{
    namespace plugins
    {
        namespace radiation
        {
            /** calculate the radiation of a species
             *
             * If \p T_dependenciesFulfilled is false a dummy kernel without functionality is created
             */
            struct KernelRadiationParticles
            {
                /**
                 * The radiation kernel calculates for all particles on the device the
                 * emitted radiation for every direction and every frequency.
                 * The parallelization is as follows:
                 *  - There are as many Blocks of threads as there are directions for which
                 *    radiation needs to be calculated. (A block of threads shares
                 *    shared memory)
                 *  - The number of threads per block is equal to the number of cells per
                 *    super cells which is also equal to the number of particles per frame
                 *
                 * The procedure starts with calculating unique ids for the threads and
                 * initializing the shared memory.
                 * Then a loop over all super cells starts.
                 * Every thread loads a particle from that super cell and calculates its
                 * retarded time and its real amplitude (both is dependent of the direction).
                 * For every Particle
                 * exists therefor a unique space within the shared memory.
                 * After that, a thread calculates for a specific frequency the emitted
                 * radiation of all particles.
                 * @param pb
                 * @param radiation
                 * @param globalOffset
                 * @param currentStep
                 * @param mapper
                 * @param freqFkt
                 * @param simBoxSize
                 */
                template<typename ParBox, typename DBox, typename Mapping, typename T_Worker>
                DINLINE
                    /*__launch_bounds__(256, 4)*/
                    void
                    operator()(
                        T_Worker const& worker,
                        ParBox pb,
                        DBox radiation,
                        DataSpace<simDim> globalOffset,
                        uint32_t currentStep,
                        Mapping mapper,
                        radiation_frequencies::FreqFunctor freqFkt,
                        DataSpace<simDim> simBoxSize) const
                {
                    namespace po = boost::program_options;
                    using Amplitude = picongpu::plugins::radiation::Amplitude<>;
                    constexpr uint32_t frameSize = ParBox::frameSize;

                    using FrameType = typename ParBox::FrameType;
                    using FramePtr = typename ParBox::FramePtr;

                    using namespace parameters; // parameters of radiation

                    /// calculate radiated Amplitude
                    /* parallelized in 1 dimensions:
                     * looking direction (theta)
                     * (not anymore data handling)
                     * create shared memory for particle data to reduce global memory calls
                     * every thread in a block loads one particle and every thread runs
                     * through all particles and calculates the radiation for one direction
                     * for all frequencies
                     */

                    // vectorial part of the integrand in the Jackson formula
                    PMACC_SMEM(worker, real_amplitude_s, memory::Array<vector_64, frameSize>);

                    // retarded time
                    PMACC_SMEM(worker, t_ret_s, memory::Array<picongpu::float_X, frameSize>);

                    // storage for macro particle weighting needed if
                    // the coherent and incoherent radiation of a single
                    // macro-particle needs to be considered
                    PMACC_SMEM(worker, radWeighting_s, memory::Array<float_X, frameSize>);

                    // particle counter used if not all particles are considered for
                    // radiation calculation
                    PMACC_SMEM(worker, counter_s, int);

                    PMACC_SMEM(worker, lowpass_s, memory::Array<NyquistLowPass, frameSize>);

                    int const theta_idx = worker.blockDomIdxND().x();

                    // simulation time (needed for retarded time)
                    picongpu::float_64 const t(picongpu::float_64(currentStep) * picongpu::float_64(sim.pic.getDt()));

                    // looking direction (needed for observer) used in the thread
                    vector_64 const look = radiation_observer::observationDirection(theta_idx);

                    // get extent of guarding super cells (needed to ignore them)
                    DataSpace<simDim> const guardingSuperCells = mapper.getGuardingSuperCells();

                    /* number of super cells on GPU per dimension (still including guard cells)
                     * remove both guards from count [later one sided guard needs to be added again]
                     */
                    DataSpace<simDim> const superCellsCount(mapper.getGridSuperCells() - 2 * guardingSuperCells);

                    // get absolute number of relevant super cells
                    int const numSuperCells = superCellsCount.productOfComponents();

                    int const numJobs = worker.gridDomSizeND().y();
                    int const jobIdx = worker.blockDomIdxND().y();

                    /* go over all super cells on GPU with a stride depending on number of temporary results
                     * but ignore all guarding supercells
                     */
                    for(int super_cell_index = jobIdx; super_cell_index < numSuperCells; super_cell_index += numJobs)
                    {
                        // select SuperCell and add one sided guard again
                        DataSpace<simDim> const superCellIdx
                            = pmacc::math::mapToND(superCellsCount, super_cell_index) + guardingSuperCells;

                        // -guardingSuperCells remove guarding block
                        DataSpace<simDim> const superCellOffset(
                            globalOffset + ((superCellIdx - guardingSuperCells) * SuperCellSize::toRT()));

                        namespace particleAccAlgos = pmacc::particles::algorithm::acc;
                        auto forEachFrameInSupercell
                            = particleAccAlgos::makeForEachFrame<particleAccAlgos::Forward>(worker, pb, superCellIdx);

                        if(!forEachFrameInSupercell.hasParticles())
                            continue;

                        forEachFrameInSupercell(
                            /* iterate over the frame list of the current supercell */
                            [&](auto const& lockstepWorker, auto& frameCtx)
                            {
                                lockstep::makeMaster(worker)([&]() { counter_s = 0; });

                                // wait for particle counter update
                                worker.sync();

                                // loop over all particles in the frame
                                auto forEachParticleInFrame = forEachFrameInSupercell.lockstepForEach();

                                forEachParticleInFrame(
                                    [&](uint32_t const linearIdx, auto& frame)
                                    {
                                        /* modulo is required if the kernel is started with more workers than particle
                                         * in a supercell
                                         */
                                        auto par = frame[linearIdx % frameSize];
                                        /* Not all particle slots in a frame representing an exiting particle.
                                         * Process only real particles and ignore gaps in a frame.
                                         */
                                        if(par[multiMask_] != 1)
                                            return;

                                        // get old and new particle momenta
                                        vector_X const particle_momentumNow = vector_X(par[momentum_]);
                                        vector_X const particle_momentumOld = vector_X(par[momentumPrev1_]);
                                        /* initializes "saveParticleAt" flag with -1
                                         * because "counter_s" will never be -1
                                         * therefore, if a particle is saved, a value of counter
                                         * is stored in "saveParticleAt" != -1
                                         * THIS IS ACTUALLY ONLY NEEDED IF: the radiation flag was set
                                         * LATER: can this be optimized?
                                         */
                                        int saveParticleAt = -1;

                                        /* if particle is not accelerated we skip all calculations
                                         *
                                         * this is a component-wise comparison
                                         */
                                        if(particle_momentumNow != particle_momentumOld)
                                        {
                                            if(getRadiationMask(par))
                                                saveParticleAt = kernel::atomicAllInc(
                                                    worker,
                                                    &counter_s,
                                                    ::alpaka::hierarchy::Threads{});

                                            /* for information:
                                             *   atomicAdd returns an int with the previous
                                             *   value of "counter_s" != -1
                                             *   therefore, if a particle is selected
                                             *   "saveParticleAs" != -1
                                             */

                                            // if a particle needs to be considered
                                            if(saveParticleAt != -1)
                                            {
                                                // calculate global position
                                                int const cellIdx = par[localCellIdx_];

                                                // position inside of the cell
                                                floatD_X const pos = par[position_];

                                                // calculate global position of cell
                                                DataSpace<simDim> const globalPos = superCellOffset
                                                    + pmacc::math::mapToND(SuperCellSize::toRT(), cellIdx);

                                                /* add global position of cell with local position of particle
                                                 * in cell
                                                 *
                                                 * Info:
                                                 * Mandatory 64 bit precision to avoid artefacts above betatron
                                                 * critical frequency.
                                                 * https://github.com/ComputationalRadiationPhysics/picongpu/issues/4208
                                                 */
                                                vector_64 particle_locationNow;
                                                // set z component to zero in case of simDim==DIM2
                                                particle_locationNow[2] = 0.0;
                                                // run over all components and compute gobal position
                                                for(uint32_t i = 0; i < simDim; ++i)
                                                    particle_locationNow[i]
                                                        = (float_64(globalPos[i]) + pos[i]) * sim.pic.getCellSize()[i];

                                                /* get macro-particle weighting
                                                 *
                                                 * Info:
                                                 * the weighting is the number of real particles described
                                                 * by a macro-particle
                                                 */
                                                float_X const weighting = par[weighting_];

                                                /* only of coherent and incoherent radiation of a single
                                                 * macro-particle is considered, the weighting of each
                                                 * macro-particle needs to be stored in order to be considered
                                                 * when the actual frequency calculation is done
                                                 */
                                                radWeighting_s[saveParticleAt] = weighting;

                                                // mass of macro-particle
                                                float_X const particle_mass
                                                    = picongpu::traits::attribute::getMass(weighting, par);

                                                /****************************************************
                                                 **** Here happens the true physical calculation ****
                                                 ****************************************************/

                                                // set up particle using the radiation's own particle class
                                                /*!\todo please add a namespace for Particle class*/
                                                Particle const particle(
                                                    particle_locationNow,
                                                    particle_momentumOld,
                                                    particle_momentumNow,
                                                    particle_mass);

                                                // set up amplitude calculator
                                                using CalcAmplitudeNSim1 = CalcAmplitude<RetardedTime1, OldDFT>;

                                                // calculate amplitude
                                                CalcAmplitudeNSim1 const amplitude3(particle, sim.pic.getDt(), t);

                                                // get charge of single electron ! (weighting=1.0f)
                                                float_X const particle_charge = traits::frame::getCharge<FrameType>();

                                                /* compute real amplitude of macro-particle with a charge of
                                                 * a single electron
                                                 */
                                                real_amplitude_s[saveParticleAt] = amplitude3.getVector(look)
                                                    * particle_charge * picongpu::float_64(sim.pic.getDt());

                                                // retarded time stored in shared memory
                                                t_ret_s[saveParticleAt]
                                                    = static_cast<float_X>(amplitude3.getTRet(look));

                                                lowpass_s[saveParticleAt] = NyquistLowPass(look, particle);

                                                /* the particle amplitude is used to include the weighting
                                                 * of the window function filter without needing more memory
                                                 */
                                                radWindowFunction::RadWindowFunction const winFkt;

                                                /* start with a factor of one */
                                                float_X windowFactor = 1.0;

                                                for(uint32_t d = 0; d < simDim; ++d)
                                                {
                                                    windowFactor *= winFkt(
                                                        particle_locationNow[d],
                                                        simBoxSize[d] * sim.pic.getCellSize()[d]);
                                                }

                                                /* apply window function factor to amplitude */
                                                real_amplitude_s[saveParticleAt] *= windowFactor;

                                            } // END: if a particle needs to be considered
                                        } // END: check if particle is accelerated
                                    },
                                    frameCtx);

                                worker.sync(); // wait till every worker has loaded its particle data

                                auto forEachOmega = lockstep::makeForEach<radiation_frequencies::N_omega>(worker);
                                forEachOmega(
                                    [&](uint32_t const o)
                                    {
                                        /* storage for amplitude (complex 3D vector)
                                         * it  is initialized with zeros (  0 +  i 0 )
                                         * Attention: This is an accumulator and should
                                         * be in double precision to ameliorate roundoff
                                         * errors!
                                         */
                                        Amplitude amplitude = Amplitude::zero();

                                        // compute frequency "omega" using for-loop-index "o"
                                        picongpu::float_X const omega = static_cast<float_X>(freqFkt(o));

                                        // create a form factor functor
                                        radFormFactor::RadFormFactor const myRadFormFactor{omega, look};

                                        /* Particle loop: thread runs through loaded particle data
                                         *
                                         * Summation of Jackson radiation formula integrand
                                         * over all electrons for fixed, thread-specific
                                         * frequency
                                         *
                                         * This is the hot loop of this kernel, taking ~95% of its time.
                                         * So performance-wise the rest of this kernel does not significantly
                                         * contribute. On the contrary, few operations done inside the loop matter
                                         * a lot.
                                         */
                                        for(int j = 0; j < counter_s; ++j)
                                        {
                                            // check Nyquist-limit for each particle "j" and each frequency "omega"
                                            if(lowpass_s[j].check(omega))
                                            {
                                                // Here happens the true physical calculation
                                                float_X const formFactorValue = myRadFormFactor(radWeighting_s[j]);
                                                float_X const phase = t_ret_s[j] * omega;
                                                amplitude.addContribution(real_amplitude_s[j], phase, formFactorValue);
                                            }
                                        }

                                        /* the radiation contribution of the following is added to global memory:
                                         *     - valid particles of last super cell
                                         *     - from this (one) time step
                                         *     - omega_id = theta_idx * radiation_frequencies::N_omega + o
                                         */
                                        radiation(DataSpace<2>(theta_idx * radiation_frequencies::N_omega + o, jobIdx))
                                            += amplitude;
                                    });

                                // wait till all radiation contributions for frame are done
                                worker.sync();
                            });
                    } // end loop over all super cells
                }
            }; // end radiation kernel

        } // namespace radiation
    } // namespace plugins
} // namespace picongpu
