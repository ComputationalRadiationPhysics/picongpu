/* Copyright 2016-2022 Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/lockstep.hpp>
#include <pmacc/math/Vector.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>

namespace picongpu
{
    using namespace pmacc;

    //! This kernel is only called for guard particles.
    struct KernelParticleCalorimeter
    {
        /** call functor calorimeterFunctor for each particle
         *
         * @tparam T_ParticlesBox pmacc::ParticlesBox, particle box type
         * @tparam T_CalorimeterFunctor type of the functor
         * @tparam T_Mapping supercell mapper functor type
         * @tparam T_Worker lockstep worker type
         *
         * @param worker lockstep worker
         * @param particlesBox particle memory
         * @param mapper functor to map a block to a supercell
         * @param beginCellIdxLocal only process particles with local domain cell index >=
         * beginCellIdxLocal
         * @param endCellIdxLocal only process particles with local domain cell index < endCellIdxLocal
         */
        template<
            typename T_ParticlesBox,
            typename T_CalorimeterFunctor,
            typename T_Mapper,
            typename T_Worker,
            typename T_Filter>
        DINLINE void operator()(
            T_Worker const& worker,
            T_ParticlesBox particlesBox,
            T_CalorimeterFunctor calorimeterFunctor,
            T_Mapper mapper,
            pmacc::DataSpace<simDim> beginCellIdxLocal,
            pmacc::DataSpace<simDim> endCellIdxLocal,
            T_Filter filter) const
        {
            /* multi-dimensional offset vector from local domain origin on GPU in units of super cells */
            DataSpace<simDim> const superCellIdx(
                mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

            auto forEachParticle = pmacc::particles::algorithm::acc::makeForEach(worker, particlesBox, superCellIdx);

            // end kernel if we have no particles
            if(!forEachParticle.hasParticles())
                return;

            auto accFilter = filter(worker, superCellIdx - mapper.getGuardingSuperCells());
            auto const superCellCellOffsetNoGuard
                = (superCellIdx - mapper.getGuardingSuperCells()) * SuperCellSize::toRT();

            forEachParticle(
                [&accFilter, &superCellCellOffsetNoGuard, &beginCellIdxLocal, &endCellIdxLocal, &calorimeterFunctor](
                    auto const& lockstepWorker,
                    auto& particle)
                {
                    if(accFilter(lockstepWorker, particle))
                    {
                        // Check if it fits the internal cells range
                        auto const cellInSuperCell
                            = DataSpaceOperations<simDim>::template map<SuperCellSize>(particle[localCellIdx_]);
                        auto const localCell = superCellCellOffsetNoGuard + cellInSuperCell;
                        for(uint32_t d = 0; d < simDim; d++)
                            if((localCell[d] < beginCellIdxLocal[d]) || (localCell[d] >= endCellIdxLocal[d]))
                                return;
                        calorimeterFunctor(lockstepWorker, particle);
                    }
                });
        }
    };

} // namespace picongpu
