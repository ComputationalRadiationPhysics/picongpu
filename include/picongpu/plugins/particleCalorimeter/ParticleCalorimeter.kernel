/* Copyright 2016-2019 Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/math/Vector.hpp>
#include <pmacc/memory/shared/Allocate.hpp>

namespace picongpu
{
using namespace pmacc;

/** This kernel is only called for guard particles.
 *
 * @tparam T_numWorkers number of workers
 */
template< uint32_t T_numWorkers >
struct KernelParticleCalorimeter
{
    /** call functor calorimeterFunctor for each particle
     *
     * @tparam T_ParticlesBox pmacc::ParticlesBox, particle box type
     * @tparam T_CalorimeterFunctor type of the functor
     * @tparam T_Mapping supercell mapper functor type
     * @tparam T_Acc alpaka accelerator type
     *
     * @param alpaka accelerator
     * @param particlesBox particle memory
     * @param mapper functor to map a block to a supercell
     */
    template<
        typename T_ParticlesBox,
        typename T_CalorimeterFunctor,
        typename T_Mapper,
        typename T_Acc,
        typename T_Filter
    >
    DINLINE void operator()(
        T_Acc const & acc,
        T_ParticlesBox particlesBox,
        T_CalorimeterFunctor calorimeterFunctor,
        T_Mapper mapper,
        T_Filter filter
    ) const
    {
        using namespace mappings::threads;

        constexpr uint32_t numWorkers = T_numWorkers;
        constexpr lcellId_t maxParticlesInFrame = pmacc::math::CT::volume< SuperCellSize >::type::value;

        uint32_t const workerIdx = threadIdx.x;

        /* multi-dimensional offset vector from local domain origin on GPU in units of super cells */
        DataSpace< simDim > const block( mapper.getSuperCellIndex( DataSpace< simDim > ( blockIdx ) )) ;

        using ParticlesFramePtr = typename T_ParticlesBox::FramePtr;

        ParticlesFramePtr particlesFrame;

        particlesFrame = particlesBox.getLastFrame( block );

        // end kernel if we have no frames within the supercell
        if( !particlesFrame.isValid( ) )
            return;

        auto accFilter = filter(
            acc,
            block - mapper.getGuardingSuperCells( ),
            WorkerCfg< numWorkers >{ workerIdx }
        );

        // number of particles in the current frame
        auto numParticles = particlesBox.getSuperCell( block ).getSizeLastFrame( );

        while( particlesFrame.isValid( ) )
        {
            using ParticleDomCfg = IdxConfig<
                maxParticlesInFrame,
                numWorkers
            >;

            // loop over all particles in the frame
            ForEachIdx< ParticleDomCfg >{ workerIdx }
            (
                [&](
                    uint32_t const linearIdx,
                    uint32_t const
                )
                {
                    auto particle = particlesFrame[ linearIdx ];
                    if( linearIdx >= numParticles )
                    {
                        particle.setHandleInvalid( );
                    }

                    if(
                        accFilter(
                            acc,
                            particle
                        )
                    )
                    {
                        calorimeterFunctor(
                            acc,
                            particlesFrame,
                            linearIdx
                        );
                    }
                }
            );

            // independent for each worker
            particlesFrame = particlesBox.getPreviousFrame( particlesFrame );
            numParticles = maxParticlesInFrame;
        }
    }
};

} // namespace picongpu
