/* Copyright 2020-2022 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/plugins/xrayScattering/XrayScattering.hpp"

#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/lockstep.hpp>

#include <cstdio>


namespace picongpu
{
    namespace plugins
    {
        namespace xrayScattering
        {
            //! Kernel for xrayScattering calculation.
            struct KernelXrayScattering
            {
                /** Kernel function.
                 *
                 * @param worker lockstep worker
                 * @param cellsGrid Dimensions of BORDER + CORE in cells, not super
                 *      cells.
                 * @param densityBoxGPU Data box of the density device storage, shifted
                 *      to exclude 1st GUARD.
                 * @param globalOffset Offset from the global to the local domain.
                 * @param fieldPos TmpField in cell position.
                 * @param amplitudeBox Device side data box of the output Buffer.
                 * @param totalNumVectors Number of scattering vectors to process.
                 * @param scatteringVectors Scattering vectors to process.
                 * @param probingBeam Probing beam characterization.
                 * @param currentStep Current simulation step.
                 */
                template<
                    typename T_Worker,
                    typename T_DensityBoxGPU,
                    typename T_FieldPos,
                    typename T_DBox,
                    typename T_TotalNumVectors,
                    typename T_ScatteringVectors,
                    typename T_ProbingBeam>
                DINLINE void operator()(
                    T_Worker const& worker,
                    DataSpace<simDim> cellsGrid,
                    T_DensityBoxGPU densityBoxGPU,
                    DataSpace<simDim> globalOffset,
                    T_FieldPos fieldPos,
                    T_DBox amplitudeBox,
                    T_TotalNumVectors const totalNumVectors,
                    T_ScatteringVectors scatteringVectors,
                    T_ProbingBeam probingBeam,
                    uint32_t currentStep,
                    uint32_t totalSimulationCells

                ) const
                {
                    constexpr uint32_t blockSize = T_Worker::getNumWorkers();
                    uint32_t const blockIdxLin = cupla::blockIdx(worker.getAcc()).x;

                    using complex_X = alpaka::Complex<float_X>;
                    // Storage for positions in the beam coordinate system.
                    PMACC_SMEM(worker, positions, memory::Array<float2_X, blockSize>);
                    // Storage for (form factor density * beam intensity factor).
                    PMACC_SMEM(worker, densities, memory::Array<float_X, blockSize>);

                    uint32_t const linAccessBlockBegin = blockIdxLin * blockSize;

                    lockstep::makeForEach<blockSize>(worker)(
                        [&](uint32_t const linearIdx)
                        {
                            // Each thread reads one field value and saves it together
                            // with its position, in UNIT_LENGTH, in the global domain.
                            DataSpace<simDim> const cellPosition(
                                DataSpaceOperations<simDim>::map(cellsGrid, linearIdx + linAccessBlockBegin));

                            DataSpace<simDim> const cellGlobalPosition(cellPosition + globalOffset);
                            floatD_X fieldGlobalPosition = precisionCast<float_X>(cellGlobalPosition) + fieldPos()[0];
                            fieldGlobalPosition *= cellSize.shrink<simDim>();

                            float_X density = densityBoxGPU(cellPosition)[0];
                            // Save the cell position in the beam coordinate system.
                            float3_X position_b = probingBeam.coordinateTransform(currentStep, fieldGlobalPosition);
                            float_X beamFactor = probingBeam(position_b);
                            // Store the cell value of the function that has to be
                            // Fourier transformed.
                            densities[linearIdx] = density * beamFactor / totalSimulationCells;
                            // Store position in the beam comoving system
                            // 3rd component is not needed anymore since q_z = 0.
                            positions[linearIdx] = position_b.shrink<DIM2>();

                            // Wait for all threads on the block to finish.
                            worker.sync();

                            // Calculate the density fourier transform:
                            // Loop over q-vectors in frequency space:
                            // Each worker process every numWorkers vector.
                            for(uint32_t qLoopIdx = worker.getWorkerIdx(); qLoopIdx < totalNumVectors;
                                qLoopIdx += blockSize)
                            {
                                float2_X q = scatteringVectors[qLoopIdx];
                                complex_X amplitude(0.0);
                                // Loop over all previously loaded cells:
                                // This is a volume integral over the local domain
                                // in the beam coordinate system.
                                for(uint32_t rLoopIdx = 0; rLoopIdx < blockSize; rLoopIdx++)
                                {
                                    float_X dotqr;
                                    density = densities[rLoopIdx];
                                    float2_X position = positions[rLoopIdx];
                                    dotqr = pmacc::math::dot(position, q);
                                    dotqr *= -1.0;
                                    amplitude += pmacc::math::euler(density, dotqr);
                                } // end loop over positions
                                // Add the super cell contribution to the output.
                                // Avoid racing conditions between blocks.
                                // To get addresses of real and imaginary parts, rely on array-oriented access that
                                // is guaranteed by alpaka::Complex<>.
                                auto* resultReal = &reinterpret_cast<float_X(&)[2]>(amplitudeBox[qLoopIdx])[0];
                                auto* resultImag = &reinterpret_cast<float_X(&)[2]>(amplitudeBox[qLoopIdx])[1];
                                cupla::atomicAdd(
                                    worker.getAcc(),
                                    resultReal,
                                    amplitude.real(),
                                    ::alpaka::hierarchy::Blocks{});
                                cupla::atomicAdd(
                                    worker.getAcc(),
                                    resultImag,
                                    amplitude.imag(),
                                    ::alpaka::hierarchy::Blocks{});
                            } // end loop over scattering directions
                        } // end lambda function body
                    );
                }
            };
        } // namespace xrayScattering
    } // namespace plugins
} // namespace picongpu
