/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch,
 *                     Klaus Steiniger, Felix Schmitt, Benjamin Worpitz,
 *                     Finn-Ole Carstens
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/plugins/radiation/radFormFactor.hpp"
#include "picongpu/plugins/transitionRadiation/Calculator.hpp"
#include "picongpu/plugins/transitionRadiation/GammaMask.hpp"
#include "picongpu/plugins/transitionRadiation/Particle.hpp"

#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/kernel/atomic.hpp>

#include <cstdlib>
#include <fstream>
#include <iostream>
#include <string>


namespace picongpu
{
    namespace plugins
    {
        namespace transitionRadiation
        {
            //! Kernel for computation of transition radiation on GPUs.

            struct KernelTransRadParticles
            {
                /**
                 *
                 * @tparam T_ParBox box with particles
                 * @tparam T_DBox box with float data
                 * @tparam T_DBoxComplex box with complex data
                 * @tparam T_Mapping MappingDescription object
                 * @tparam T_Worker lockstep worker type
                 * @param worker lockstep worker
                 * @param incTransRad output array for storage incoherent transition radiation
                 * @param cohTransRadPara output array for storage of parallel parts of coherent transition radiation
                 * @param cohTransRadPerp output array for storage of perpendicular parts of coherent transition
                 * radiation
                 * @param numParticles output array for amount of particles
                 * @param globalOffset offset of simulation
                 * @param mapper MappingDesction object
                 * @param freqFkt frequency functor
                 * @param simBoxSize size of simulation box
                 */
                template<
                    typename T_ParBox,
                    typename T_DBox,
                    typename T_DBoxComplex, // Formfactor returns complex values
                    typename T_Mapping,
                    typename T_Worker>
                DINLINE void operator()(
                    T_Worker const& worker,
                    T_ParBox pb,
                    T_DBox incTransRad,
                    T_DBoxComplex cohTransRadPara,
                    T_DBoxComplex cohTransRadPerp,
                    T_DBox numParticles,
                    DataSpace<simDim> globalOffset,
                    T_Mapping mapper,
                    transitionRadiation::frequencies::FreqFunctor freqFkt,
                    DataSpace<simDim> simBoxSize) const
                {
                    using complex_X = alpaka::Complex<float_X>;
                    using complex_64 = alpaka::Complex<float_64>;

                    constexpr uint32_t frameSize = pmacc::math::CT::volume<SuperCellSize>::type::value;

                    using FrameType = typename T_ParBox::FrameType;
                    using FramePtr = typename T_ParBox::FramePtr;

                    /* parallelized in 2 dimensions:
                     * looking direction (theta, phi)
                     * (not anymore data handling)
                     * create shared memory for particle data to reduce global memory calls
                     * every thread in a block loads one particle and every thread runs
                     * through all particles and calculates the radiation for one direction
                     * for all frequencies
                     */
                    constexpr int blockSize = pmacc::math::CT::volume<SuperCellSize>::type::value;

                    // perpendicular part of normalized energy
                    PMACC_SMEM(worker, energyPerp_s, memory::Array<float_X, blockSize>);

                    // parallel part of normalized energy
                    PMACC_SMEM(worker, energyPara_s, memory::Array<float_X, blockSize>);

                    // exponent of the form factor
                    PMACC_SMEM(worker, formfactorExponent_s, memory::Array<complex_X, blockSize>);

                    // storage for macro particle weighting needed if
                    // the coherent and incoherent radiation of a single
                    // macro-particle needs to be considered
                    PMACC_SMEM(worker, radWeighting_s, memory::Array<float_X, blockSize>);

                    // particle counter used if not all particles are considered for
                    // radiation calculation
                    PMACC_SMEM(worker, counter_s, int);


                    int const theta_idx
                        = cupla::blockIdx(worker.getAcc()).x; // cupla::blockIdx(acc).x is used to determine theta

                    // looking direction (needed for observer) used in the thread
                    float3_X const look = transitionRadiation::observationDirection(theta_idx);

                    // get extent of guarding super cells (needed to ignore them)
                    DataSpace<simDim> const guardingSuperCells = mapper.getGuardingSuperCells();

                    /* number of super cells on GPU per dimension (still including guard cells)
                     * remove both guards from count [later one sided guard needs to be added again]
                     */
                    DataSpace<simDim> const superCellsCount(mapper.getGridSuperCells() - 2 * guardingSuperCells);

                    // get absolute number of relevant super cells
                    int const numSuperCells = superCellsCount.productOfComponents();

                    // propagation distance for the particle bunch
                    float_X const propagationDistance = parameters::foilPosition - globalOffset[1];


                    /* go over all super cells on GPU
                     * but ignore all guarding supercells
                     */
                    for(int superCellIndex = 0; superCellIndex <= numSuperCells; ++superCellIndex)
                    {
                        // select SuperCell and add one sided guard again
                        DataSpace<simDim> const superCell
                            = DataSpaceOperations<simDim>::map(superCellsCount, superCellIndex) + guardingSuperCells;


                        // -guardingSuperCells remove guarding block
                        DataSpace<simDim> const superCellOffset(
                            globalOffset + ((superCell - guardingSuperCells) * SuperCellSize::toRT()));

                        // pointer to  frame storing particles
                        FramePtr frame = pb.getLastFrame(superCell);

                        // number  of particles in current frame
                        lcellId_t particlesInFrame = pb.getSuperCell(superCell).getSizeLastFrame();

                        /* go to next supercell
                         *
                         * if "isValid" is false then there is no frame
                         * inside the superCell (anymore)
                         */
                        while(frame.isValid())
                        {
                            /* since a race condition can occur if "continue loop" is called,
                             *  all threads must wait for the selection of a new frame
                             *  until all threads have evaluated "isValid"
                             */
                            worker.sync();

                            auto onlyMaster = lockstep::makeMaster(worker);

                            /* The Master process (thread 0) in every thread block is in
                             * charge of loading a frame from
                             * the current super cell and evaluate the total number of
                             * particles in this frame.
                             */
                            onlyMaster([&]() { counter_s = 0; });

                            worker.sync();

                            // loop over all particles in the frame
                            auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

                            forEachParticle(
                                [&](uint32_t const linearIdx)
                                {
                                    // only threads with particles are running
                                    if(linearIdx < particlesInFrame)
                                    {
                                        auto par = frame[linearIdx];
                                        // get particle momenta
                                        float3_X const particleMomentum = par[momentum_];
                                        /* initializes "saveParticleAt" flag with -1
                                         * because "counter_s" will never be -1
                                         * therefore, if a particle is saved, a value of counter
                                         * is stored in "saveParticleAt" != -1
                                         * THIS IS ACTUALLY ONLY NEEDED IF: the radiation flag was set
                                         * LATER: can this be optimized?
                                         */

                                        int saveParticleAt = -1;

                                        // only moving particles create transition radiation
                                        if((particleMomentum * particleMomentum).sumOfComponents() > 0.0)
                                        {
                                            if(transitionRadiation::getTransitionRadiationMask(par))
                                                saveParticleAt = kernel::atomicAllInc(
                                                    worker,
                                                    &counter_s,
                                                    ::alpaka::hierarchy::Threads{});

                                            /* for information:
                                             *   atomicAdd returns an int with the previous
                                             *   value of "counter_s" != -1
                                             *   therefore, if a particle is selected
                                             *   "saveParticleAt" != -1
                                             */
                                            // if a particle needs to be considered
                                            if(saveParticleAt != -1)
                                            {
                                                // calculate global position
                                                lcellId_t const cellIdx = par[localCellIdx_];

                                                // position inside of the cell
                                                floatD_X const pos = par[position_];

                                                // calculate global position of cell
                                                DataSpace<simDim> const globalPos(
                                                    superCellOffset
                                                    + DataSpaceOperations<simDim>::template map<SuperCellSize>(
                                                        cellIdx));

                                                // add global position of cell with local position of particle in cell
                                                float3_X particleLocation;
                                                // set z component to zero in case of simDim==DIM2
                                                particleLocation[2] = 0.0;
                                                // run over all components and compute gobal position
                                                for(uint32_t i = 0; i < simDim; ++i)
                                                    particleLocation[i]
                                                        = (float_X(globalPos[i]) + pos[i]) * cellSize[i];

                                                /* get macro-particle weighting
                                                 *
                                                 * Info:
                                                 * the weighting is the number of real particles described
                                                 * by a macro-particle
                                                 */
                                                float_X const weighting = par[weighting_];
                                                radWeighting_s[saveParticleAt] = weighting;

                                                // mass of macro-particle
                                                float_X const particleMass = attribute::getMass(weighting, par);

                                                // using transition radiation particle class
                                                transitionRadiation::Particle particle(
                                                    particleLocation,
                                                    particleMomentum,
                                                    particleMass);

                                                // only propagate particles if it is set up in
                                                // transitionRadiation.param
                                                if(parameters::foilPosition != 0.0)
                                                    particle.propagate(propagationDistance);

                                                // create calculator for TR calculations
                                                transitionRadiation::Calculator const calculator
                                                    = transitionRadiation::Calculator(particle, look);

                                                // calculate values for transition radiation
                                                energyPara_s[saveParticleAt] = calculator.calcEnergyPara();

                                                energyPerp_s[saveParticleAt] = calculator.calcEnergyPerp();

                                                formfactorExponent_s[saveParticleAt]
                                                    = calculator.calcFormFactorExponent();
                                            }
                                        } // only moving particles
                                    } // only threads with particle
                                }); // for each particle
                            worker.sync();

                            // run over all  valid omegas for this thread
                            for(uint32_t o = worker.getWorkerIdx(); o < transitionRadiation::frequencies::nOmega;
                                o += T_Worker::getNumWorkers())
                            {
                                float_X itrSum = 0.0;
                                float_X totalParticles = 0.0;
                                complex_X ctrSumPara = complex_X(0.0, 0.0);
                                complex_X ctrSumPerp = complex_X(0.0, 0.0);

                                // create a form factor object for physical correct coherence effects within
                                // macro-particles
                                float_X const omega = freqFkt(o);
                                macroParticleFormFactor::radFormFactor const macroParticleFormFactor{
                                    omega,
                                    precisionCast<float_64>(look)};

                                for(int j = 0; j < counter_s; ++j)
                                {
                                    complex_X const formfactor
                                        = transitionRadiation::calcFormFactor(omega, formfactorExponent_s[j])
                                        * macroParticleFormFactor(radWeighting_s[j]);

                                    itrSum += radWeighting_s[j]
                                        * (energyPerp_s[j] * energyPerp_s[j] + energyPara_s[j] * energyPara_s[j]);
                                    totalParticles += radWeighting_s[j];

                                    ctrSumPara += energyPara_s[j] * formfactor;
                                    ctrSumPerp += energyPerp_s[j] * formfactor;
                                }

                                uint32_t const index
                                    = static_cast<uint32_t>(theta_idx) * transitionRadiation::frequencies::nOmega + o;
                                incTransRad[index] += itrSum;
                                numParticles[index] += totalParticles;
                                cohTransRadPara[index] += ctrSumPara;
                                cohTransRadPerp[index] += ctrSumPerp;
                            }

                            worker.sync();

                            /* First threads starts loading next frame of the super-cell:
                             *
                             * Info:
                             *   The calculation starts with the last SuperCell (must not be full filled)
                             *   all previous SuperCells are full with particles
                             */
                            particlesInFrame = frameSize;
                            frame = pb.getPreviousFrame(frame);
                        } // while frame is valid
                    } // for all supercells
                }
            }; // struct KernelTransRad

        } // namespace transitionRadiation
    } // namespace plugins
} // namespace picongpu
