/* Copyright 2013-2024 Axel Huebl, Heiko Burau, Anton Helm,
 *                     Rene Widera, Richard Pausch, Alexander Debus,
 *                     Sergei Bastrakov, Julian Lenz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/BaseParam.def"

#include <nlohmann/json.hpp>

namespace picongpu::fields::incidentField::profiles
{
    namespace defaults
    {
        struct GaussianPulseParam : public BaseParam
        {
            /** Beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
             *                             [   1.17741    ]
             *
             * unit: meter
             */
            static constexpr float_64 W0_SI = 5.0e-6 / 1.17741;

            /** The laser pulse will be initialized PULSE_INIT times of the PULSE_DURATION after
             * TIME_DELAY_SI
             *
             * unit: none
             */
            static constexpr float_64 PULSE_INIT = 20.0;


            /** Use only the 0th Laguerremode for a standard Gaussian
             *
             * @{
             */
            static constexpr uint32_t numModes = 0;
            static constexpr auto laguerreModes = floatN_X<numModes + 1>(1.0);
            static constexpr auto laguerrePhases = floatN_X<numModes + 1>(0.0);
            /** This is just an example for a more complicated set of Laguerre modes
             *
             * @code{.cpp}
             * static constexpr uint32_t numModes = 12;
             * static constexpr auto laguerreModes = floatN_X<numModes+1>( -1.0, 0.0300519, 0.319461,
             * -0.23783, 0.0954839, 0.0318653, -0.144547, 0.0249208, -0.111989, 0.0434385, -0.030038,
             * -0.00896321, -0.0160788);
             * static constexpr auto laguerrePhases = floatN_X<numModes+1>(
             * 0.0, 1.0344594, -0.9384701, -2.7384883, 0.0016872, 2.4563653, -0.312892, -1.7298303,
             * -0.8039839, 3.0055385, -0.1503778, -9.6980362, -2.8122287);
             * @endcode
             */
            /** @} */

            template<typename My = GaussianPulseParam>
            static nlohmann::json metadata()
            {
                auto baseMetadata = BaseParam::metadata<My>();
                auto gaussianMetadata = nlohmann::json::object();

                // Adding units to Gaussian-specific parameters
                gaussianMetadata["W0"] = {{"value", My::W0_SI}, {"unit", "m"}};
                gaussianMetadata["PULSE_INIT"] = {{"value", My::PULSE_INIT}, {"unit", "none"}};
                gaussianMetadata["Mode number"] = {{"value", My::numModes}, {"unit", "none"}};

                // Adding Laguerre modes and phases
                nlohmann::json laguerreModesJson = nlohmann::json::array();
                nlohmann::json laguerrePhasesJson = nlohmann::json::array();

                for(uint32_t i = 0; i <= numModes; ++i)
                {
                    laguerreModesJson.push_back(laguerreModes[i]);
                    laguerrePhasesJson.push_back(laguerrePhases[i]);
                }

                gaussianMetadata["Laguerre modes"] = {{"value", laguerreModesJson}, {"unit", "none"}};
                gaussianMetadata["Laguerre phases"] = {{"value", laguerrePhasesJson}, {"unit", "none"}};

                baseMetadata["Gaussian parameters"] = gaussianMetadata;
                return baseMetadata;
            }
        };
    } // namespace defaults

    template<typename T_Param>
    struct GaussianPulseEnvelope;

    /** GaussianPulse laser profile with finite pulse duration tag
     *
     * @tparam T_Params class parameter to configure the GaussianPulse profile,
     *                  see members of defaults::GaussianPulseParam
     *                  for required members
     * @tparam T_LongitudinalEnvelope class providing a static method getEnvelope(time)
     *  that defines laser temporal envelope. The default is a Gaussian pulse.
     */
    template<
        typename T_Params = defaults::GaussianPulseParam,
        typename T_LongitudinalEnvelope = GaussianPulseEnvelope<T_Params>>
    struct GaussianPulse;
} // namespace picongpu::fields::incidentField::profiles
