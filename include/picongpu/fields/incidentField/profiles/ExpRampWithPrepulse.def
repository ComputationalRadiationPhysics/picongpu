/* Copyright 2018-2023 Ilja Goethel, Axel Huebl Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/BaseParam.def"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            namespace profiles
            {
                namespace defaults
                {
                    /** Default param set for ExpRampWithPrepulse temporal envelope
                     *
                     */
                    struct ExpRampWithPrepulseLongitudinalParam : public BaseParam
                    {
                        /** Intensities of prepulse and exponential preramp
                         *
                         * @{
                         */
                        static constexpr float_X INT_RATIO_PREPULSE = 0.;
                        static constexpr float_X INT_RATIO_POINT_1 = 1.e-8;
                        static constexpr float_X INT_RATIO_POINT_2 = 1.e-4;
                        static constexpr float_X INT_RATIO_POINT_3 = 1.e-4;
                        /** @} */

                        /** Time-positions of prepulse and preramps points
                         *
                         * @{
                         */
                        static constexpr float_64 TIME_PREPULSE_SI = -950.0e-15;
                        static constexpr float_64 TIME_PEAKPULSE_SI = 0.0e-15;
                        static constexpr float_64 TIME_POINT_1_SI = -1000.0e-15;
                        static constexpr float_64 TIME_POINT_2_SI = -300.0e-15;
                        static constexpr float_64 TIME_POINT_3_SI = -100.0e-15;
                        /** @} */

                        static constexpr float_64 AMPLITUDE_SI = 1.0e6;

                        /** Pulse duration: sigma of std. gauss for intensity (E^2)
                         *  PREPULSE_DURATION_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
                         *                                          [    2.354820045     ]
                         *  Info:             FWHM_of_Intensity = FWHM_Illumination
                         *                      = what an experimentalist calls "pulse duration"
                         *  unit: seconds (1 sigma)
                         */
                        static constexpr float_64 PREPULSE_DURATION_SI = BaseParam::PULSE_DURATION_SI;

                        /** Stretch temporal profile by a constant plateau between the up and downramp
                         *
                         *  unit: seconds
                         */
                        static constexpr float_64 LASER_NOFOCUS_CONSTANT_SI
                            = 0.0 * WAVE_LENGTH_SI / ::picongpu::sim.si.getSpeedOfLight();


                        /** The laser pulse will be initialized half of RAMP_INIT times of the PULSE_DURATION before
                         * plateau and half at the end of the plateau
                         *
                         * unit: none
                         */
                        static constexpr float_64 RAMP_INIT = 16.0;
                    };

                    /** Default param set for ExpRampWithPrepulse profile
                     *
                     * This profile is deprecated, use GaussianPulse profile (Gaussian beam) with the
                     * ExpRampWithPrepulseLongitudinal temporal envelope.
                     */
                    struct ExpRampWithPrepulseParam : public ExpRampWithPrepulseLongitudinalParam
                    {
                        /** Beam waist: distance from the axis where the pulse intensity (E^2)
                         *              decreases to its 1/e^2-th part,
                         *              at the focus position of the laser
                         *
                         * AXIS_1 is directed according to POLARISATION_DIRECTION parameters.
                         * AXIS_2 is a cross product of the propagation direction and AXIS_1.
                         *
                         * For 2d simulations W0_AXIS_2_SI must be defined but its value has no effect.
                         *
                         * unit: meter
                         */
                        static constexpr float_64 W0_AXIS_1_SI = 4.246e-6;
                        static constexpr float_64 W0_AXIS_2_SI = W0_AXIS_1_SI;
                    };

                } // namespace defaults

                /** Wavepacket with spatial Gaussian envelope and adjustable temporal shape.
                 *
                 * Note: This profile is deprecated, use GaussianPulse profile (Gaussian beam) with the
                 * ExpRampWithPrepulseLongitudinal temporal envelope.
                 *
                 * Allows defining a prepulse and two regions of exponential preramp with
                 * independent slopes. The definition works by specifying three (t, intensity)-
                 * points, where time is counted from the very beginning in SI and the
                 * intensity (yes, intensity, not amplitude) is given in multiples of the main
                 * peak.
                 *
                 * Be careful - problematic for few cycle pulses. Thought the rest is cloned
                 * from laserWavepacket, the correctionFactor is not included (this made a
                 * correction to the laser phase, which is necessary for very short pulses,
                 * since otherwise a test particle is, after the laser pulse has passed, not
                 * returned to immobility, as it should). Since the analytical solution is
                 * only implemented for the Gaussian regime, and we have mostly exponential
                 * regimes here, it was not retained here.
                 *
                 * A Gaussian peak (optionally lengthened by a plateau) is preceded by
                 * two pieces of exponential preramps, defined by 3 (time, intensity)-
                 * -points.
                 *
                 * The first two points get connected by an exponential, the 2nd and
                 * 3rd point are connected by another exponential, which is then
                 * extrapolated to the peak. The Gaussian is added everywhere, but
                 * typically contributes significantly only near the peak.
                 * It is advisable to set the third point far enough from the plateau
                 * (approx 3*FWHM), then the contribution from the Gaussian is
                 * negligible there, and the intensity can be set as measured from the
                 * laser profile.
                 *
                 * Optionally a Gaussian prepulse can be added, given by the parameters
                 * of the relative intensity and time point.
                 * The time of the prepulse and the three preramp points are given in
                 * SI, the intensities are given as multiples of the peak intensity.
                 *
                 * @tparam T_Params class parameter to configure the pulse profile,
                 *                  see members of defaults::ExpRampWithPrepulseParam
                 *                  for required members.
                 *                  The focus position should be at or near the generation surface as the
                 *                  laser equations are formulated for this case.
                 */
                template<typename T_Params = defaults::ExpRampWithPrepulseParam>
                struct ExpRampWithPrepulse;


                /** The temporal envelope part of ExpRampWithPrepulse
                 *
                 *  To be used with GaussianPulse (Gaussian beam) for focusing.
                 * @tparam T_Params param class, see defaults namespace for reference
                 */
                template<typename T_Params = defaults::ExpRampWithPrepulseLongitudinalParam>
                struct ExpRampWithPrepulseLongitudinal;
            } // namespace profiles
        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
