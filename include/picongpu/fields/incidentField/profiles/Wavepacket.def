/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch,
 *                     Stefan Tietze, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            namespace profiles
            {
                namespace defaults
                {
                    struct WavepacketParam : public BaseParam
                    {
                        /** Stretch temporal profile by a constant plateau between the up and downramp
                         *
                         *  unit: seconds
                         */
                        static constexpr float_64 LASER_NOFOCUS_CONSTANT_SI
                            = 7.0 * WAVE_LENGTH_SI / ::picongpu::sim.si.getSpeedOfLight();

                        /** Beam waist: distance from the axis where the pulse intensity (E^2)
                         *              decreases to its 1/e^2-th part,
                         *              at the focus position of the laser
                         *
                         * AXIS_1 is directed according to POLARISATION_DIRECTION parameters.
                         * AXIS_2 is a cross product of the propagation direction and AXIS_1.
                         *
                         * For 2d simulations W0_AXIS_2_SI must be defined but its value has no effect.
                         *
                         * unit: meter
                         */
                        static constexpr float_64 W0_AXIS_1_SI = 4.246e-6;
                        static constexpr float_64 W0_AXIS_2_SI = W0_AXIS_1_SI;

                        /** The laser pulse will be initialized PULSE_INIT times of the PULSE_DURATION after
                         * TIME_DELAY_SI
                         *
                         *  unit: none
                         */
                        static constexpr float_64 PULSE_INIT = 20.0;

                        /** laser phase shift (no shift: 0.0)
                         *
                         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
                         *
                         * unit: rad, periodic in 2*pi
                         */
                        static constexpr float_X LASER_PHASE = 0.0;
                    };
                } // namespace defaults

                /** Wavepacket with Gaussian spatial and temporal envelope tag
                 *
                 * @tparam T_Params class parameter to configure the Wavepacket profile,
                 *                  see members of wavepacket::defaults::WavepacketParam for
                 *                  required members.
                 *                  The focus position should be at or near the generation surface as the
                 *                  laser equations are formulated for this case.
                 */
                template<typename T_Params = defaults::WavepacketParam>
                struct Wavepacket;
            } // namespace profiles
        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
