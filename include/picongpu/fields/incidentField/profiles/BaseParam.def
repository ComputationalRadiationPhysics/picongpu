/* Copyright 2023-2024 Sergei Bastrakov, Finn-Ole Carstens, Julian Lenz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <nlohmann/json.hpp>
namespace picongpu
{
    using std::vector;
    namespace fields
    {
        namespace incidentField
        {
            /** Laser polarization types
             *
             * It only defines the type between linear and circular.
             * The direction of linear polarization and one of the axes of circular polarization
             * is defined by POLARISATION_DIRECTION_{X|Y|Z} members of parameter structure.
             * For circular case, the second axis is taken as cross(direction, first axis).
             *
             * Note: we use spelling 'Polarisation' for consistency with other lasers.
             */
            enum class PolarisationType
            {
                Linear,
                Circular
            };


            /** Coordinate system origin
             */
            enum class Origin
            {
                //! origin of the total domain
                Zero,
                //! the center of the global domain
                Center
            };

            namespace profiles
            {
                /** Base structure for parameters of all lasers
                 *
                 * The particular used parameter structures do not have to inherit this, but must define same members
                 * with same meaning.
                 */
                struct BaseParam
                {
                    /** Wave length along propagation direction
                     *
                     * unit: m
                     */
                    static constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

                    /** Max amplitude of E field
                     *
                     * To convert the normalized laser strength parameter a0 to Volt per meter:
                     * calculate A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized),
                     * calculate UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI
                     *     ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::sim.si.getSpeedOfLight()
                     *     ::picongpu::sim.si.getSpeedOfLight() / ::picongpu::sim.si.getElectronCharge();
                     * AMPLITUDE_SI = A0 * UNITCONV_A0_to_Amplitude_SI
                     *
                     * unit: Volt / meter
                     */
                    static constexpr float_64 AMPLITUDE_SI = 1.0e6;

                    /** Pulse duration: sigma of std. gauss for intensity (E^2)
                     *  PULSE_DURATION_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
                     *                                          [    2.354820045     ]
                     *  Info:             FWHM_of_Intensity = FWHM_Illumination
                     *                      = what an experimentalist calls "pulse duration"
                     *  unit: seconds (1 sigma)
                     */
                    static constexpr float_64 PULSE_DURATION_SI = 10.615e-15 / 4.0;

                    /** Laser phase shift (no shift: 0.0)
                     *
                     * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
                     *
                     * unit: rad, periodic in 2*pi
                     */
                    static constexpr float_X LASER_PHASE = 0.0_X;

                    /** Unit propagation direction vector
                     *
                     * Norm of this vector must be 1.0.
                     * (Normalization is required on a user side as internally it is awkward to do with the
                     * static-constexpr style of using parameters.)
                     *
                     * For 2d simulations, z component is not required, will be always set to 0.
                     *
                     * unit: none
                     *
                     * @{
                     */
                    static constexpr float_64 DIRECTION_X = 0.0;
                    static constexpr float_64 DIRECTION_Y = 1.0;
                    static constexpr float_64 DIRECTION_Z = 0.0;
                    /** @} */

                    /** Focus position relative to FOCUS_ORIGIN_*
                     *
                     * "Non-focused" lasers should have it set at or near the generation surface where the laser enters
                     * the domain. The position does not have to be inside the domain.
                     *
                     * The focus position and propagation direction together define the entry point of laser to
                     * the generation surface.
                     * So they also control the laser center at the generation plane, not just a shift inwards.
                     *
                     * FOCUS_ORIGIN_X, FOCUS_ORIGIN_Y or FOCUS_ORIGIN_Z is not defined the origin will be Origin::Zero
                     * (total domain).
                     *
                     * For 2d simulations, z component has no effect and is not required.
                     *
                     * unit: m
                     *
                     * @{
                     */
                    static constexpr float_64 FOCUS_POSITION_X_SI = 8.0e-5;
                    static constexpr float_64 FOCUS_POSITION_Y_SI = 5.0e-5;
                    static constexpr float_64 FOCUS_POSITION_Z_SI = 8.0e-5;
                    /** @} */

                    /** Origin of the laser
                     *
                     * possible values:
                     *   - Origin::Center center of the global coordinate system
                     *   - Origin::Zero total coordinate origin
                     *
                     * @attention FOCUS_ORIGIN_X, FOCUS_ORIGIN_y, FOCUS_ORIGIN_Z are optional
                     */
                    static constexpr Origin FOCUS_ORIGIN_X = Origin::Zero;
                    static constexpr Origin FOCUS_ORIGIN_Y = Origin::Zero;
                    static constexpr Origin FOCUS_ORIGIN_Z = Origin::Zero;
                    /** @} */

                    /** Time delay
                     * For e.g. probe pulses, that enter the simulation volume later in time.
                     * The laser initiation will be started after the time delay.
                     * The delay must be positive.
                     *
                     * unit: time
                     *
                     * @attention TIME_DELAY_SI is optional, default value is 0
                     */
                    static constexpr float_64 TIME_DELAY_SI = 0.0;

                    /** E polarization type
                     *
                     * Note: we use spelling 'Polarisation' for consistency with other lasers.
                     */
                    static constexpr PolarisationType Polarisation = PolarisationType::Linear;

                    /** Unit E polarization direction
                     *
                     * Must be orthogonal to the propagation direction.
                     * For linear polarization, E vectors will be aligned to this direction.
                     * For circular polarization, that is one of its axes, with the other axis being
                     * cross(propagation direction, polarization direction).
                     *
                     * Norm of this vector must be 1.0.
                     * (Normalization is required on a user side as internally it is awkward to do with the
                     * static-constexpr style of using parameters.)
                     *
                     * Note: we use spelling 'Polarisation' for consistency with other lasers.
                     *
                     * unit: none
                     *
                     * @{
                     */
                    static constexpr float_64 POLARISATION_DIRECTION_X = 1.0;
                    static constexpr float_64 POLARISATION_DIRECTION_Y = 0.0;
                    static constexpr float_64 POLARISATION_DIRECTION_Z = 0.0;
                    /** @} */

                    template<typename My = BaseParam>
                    static nlohmann::json metadata()
                    {
                        // We make this a function template in order to gain control over the type we are applying this
                        // to. A derived class of the BaseParam should similarly make their own `.metadata()` member a
                        // `template<typename My =Derived>` and should use `BaseParam::metadata<My>()` as a starting
                        // point for customisation.

                        auto result = nlohmann::json::object();
                        result["polarisation"]["direction"] = vector<float_64>{
                            {My::POLARISATION_DIRECTION_X,
                             My::POLARISATION_DIRECTION_Y,
                             My::POLARISATION_DIRECTION_Z}};
                        result["polarisation"]["type"]
                            = My::Polarisation == PolarisationType::Linear ? "linear" : "circular";
                        return result;
                    }
                };
            } // namespace profiles
        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
