/* Copyright 2020-2022 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/fields/differentiation/Derivative.hpp"
#include "picongpu/fields/incidentField/DerivativeCoefficients.hpp"

#include <cstdint>
#include <type_traits>

/** @note In this file we use camelCase "updatedField" in both code and comments to denote field E or B that is being
 * updated (i.e. corrected) in the kernel. The other of the two fields is called "incidentField". And for the
 * incidentField source we explicitly use "functor" to not confuse it with the field itself. Please refer to
 * https://picongpu.readthedocs.io/en/latest/models/total_field_scattered_field.html for theoretical background of this
 * procedure.
 */

namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            namespace detail
            {
                /** Helper type to check if T_FunctorIncidentField implements getComponent<T_component>()
                 *
                 * Is void for those types, ill-formed otherwise.
                 *
                 * @tparam T_FunctorIncidentField incident field source functor type
                 * @tparam T_component field component, 0 = x, 1 = y, 2 = z
                 */
                template<typename T_FunctorIncidentField, uint32_t T_component>
                using HasGetComponent
                    = std::void_t<decltype(alpaka::core::declval<T_FunctorIncidentField>()
                                               .template getComponent<T_component>(floatD_X::create(0.0_X)))>;

                /** Functor to get the chosen component of the given incident field functor at the given position
                 *
                 * The general implementation calculates full field and takes the component.
                 * In case a functor implements getComponent<T_component>(), that will be called.
                 * @see FunctorIncidentFieldConcept for rationale and interface requirements.
                 *
                 * @tparam T_FunctorIncidentField incident field source functor type
                 * @tparam T_component field component, 0 = x, 1 = y, 2 = z
                 * @tparam T_Sfinae parameter to SFINAE-switch between the cases
                 *
                 * @{
                 */

                template<typename T_FunctorIncidentField, uint32_t T_component, typename T_Sfinae = void>
                struct GetComponent
                {
                    HDINLINE auto operator()(T_FunctorIncidentField const& functor, floatD_X const& totalCellIdx) const
                    {
                        return functor(totalCellIdx)[T_component];
                    }
                };

                template<typename T_FunctorIncidentField, uint32_t T_component>
                struct GetComponent<
                    T_FunctorIncidentField,
                    T_component,
                    HasGetComponent<T_FunctorIncidentField, T_component>>
                {
                    HDINLINE auto operator()(T_FunctorIncidentField const& functor, floatD_X const& totalCellIdx) const
                    {
                        return functor.template getComponent<T_component>(totalCellIdx);
                    }
                };

                /** @} */

                /** Helper functor for in-kernel update of the given field using the given incidentField functor
                 *
                 * Performs update by adding terms with the incidentField.
                 * The positions, indices and coefficients for these terms are determined by members.
                 *
                 * @tparam T_UpdatedFieldBox updatedField box type
                 * @tparam T_CurlIncidentField curl(incidentField) functor type
                 * @tparam T_FunctorIncidentField incidentField source functor type
                 * @tparam T_axis boundary axis, 0 = x, 1 = y, 2 = z
                 */
                template<
                    typename T_UpdatedFieldBox,
                    typename T_CurlIncidentField,
                    typename T_FunctorIncidentField,
                    uint32_t T_axis>
                struct UpdateFunctor
                {
                    /** Create an update functor instance on the host side for the given time step
                     *
                     * It should then be passed to the kernel by value
                     *
                     * @param currentStep current time step index, note that it is fractional
                     * @param directionValue direction of the incidentField propagation:
                     *                       +1.0_X (from the min boundary inwards) or -1.0_X (from the max boundary
                     * inwards)
                     * @param curlCoefficient coefficient in front of the curl(incidentField) in the Maxwell's
                     * equations
                     * @param unitField conversion factor from SI to internal units,
                     *                  field_internal = field_SI / unitField
                     */
                    HINLINE UpdateFunctor(
                        float_X const currentStep,
                        float_X const directionValue,
                        float_X const curlCoefficient,
                        float3_64 const& unitField)
                        : functorIncidentField(currentStep, unitField)
                        , direction(directionValue)
                        , baseCoefficient(getBaseCoefficient(directionValue, curlCoefficient))
                        , isLastLocalDomain(pmacc::math::Vector<bool, simDim>::create(false))
                    {
                    }

                    HDINLINE UpdateFunctor(UpdateFunctor const&) = default;

                    /** Apply correction to a single value of updatedField due to incidentField
                     *
                     * Both indices are in the local domain, including guards.
                     *
                     * @param beginGridIdx grid index of the first updatedField value to be corrected at all
                     * (not necessarily by this call)
                     * @param updatedGridIdx grid index of updatedField to be corrected by this function
                     * @param isLastUpdatedCell whether the cell is the last updated globally along each direction,
                     *                          note it is always 3d, for 2d the last element must be false
                     */
                    HDINLINE void operator()(
                        pmacc::DataSpace<simDim> const& beginGridIdx,
                        pmacc::DataSpace<simDim> const& updatedGridIdx,
                        pmacc::math::Vector<bool, 3> const& isLastUpdatedCell) const
                    {
                        // Determine Huygens surface position for the current updatedField value
                        auto huygensSurfaceIdx = updatedGridIdx;
                        huygensSurfaceIdx[T_axis] = beginGridIdx[T_axis] + margin - 1;
                        // Fractional since the later shift is fractional
                        auto const incidentFieldShiftBase = pmacc::algorithms::precisionCast::precisionCast<float_X>(
                            huygensSurfaceIdx + gridIdxShift);
                        auto const incidentFieldShift1 = incidentFieldShiftBase + inCellShift1;
                        auto const incidentFieldShift2 = incidentFieldShiftBase + inCellShift2;
                        auto const updatedFieldShift = (updatedGridIdx - huygensSurfaceIdx)[T_axis];
                        updatedField(updatedGridIdx) += getUpdatedFieldCorrection(
                            updatedFieldShift,
                            incidentFieldShift1,
                            incidentFieldShift2,
                            isLastUpdatedCell);
                    }

                    //! UpdatedField box
                    T_UpdatedFieldBox updatedField;

                    //! Derivative functor along T_axis type
                    using DerivativeFunctor
                        = differentiation::DerivativeFunctor<typename T_CurlIncidentField::Derivative, T_axis>;

                    //! Derivative coefficients type
                    using Coefficients = DerivativeCoefficients<DerivativeFunctor, T_axis>;

                    //! Number of derivative coefficients type
                    using NumCoefficients = typename Coefficients::Size;

                    //! Defivative coefficients instance
                    Coefficients const derivativeCoefficients;

                    /** Margin of the scheme along T_axis
                     *
                     * Signed to simplify index calculations with shifts of both signs
                     */
                    static constexpr int32_t margin = pmacc::math::CT::At_c<NumCoefficients, T_axis>::type::value;

                    //! IncidentField functor
                    T_FunctorIncidentField functorIncidentField;

                    /** Direction of the incidentField propagation
                     *
                     * +1._X is positive direction (from the min boundary inwards).
                     * -1._X is negative direction (from the max boundary inwards).
                     */
                    float_X const direction;

                    /** Parameters of the update to be used for each affected updatedField value.
                     *
                     * We formulate correction of the two affected components of updatedField as follows:
                     * updatedField(gridIdx)[incidentComponent2] += baseCoefficient * sum(
                     *     derivativeCoefficients(idx) * functorIncidentField(idx + inCellShift1)[incidentComponent1];
                     *     idx is in range around gridIdx depending on T_CurlIncidentField)
                     * updatedField(gridIdx)[incidentComponent1] += -baseCoefficient * sum(
                     *     derivativeCoefficients(idx) * functorIncidentField(idx + inCellShift2)[incidentComponent2];
                     *     idx is in range around gridIdx depending on T_CurlIncidentField)
                     *
                     * The update only uses tangential components of both updatedField and incidentField, in a cross
                     * combination. Thus, updateField[T_axis] is never changed and functorIncidentField()[T_axis] is
                     * never used. incidentComponent1, 2 are different and both not equal to T_axis. Which of the
                     * two incident field components is called 1 or 2 is selected so that the equation above holds.
                     * inCellShift1, 2 match the Yee grid layout for incidentField for incidentComponent1, 2.
                     *
                     * For the last cells updated along axes other than T_axis, only some field components are updated.
                     * This is due to configuration of the Yee grid and indexing used. This special case is handled
                     * inside the kernel by effectively skipping some updates.
                     *
                     * @{
                     */

                    //! Base coefficient for the update
                    float_X const baseCoefficient;

                    /** Indices of the incidentField components for the two terms
                     *
                     * Note the intentional cross combination, this is to match the update scheme stated above.
                     */
                    static constexpr uint32_t incidentComponent1 = (T_axis + 2) % 3;
                    static constexpr uint32_t incidentComponent2 = (T_axis + 1) % 3;

                    //! Shifts inside the cell for two functorIncidentField invocations, in cells
                    floatD_X inCellShift1, inCellShift2;

                    //! @}

                    //! Index shift: totalCellIdx (that a user functor gets) = gridIdx + gridIdxShirt
                    pmacc::DataSpace<simDim> gridIdxShift;

                    //! Boundary axis, 0 = x, 1 = y, 2 = z
                    static constexpr uint32_t axis = T_axis;

                    //! Whether the updatedField is total or scattered
                    bool isUpdatedFieldTotal;

                    //! Whether the local domain is last one along each axis
                    pmacc::math::Vector<bool, simDim> isLastLocalDomain;

                private:
                    /* Calculate base coefficient value for the given parameters
                     *
                     * This coefficient combines the curl coefficient, correct sign, and relevant grid step.
                     *
                     * @param directionValue direction of the incidentField propagation:
                     *                       +1.0_X (from the min boundary inwards) or -1.0_X (from the max boundary
                     * inwards)
                     * @param curlCoefficient coefficient in front of the curl(incidentField) in the Maxwell's
                     * equations
                     */
                    static auto getBaseCoefficient(float_X const direction, float_X const curlCoefficient)
                    {
                        auto const directionSign = (direction > 0.0_X ? 1.0_X : -1.0_X);
                        auto const baseCoefficient = curlCoefficient / cellSize[T_axis] * directionSign;
                        return baseCoefficient;
                    }

                    /** Calculate correction for the updatedField due to incidentField for the given distance
                     * updatedFieldShift from Huygens surface.
                     *
                     * All shifts are in cells, relative to the base position, i.e. the update position used for the
                     * Yee solver (with updatedFieldShift==0 as the only value for this solver).
                     *
                     * The correction is calculated as follows.
                     * We consider all grid nodes of the incidentField involved in finite-difference calculation of
                     * d(incidentField)/d(axis) at the given position of the updatedField.
                     * Out of those nodes, we only use ones located near and on the opposite side of the Huygens
                     * surface from the updatedField position. The number of such nodes depends on the derivative
                     * operators used and the given value of updatedFieldShift, it varies between 1 and (operator width
                     * - 1).
                     *
                     * IncidentField values are evaluated on those places and accumulated with coefficients derived
                     * from derivativeCoefficients according to the scheme described earlier in this struct.
                     * The total coefficient in front of incidentField summed over all updatedFieldShift values
                     * is the same for all FDTD-type Maxwell's solvers (i.e. T_CurlIncidentField).
                     * Those summed coefficients are by absolute value equal to baseCoefficient and are
                     * c^2 * dt / cellSize[axis] for updating the E field and dt / d(axis) for updating the B field.
                     * The difference between solvers is basically in how this value is scattered between the nodes.
                     * The scattering coefficients are taken from the finite-difference derivative operator used.
                     *
                     * @param updatedFieldShift shift of the updatedField along the axis relative to the base position
                     * @param incidentFieldShift1 base shift of the first incidentField component
                     * @param incidentFieldShift2 base shift of the second incidentField component
                     * @param isLastUpdatedCell whether the cell is last updated globally along each direction,
                     *                          note it is always 3d, for 2d the last element must be false
                     */
                    HDINLINE float3_X getUpdatedFieldCorrection(
                        int32_t updatedFieldShift,
                        floatD_X const& incidentFieldShift1,
                        floatD_X const& incidentFieldShift2,
                        pmacc::math::Vector<bool, 3> const& isLastUpdatedCell) const
                    {
                        auto result = float3_X::create(0.0_X);
                        auto incidentIdxShift = float3_X::create(0.0_X);
                        incidentIdxShift[axis] = getInitialIncidentFieldShift(updatedFieldShift);
                        auto const incidentIdxShiftIncrement = getIncidentFieldShiftIncrement(updatedFieldShift);

                        /* To unify implementation for 2d and 3d, derivative coefficients and this function always
                         * operate as if in 3d.
                         * For 2d the z loop is always for a single iteration.
                         * The resulting 3d indices are shrinked to simDim.
                         * Note the intentional cross combination here, see declaration of incidentComponent1, 2.
                         */
                        constexpr auto dir1 = incidentComponent2;
                        constexpr auto dir2 = incidentComponent1;
                        constexpr int32_t sizeDir1 = pmacc::math::CT::At_c<NumCoefficients, dir1>::type::value;
                        constexpr int32_t sizeDir2 = pmacc::math::CT::At_c<NumCoefficients, dir2>::type::value;
                        /* Due to indexing of the Yee grid, at the last updated cell we must update only some of the
                         * transversal field components and not all of them.
                         * These guard variables take care of that and isolate this logic here, so that the main update
                         * is always expressed in vector form as if for all components.
                         */
                        bool const applyIncidentField1
                            = ((isUpdatedFieldTotal && !isLastUpdatedCell[incidentComponent2])
                               || (!isUpdatedFieldTotal && !isLastUpdatedCell[incidentComponent1]));
                        bool const applyIncidentField2
                            = ((isUpdatedFieldTotal && !isLastUpdatedCell[incidentComponent1])
                               || (!isUpdatedFieldTotal && !isLastUpdatedCell[incidentComponent2]));
                        for(int32_t axisShift = abs(updatedFieldShift); axisShift < margin; axisShift++)
                        {
                            auto coeffIdx = pmacc::DataSpace<3>::create(0);
                            coeffIdx[axis] = axisShift;
                            incidentIdxShift[dir1] = static_cast<float_X>(1 - sizeDir1);
                            for(int32_t dir1Shift = 1 - sizeDir1; dir1Shift < sizeDir1; dir1Shift++)
                            {
                                coeffIdx[dir1] = abs(dir1Shift);
                                incidentIdxShift[dir2] = static_cast<float_X>(1 - sizeDir2);
                                for(int32_t dir2Shift = 1 - sizeDir2; dir2Shift < sizeDir2; dir2Shift++)
                                {
                                    coeffIdx[dir2] = abs(dir2Shift);
                                    // Implement the update scheme, multiply by baseCoefficient after the loops
                                    auto const derivativeCoefficient
                                        = derivativeCoefficients.value[coeffIdx[0]][coeffIdx[1]][coeffIdx[2]];
                                    if(applyIncidentField1)
                                        result[dir1] += derivativeCoefficient
                                            * getIncidentFieldComponent1(
                                                            incidentFieldShift1 + incidentIdxShift.shrink<simDim>());
                                    if(applyIncidentField2)
                                        result[dir2] += derivativeCoefficient
                                            * getIncidentFieldComponent2(
                                                            incidentFieldShift2 + incidentIdxShift.shrink<simDim>());
                                    incidentIdxShift[dir2] += 1.0_X;
                                }
                                incidentIdxShift[dir1] += 1.0_X;
                            }
                            incidentIdxShift[axis] += incidentIdxShiftIncrement;
                        }
                        result[dir1] *= baseCoefficient;
                        result[dir2] *= -baseCoefficient;
                        return result;
                    }

                    /** Calculate incidentField shift increment for the given updatedField shift
                     *
                     * Both shifts are along T_axis, in cells, relative to the scheme for the classic Yee solver.
                     * The incidentField shift is moving the opposite side from the updatedField shift.
                     * For zero update field shift, this side is always towards outwards and
                     * depending on TF or SF region, it aligns or counter-aligns with this->direction.
                     *
                     * @param updatedFieldShift shift of the updatedField along the axis relative to the base position
                     */
                    HDINLINE float_X getIncidentFieldShiftIncrement(int32_t updatedFieldShift) const
                    {
                        if(updatedFieldShift < 0)
                            return 1.0_X;
                        else if(updatedFieldShift > 0)
                            return -1.0_X;
                        else
                            return isUpdatedFieldTotal ? -direction : direction;
                    }

                    /** Calculate initial incidentField shift for the given updatedField shift
                     *
                     * Both shifts are along T_axis, in cells, relative to the scheme for the classic Yee solver.
                     * The incidentField shift is moving the opposite side from the updatedField shift.
                     * It has to be adjusted by one based on TF or SF region and direction.
                     *
                     * @param updatedFieldShift shift of the updatedField along the axis relative to the base position
                     */
                    HDINLINE float_X getInitialIncidentFieldShift(int32_t updatedFieldShift) const
                    {
                        auto result = static_cast<float_X>(-updatedFieldShift);
                        if((isUpdatedFieldTotal) && (updatedFieldShift * direction > 0))
                            result += direction;
                        if((!isUpdatedFieldTotal) && (updatedFieldShift * direction < 0))
                            result -= direction;
                        return result;
                    }

                    /** Get individual components of field calculated by the incident field functor
                     *
                     * @param totalCellIdx cell index in the total domain
                     *
                     * @{
                     */

                    HDINLINE auto getIncidentFieldComponent1(floatD_X const& totalCellIdx) const
                    {
                        return GetComponent<T_FunctorIncidentField, incidentComponent1>{}(
                            functorIncidentField,
                            totalCellIdx);
                    }

                    HDINLINE auto getIncidentFieldComponent2(floatD_X const& totalCellIdx) const
                    {
                        return GetComponent<T_FunctorIncidentField, incidentComponent2>{}(
                            functorIncidentField,
                            totalCellIdx);
                    }

                    /** @} */
                };

                /** Kernel to apply incidentField
                 *
                 * @tparam T_BlockDescription domain description
                 */
                template<typename T_BlockDescription>
                struct ApplyIncidentFieldKernel
                {
                    /** Run the incidentField kernel
                     *
                     * The kernel must be called for all grid values that need an update.
                     *
                     * @tparam T_Worker lockstep worker type
                     * @tparam T_UpdateFunctor update functor type
                     *
                     * @param acc alpaka accelerator
                     * @param functor update functor
                     * @param beginGridIdx begin active grid index, in the local domain with guards
                     * @param endGridIdx end active grid index, in the local domain with guards
                     */
                    template<typename T_Worker, typename T_UpdateFunctor>
                    HDINLINE void operator()(
                        T_Worker const& worker,
                        T_UpdateFunctor const functor,
                        DataSpace<simDim> beginGridIdx,
                        DataSpace<simDim> endGridIdx) const
                    {
                        constexpr uint32_t planeSize = pmacc::math::CT::volume<T_BlockDescription>::type::value;


                        // Offset of the superCell (in cells, without any guards) to the origin of the local domain
                        DataSpace<simDim> supercellOffsetCells
                            = DataSpace<simDim>(cupla::blockIdx(worker.getAcc())) * SuperCellSize::toRT();

                        lockstep::makeForEach<planeSize>(worker)(
                            [&](uint32_t const linearIdx)
                            {
                                auto cellIdxInSuperCell
                                    = DataSpaceOperations<simDim>::template map<T_BlockDescription>(linearIdx);
                                auto const updatedGridIdx = beginGridIdx + supercellOffsetCells + cellIdxInSuperCell;

                                /* The index may be outside since the active area is not generally a multiple of block
                                 * size. Globally last updated cells may be treated differently in the functor, prepare
                                 * this information here.
                                 */
                                bool isInside = true;
                                auto isLastUpdatedCell = pmacc::math::Vector<bool, 3>::create(false);
                                for(uint32_t d = 0; d < simDim; d++)
                                {
                                    isInside = isInside && (updatedGridIdx[d] < endGridIdx[d]);
                                    isLastUpdatedCell[d]
                                        = functor.isLastLocalDomain[d] && (updatedGridIdx[d] == endGridIdx[d] - 1);
                                }
                                if(isInside)
                                    functor(beginGridIdx, updatedGridIdx, isLastUpdatedCell);
                            });
                    }
                };

            } // namespace detail
        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
