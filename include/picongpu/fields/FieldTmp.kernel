/* Copyright 2013-2022 Axel Huebl, Rene Widera, Marco Garten, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "FieldTmp.hpp"
#include "picongpu/algorithms/Set.hpp"

#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>


namespace picongpu
{
    using namespace pmacc;

    /** discretized field-representation of a derived species property
     *
     * The derived property of all particles from a species is evaluated with
     * the species' shape to the field grid and reduced of all contributing
     * particles.
     *
     * @tparam T_BlockDescription stance area description of the user functor
     */
    template<typename T_BlockDescription>
    struct KernelComputeSupercells
    {
        /** derive species property
         *
         * @tparam T_TmpBox pmacc::DataBox, type of the scalar field box
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_FrameSolver functor type to operate on a particle frame
         * @tparam T_Mapping mapper functor type
         * @tparam T_ParticleFilter particle filter type
         *
         * @param fieldJ field with particle current
         * @param boxPar particle memory
         * @param frameSolver functor to calculate the current for a frame
         * @param mapper functor to map a block to a supercell
         * @param particleFilter filter used to choose particles contributing to field value
         */
        template<
            typename T_TmpBox,
            typename T_ParBox,
            typename T_FrameSolver,
            typename T_Mapping,
            typename T_Worker,
            typename T_ParticleFilter>
        DINLINE void operator()(
            T_Worker const& worker,
            T_TmpBox fieldTmp,
            T_ParBox boxPar,
            T_FrameSolver frameSolver,
            T_ParticleFilter particleFilter,
            T_Mapping mapper) const
        {
            using FramePtr = typename T_ParBox::FramePtr;
            using SuperCellSize = typename T_BlockDescription::SuperCellSize;

            DataSpace<simDim> const superCellIdx(
                mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            auto accFilter = particleFilter(worker, superCellIdx - mapper.getGuardingSuperCells());

            namespace particleAccAlgos = pmacc::particles::algorithm::acc;
            auto forEachParticle
                = particleAccAlgos::makeForEach<particleAccAlgos::Forward>(worker, boxPar, superCellIdx);

            // end kernel if we have no particles
            if(!forEachParticle.hasParticles())
                return;

            auto cachedVal = CachedBox::create<0, typename T_TmpBox::ValueType>(worker, T_BlockDescription{});
            Set<typename T_TmpBox::ValueType> set(float_X(0.0));

            auto collective = makeThreadCollective<T_BlockDescription>();
            collective(worker, set, cachedVal);

            worker.sync();

            forEachParticle([&accFilter, &cachedVal, &frameSolver](auto const& lockstepWorker, auto& particle)
                            { frameSolver(lockstepWorker, particle, SuperCellSize::toRT(), accFilter, cachedVal); });

            worker.sync();

            pmacc::math::operation::Add add;
            DataSpace<simDim> const superCellCellOffset = superCellIdx * SuperCellSize::toRT();
            auto fieldTmpBlock = fieldTmp.shift(superCellCellOffset);
            collective(worker, add, fieldTmpBlock, cachedVal);
        }
    };

    /** Kernel used in the modifyField method
     *
     * @tparam T_ModifyingOperation a binary operation used to modify one field by another one
     * @tparam T_SuperCellSize compile-time  supercell size vector
     */
    template<typename T_ModifyingOperation, typename T_SuperCellSize>
    struct ModifyByFieldKernel
    {
        /** Kernel implementation
         *
         * @tparam T_Worker lockstep worker type
         * @tparam T_Mapper mapper type
         * @tparam T_Box1 1st data box type
         * @tparam T_Box2 2nd data box type
         * @param worker lockstep worker
         * @param mapper functor to map a block to a supercell
         * @param box1 data box of the first field
         * @param box2 data box of the second field
         */
        template<typename T_Worker, typename T_Mapper, typename T_Box1, typename T_Box2>
        DINLINE void operator()(T_Worker const& worker, T_Mapper const mapper, T_Box1 box1, T_Box2 const& box2) const
        {
            // Shift the fields to the supercell processed by current block.
            DataSpace<simDim> const block(
                mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));
            DataSpace<simDim> const blockCell = block * T_SuperCellSize::toRT();
            auto box1Block = box1.shift(blockCell);
            auto box2Block = box2.shift(blockCell);

            // Call the binary operation for a pair of field values for each cell in the supercell.
            using BlockAreaConfiguration = pmacc::SuperCellDescription<T_SuperCellSize>;
            auto applyOperationToCells = makeThreadCollective<BlockAreaConfiguration>();
            T_ModifyingOperation binaryOperation;
            applyOperationToCells(worker, binaryOperation, box1Block, box2Block);
        }
    };

} // namespace picongpu
