/* Copyright 2013-2019 Axel Huebl, Rene Widera, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "FieldTmp.hpp"
#include "picongpu/algorithms/Set.hpp"

#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/nvidia/functors/Add.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/mappings/threads/ForEachIdx.hpp>
#include <pmacc/mappings/threads/IdxConfig.hpp>


namespace picongpu
{
    using namespace pmacc;

    /** discretized field-representation of a derived species property
     *
     * The derived property of all particles from a species is evaluated with
     * the species' shape to the field grid and reduced of all contributing
     * particles.
     *
     * @tparam T_numWorkers number of workers
     * @tparam T_BlockDescription stance area description of the user functor
     */
    template<
        uint32_t T_numWorkers,
        typename T_BlockDescription
    >
    struct KernelComputeSupercells
    {
        /** derive species property
         *
         * @tparam T_TmpBox pmacc::DataBox, type of the scalar field box
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_FrameSolver functor type to operate on a particle frame
         * @tparam T_Mapping mapper functor type
         *
         * @param fieldJ field with particle current
         * @param boxPar particle memory
         * @param frameSolver functor to calculate the current for a frame
         * @param mapper functor to map a block to a supercell
         */
        template<
            typename T_TmpBox,
            typename T_ParBox,
            typename T_FrameSolver,
            typename T_Mapping,
            typename T_Acc
        >
        DINLINE void operator()(
            T_Acc const & acc,
            T_TmpBox fieldTmp,
            T_ParBox boxPar,
            T_FrameSolver frameSolver,
            T_Mapping mapper
        ) const
        {
            using namespace mappings::threads;

            using FramePtr = typename T_ParBox::FramePtr;
            using SuperCellSize = typename T_BlockDescription::SuperCellSize;

            constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume< SuperCellSize >::type::value;
            constexpr uint32_t numWorkers = T_numWorkers;

            uint32_t const workerIdx = threadIdx.x;

            DataSpace< simDim > const block( mapper.getSuperCellIndex( DataSpace< simDim > ( blockIdx ) ) );

            FramePtr frame;
            lcellId_t particlesInSuperCell;

            frame = boxPar.getLastFrame( block );
            particlesInSuperCell = boxPar.getSuperCell( block ).getSizeLastFrame( );

            if( !frame.isValid() )
                return; //end kernel if we have no frames

            auto cachedVal = CachedBox::create <
                0,
                typename T_TmpBox::ValueType
            > (
                acc,
                T_BlockDescription{ }
            );
            Set< typename T_TmpBox::ValueType > set( float_X( 0.0 ) );

            ThreadCollective<
                T_BlockDescription,
                numWorkers
            > collective( workerIdx );
            collective(
                acc,
                set,
                cachedVal
            );

            __syncthreads( );

            while( frame.isValid() )
            {
                ForEachIdx<
                    IdxConfig<
                        cellsPerSuperCell,
                        numWorkers
                    >
                >{ workerIdx }(
                    [&](
                        uint32_t const linearIdx,
                        uint32_t const
                    )
                    {
                        if( linearIdx < particlesInSuperCell )
                        {
                            frameSolver(
                                acc,
                                *frame,
                                linearIdx,
                                SuperCellSize::toRT(),
                                cachedVal
                            );
                        }
                    }
                );

                frame = boxPar.getPreviousFrame( frame );
                particlesInSuperCell = cellsPerSuperCell;


            }

            __syncthreads( );

            nvidia::functors::Add add;
            DataSpace< simDim > const blockCell = block * SuperCellSize::toRT( );
            auto fieldTmpBlock = fieldTmp.shift( blockCell );
            collective(
                acc,
                add,
                fieldTmpBlock,
                cachedVal
            );
        }
    };

} // namespace picongpu
