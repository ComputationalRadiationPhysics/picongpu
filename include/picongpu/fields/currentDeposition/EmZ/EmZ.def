/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include "picongpu/simulation_defines.hpp"


namespace picongpu
{
namespace currentSolver
{

namespace emz
{
    template<
        typename ParticleAssign,
        int T_begin,
        int T_end,
        uint32_t T_dim = simDim
    >
    struct DepositCurrent;
} //namespace emz

/** EmZ (Esirkepov meets ZigZag) current deposition
 *
 * Deposit the particle current with a mixed algorithm based on Esirkepov and
 * the ZigZag way splitting.
 * EmZ supports arbitrary symmetric shapes and 2D/3D cartesian grids.
 *
 * ZigZag publications:
 * 1. order paper: "A new charge conservation method in electromagnetic
 *                  particle-in-cell simulations", Comput. Phys. Commun. (2003)
 *                  T. Umeda, Y. Omura, T. Tominaga, H. Matsumoto
 *                  DOI: 10.1016/S0010-4655(03)00437-5
 * 2. order paper: "Charge conservation methods for computing current densities
 *                  in electromagnetic particle-in-cell simulations",
 *                  Proceedings of ISSS. Vol. 7. 2005
 *                  T. Umeda, Y. Omura, H. Matsumoto
 * 3. order paper: "High-Order Interpolation Algorithms for Charge Conservation
 *                  in Particle-in-Cell Simulation", Commun. Comput. Phys 13 (2013)
 *                  Jinqing Yu, Xiaolin Jin, Weimin Zhou, Bin Li, Yuqiu Gu
 *                  DOI:10.1109/ICCIS.2012.159
 *
 * \tparam T_ParticleShape the particle shape for the species, \see picongpu::particles::shapes
 *
 */
template< typename ParticleShape >
struct EmZ;

} //namespace currentSolver

namespace traits
{

/*Get margin of a solver
 * class must define a LowerMargin and UpperMargin
 */
template< typename ParticleShape >
struct GetMargin<
    picongpu::currentSolver::EmZ<
        ParticleShape
    >
>
{
private:
    typedef picongpu::currentSolver::EmZ< ParticleShape > Solver;
public:
    typedef typename Solver::LowerMargin LowerMargin;
    typedef typename Solver::UpperMargin UpperMargin;
};

} //namespace traits

} //namespace picongpu
