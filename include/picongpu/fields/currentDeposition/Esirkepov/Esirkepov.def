/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/fields/currentDeposition/Strategy.def"


namespace picongpu
{
    namespace currentSolver
    {
        /**
         * Implements the current deposition algorithm from T.Zh. Esirkepov
         *
         * for an arbitrary particle assign function given as a template parameter.
         * See available shapes at "intermediateLib/particleShape".
         * paper: "Exact charge conservation scheme for Particle-in-Cell simulation
         *  with an arbitrary form-factor"
         *
         * @tparam T_ParticleShape the particle shape for the species, [picongpu::particles::shapes]
         * @tparam T_Strategy Used strategy to reduce the scattered data [currentSolver::strategy]
         * @tparam T_Dim Implementation for 2D or 3D
         */
        template<
            typename T_ParticleShape,
            typename T_Strategy = traits::GetDefaultStrategy_t<>,
            uint32_t T_dim = simDim>
        struct Esirkepov;

        namespace traits
        {
            template<typename T_ParticleShape, typename T_Strategy, uint32_t T_dim>
            struct GetStrategy<Esirkepov<T_ParticleShape, T_Strategy, T_dim>>
            {
                using type = T_Strategy;
            };
        } // namespace traits
    } // namespace currentSolver

    namespace traits
    {
        /*Get margin of a solver
         * class must define a LowerMargin and UpperMargin
         */
        template<typename T_ParticleShape, typename T_Strategy, uint32_t T_dim>
        struct GetMargin<picongpu::currentSolver::Esirkepov<T_ParticleShape, T_Strategy, T_dim>>
        {
        private:
            using Solver = picongpu::currentSolver::Esirkepov<T_ParticleShape, T_Strategy, T_dim>;

        public:
            using LowerMargin = typename Solver::LowerMargin;
            using UpperMargin = typename Solver::UpperMargin;
        };

    } // namespace traits

} // namespace picongpu
