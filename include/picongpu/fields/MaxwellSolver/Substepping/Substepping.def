/* Copyright 2021-2023 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/traits/GetCurl.hpp"

#include <cstdint>

namespace picongpu
{
    namespace fields
    {
        namespace maxwellSolver
        {
            /** A time-substepping version of the given field solver
             *
             * To propagate fields by sim.pic.getDt(), will do T_numSubsteps updates of the given solver
             * with dt = sim.pic.getDt() / T_numSubsteps.
             * Is suited for the case when plasma dynamics can be sufficiently resolved with a larger dt than laser.
             *
             * CFL for this solver is CFL of T_BaseSolver for dt = sim.pic.getDt() / T_numSubsteps.
             * Note that with substepping we would often be relatively far off the CFL for the base solver.
             * Depending on the solver type, this may be undesired due to numerical dispersion, e.g. for classic Yee.
             * For higher order solvers, on the contrary, it may be beneficial wrt dispersion.
             *
             * The substepping is hidden inside the usual field solver interface.
             * Thus, it is transparent for the rest of the simulation (except code called inside field solver).
             * This solver is fully equivalent to T_BaseSolver when T_numSubsteps == 1.
             *
             * This solver uses more memory as it requires a copy of FieldJ at the previous time step.
             *
             * @tparam T_BaseSolver base field solver, follows requirements of field solvers
             * @tparam T_numSubsteps number of substeps per PIC time iteration
             */
            template<typename T_BaseSolver, uint32_t T_numSubsteps>
            class Substepping;

        } // namespace maxwellSolver
    } // namespace fields

    namespace traits
    {
        /** Get curl(E) type in the substepping solver, same as for the base solver
         *
         * @tparam T_BaseSolver base field solver, follows requirements of field solvers
         * @tparam T_numSubsteps number of substeps per PIC time iteration
         */
        template<typename T_BaseSolver, uint32_t T_numSubsteps>
        struct GetCurlE<fields::maxwellSolver::Substepping<T_BaseSolver, T_numSubsteps>>
            : public GetCurlE<T_BaseSolver>
        {
        };

        /** Get curl(B) type in the substepping solver, same as for the base solver
         *
         * @tparam T_BaseSolver base field solver, follows requirements of field solvers
         * @tparam T_numSubsteps number of substeps per PIC time iteration
         */
        template<typename T_BaseSolver, uint32_t T_numSubsteps>
        struct GetCurlB<fields::maxwellSolver::Substepping<T_BaseSolver, T_numSubsteps>>
            : public GetCurlB<T_BaseSolver>
        {
        };
    } // namespace traits
} // namespace picongpu
