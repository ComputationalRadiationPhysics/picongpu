/* Copyright 2019-2023 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/defines.hpp"
#include "picongpu/fields/MaxwellSolver/FDTD/StencilFunctor.hpp"
#include "picongpu/fields/MaxwellSolver/GetTimeStep.hpp"
#include "picongpu/fields/absorber/pml/Parameters.hpp"

#include <pmacc/algorithms/math/floatMath/floatingPoint.tpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>

#include <cstdint>


namespace picongpu
{
    namespace fields
    {
        namespace absorber
        {
            namespace pml
            {
                //! Parameters of PML for the local domain
                struct LocalParameters : public Parameters
                {
                    /** PML size in cells, stored as floats to avoid type casts later,
                     *  negative and positive borders defined the same way as for Thickness
                     *
                     * @{
                     */
                    floatD_X negativeBorderSize;
                    floatD_X positiveBorderSize;

                    /** @} */

                    //! Number of cells in the local domain including guards
                    DataSpace<simDim> numLocalDomainCells;

                    //! Number of guard cells
                    DataSpace<simDim> numGuardCells;

                    /** Default constructor setting all members to 0
                     *
                     * This constructor only exists for deferred initialization on the host side.
                     */
                    LocalParameters()
                        : Parameters()
                        , negativeBorderSize(floatD_X::create(0.0_X))
                        , positiveBorderSize(floatD_X::create(0.0_X))
                        , numLocalDomainCells(DataSpace<simDim>::create(0))
                        , numGuardCells(DataSpace<simDim>::create(0))
                    {
                    }

                    /** Constructor with given parameters
                     *
                     * @param parameters base parameters instance
                     * @param localThickness local thickness values
                     * @param numLocalDomainCells number of cells in the local domain including guards
                     * @param numGuardCells number of guard cells
                     */
                    LocalParameters(
                        Parameters const parameters,
                        Thickness const localThickness,
                        DataSpace<simDim> const numLocalDomainCells,
                        DataSpace<simDim> const numGuardCells)
                        : Parameters(parameters)
                        , negativeBorderSize(precisionCast<float_X>(localThickness.getNegativeBorder()))
                        , positiveBorderSize(precisionCast<float_X>(localThickness.getPositiveBorder()))
                        , numLocalDomainCells(numLocalDomainCells)
                        , numGuardCells(numGuardCells)
                    {
                    }
                };

                namespace detail
                {
                    /** Get relative depth of a given cell for 1D.
                     *
                     * This function operates with a 1D slice of domain and PML.
                     * index == numGuardCells corresponds to the external negative PML
                     * border, and index == numLocalDomainCells - numGuardCells - 1
                     * corresponds to the external positive PML border.
                     * For the internal area result is 0, for points in PML the depth
                     * scales from 0 at the internal border to 1 at the external border.
                     * Index and local domain size include the guard.
                     *
                     * @param cellIdx cell index including the guard, can be fractional,
                     * e.g. for halves of cells
                     * @param numPMLCellsNegative number of PML cells at the negative border
                     * @param numPMLCellsPositive number of PML cells at the positive border
                     * @param numLocalDomainCells number of cells of the local domain
                     * including the guard
                     * @param numGuardCells number of guard cells at each side
                     * @return relative depth, value between 0 and 1
                     */
                    DINLINE float_X getRelativeDepth(
                        float_X const cellIdx,
                        float_X const numPMLCellsNegative,
                        float_X const numPMLCellsPositive,
                        uint32_t const numLocalDomainCells,
                        uint32_t const numGuardCells)
                    {
                        auto zeroBasedIdx = cellIdx - numGuardCells;
                        auto const isInLeftPML = (zeroBasedIdx < numPMLCellsNegative);
                        if(isInLeftPML)
                            return (numPMLCellsNegative - zeroBasedIdx) / numPMLCellsNegative;
                        else
                        {
                            auto zeroBasedRightPMLStart
                                = numLocalDomainCells - 2 * numGuardCells - numPMLCellsPositive;
                            auto const isInRightPML = (zeroBasedIdx > zeroBasedRightPMLStart);
                            if(isInRightPML)
                                return (zeroBasedIdx - zeroBasedRightPMLStart) / numPMLCellsPositive;
                        }
                        return 0._X;
                    }

                    /** Get absorption parameters: sigma, kappa and alpha at a given cell
                     *
                     * Apply polynomial grading, as described in fieldAbsorber.param.
                     *
                     * @param cellIdx cell index including the guard, can be fractional,
                     * e.g. for halves of cells
                     * @param parameters parameters of PML in the local domain
                     * @param[out] normalizedSigma value of normalized sigma at the cell
                     * @param[out] kappa value of normalized kappa at the cell
                     * @param[out] normalizedAlpha value of normalized alpha at the cell
                     */
                    DINLINE void getAbsorptionParameters(
                        floatD_X const cellIdx,
                        LocalParameters const parameters,
                        float3_X& normalizedSigma,
                        float3_X& kappa,
                        float3_X& normalizedAlpha)
                    {
                        // initialize with values for non-PML area
                        normalizedSigma = float3_X::create(0._X);
                        kappa = float3_X::create(1._X);
                        normalizedAlpha = float3_X::create(0._X);
                        for(uint32_t dim = 0u; dim < simDim; dim++)
                        {
                            auto const relativeDepth = getRelativeDepth(
                                cellIdx[dim],
                                parameters.negativeBorderSize[dim],
                                parameters.positiveBorderSize[dim],
                                parameters.numLocalDomainCells[dim],
                                parameters.numGuardCells[dim]);
                            // Since normally most points are not in PML, avoid costly
                            // computing in this case
                            if(relativeDepth != 0._X)
                            {
                                /* Grading done according to [Taflove, Hagness], eq. (7.60a, b).
                                 * Note: here we use a general expression, it is possible
                                 * to specialize for sigmaKappaGradingOrder = 2, 3, or 4,
                                 * but currently seems not worth it.
                                 */
                                auto const sigmaKappaGradingCoeff
                                    = math::pow(relativeDepth, parameters.sigmaKappaGradingOrder);
                                normalizedSigma[dim] = parameters.normalizedSigmaMax[dim] * sigmaKappaGradingCoeff;
                                kappa[dim] = 1._X + (parameters.kappaMax[dim] - 1._X) * sigmaKappaGradingCoeff;
                                /* Grading done according to [Taflove, Hagness], eq. (7.79),
                                 * note that this code is only correct when relativeDepth != 0
                                 */
                                auto const alphaGradingCoeff
                                    = math::pow(1._X - relativeDepth, parameters.alphaGradingOrder);
                                normalizedAlpha[dim] = parameters.normalizedAlphaMax[dim] * alphaGradingCoeff;
                            }
                        }
                    }

                    /** Get normalized sigma value at a given position
                     *
                     * Apply polynomial grading, as described in fieldAbsorber.param.
                     *
                     * @param cellIdx local cell index without the guard, can be fractional
                     * @param parameters parameters of PML in the local domain
                     * @param axis axis index, 0 = x, 1 = y, 2 = z
                     */
                    DINLINE float_X
                    getNormalizedSigma(float_X const& cellIdx, LocalParameters const& parameters, uint32_t const axis)
                    {
                        auto const relativeDepth = detail::getRelativeDepth(
                            cellIdx + parameters.numGuardCells[axis],
                            parameters.negativeBorderSize[axis],
                            parameters.positiveBorderSize[axis],
                            parameters.numLocalDomainCells[axis],
                            parameters.numGuardCells[axis]);
                        if(relativeDepth != 0._X)
                        {
                            // Same grading as in detail::getAbsorptionParameters()
                            auto const gradingCoeff = math::pow(relativeDepth, parameters.sigmaKappaGradingOrder);
                            return parameters.normalizedSigmaMax[axis] * gradingCoeff;
                        }
                        else
                            return 0._X;
                    }

                    //! Coefficients for E or B updates at a particular point
                    struct Coefficients
                    {
                        //! Coordinate stretching coefficient
                        float3_X kappa;

                        //! Damping coefficient, [Taflove, Hagness], eq. (7.102)
                        float3_X b;

                        //! Spatial difference coefficient, [Taflove, Hagness], eq. (7.99)
                        float3_X c;
                    };

                    /** Get coefficients for E or B updates at a given cell
                     *
                     * Apply polynomial grading, as described in fieldAbsorber.param.
                     * Due to normalizations, the same way of computing coefficients applies
                     * to E and B updates.
                     *
                     * @param cellIdx cell index including the guard, can be fractional,
                     * e.g. for halves of cells
                     * @param parameters parameters of PML in the local domain
                     * @param dt value of time step to propagate by
                     * @result an instance of Coefficients with computed values
                     */
                    DINLINE Coefficients
                    getCoefficients(floatD_X const cellIdx, LocalParameters const parameters, float_X const dt)
                    {
                        Coefficients coeffs;
                        float3_X normalizedSigma, normalizedAlpha;
                        getAbsorptionParameters(cellIdx, parameters, normalizedSigma, coeffs.kappa, normalizedAlpha);

                        /* [Taflove, Hagness], eq. (7.102), normalizedSigma and
                         * normalizedAlpha are already divided by eps0
                         */
                        coeffs.b = math::exp(-(normalizedSigma / coeffs.kappa + normalizedAlpha) * dt);
                        /* [Taflove, Hagness], eq. (7.99), in our case both the numerator
                         * and the denominator are equally normalized
                         */
                        coeffs.c = float3_X::create(0._X);
                        for(uint32_t dim = 0u; dim < 3; dim++)
                        {
                            auto const denominator = coeffs.kappa[dim]
                                * (normalizedSigma[dim] + normalizedAlpha[dim] * coeffs.kappa[dim]);
                            // Avoid the 0 / 0 uncertainty, in that case keep the value 0
                            if(denominator)
                                coeffs.c[dim] = normalizedSigma[dim] * (coeffs.b[dim] - 1.0_X) / denominator;
                        }
                        return coeffs;
                    }

                    /** Return if a point with given coefficients belongs to PML
                     *
                     * @param coeffs values of coefficients
                     * @result boolean value if a point with given coefficients belongs
                     * to PML
                     */
                    DINLINE bool isInPML(Coefficients const coeffs)
                    {
                        /* Each damping component is < 1 when absorption is enabled
                         * along this direction and == 1 otherwise.
                         * So a product is 1 in the internal area and < 1 in PML
                         */
                        return coeffs.b.productOfComponents() != 1.0_X;
                    }
                } // namespace detail

                /** Calculate an integral of normalized sigma along the given axis:
                 *  I = integral(sigma_axis(pos_axis(t)) / eps0 * dt; t in [startT, startT + durationT])
                 *
                 * We only consider the given axis and for brevity omit axis "subscript".
                 * Same as in the rest of PML implementation, we denote normalizedSigma = sigma / eps0.
                 *
                 * The integral is used for procedure to treat J in PML proposed in section II C of
                 * R. Lehe, A. Blelly, L. Giacomel, R. Jambunathan, J.-L. Vay
                 * Absorption of charged particles in Perfectly-Matched-Layers by optimal damping of the deposited
                 * current (2022) - version 2 from arXiv preprint at the time of our implementation.
                 * We further refer to this paper as [Lehe2022].
                 *
                 * Note that it is similar but not exactly same integral as in [Lehe2022].
                 * Here a time interval is arbitrary and not fixed to a particle crossing the PML interface.
                 * So this utility function uses the general integral formulation as stated above.
                 * Our general approach and relation to [Lehe2022] are described at the client side of this function.
                 *
                 * For given values of startPos = pos(startT), finishPos = pos(startT + durationT)
                 * we assume a linear trajectory with constant velocity:
                 *     vel = (finishPos - startPos) / durationT,
                 *     pos(t) = startPos + vel * (t - startT).
                 * This function will be used to integrate over a PIC time step, thus the assumption is harmless.
                 *
                 * For |vel| < eps, using the trapezoidal rule (to avoid potential numerical issues) the result is
                 *     I = durationT * 0.5 * (normalizedSigma(startPos) + normalizedSigma(finishPos)).
                 * Otherwise, change the variable from t to pos:
                 *     d(pos) = vel * dt,
                 *     I = integral(normalizedSigma(pos) * d(pos) / vel; pos in [startPos, finishPos]).
                 * Note that with the division by velocity due to variable substitution, it becomes more similar to
                 * eq. (4) in [Lehe2022], which is probably why it was proposed in section II C.
                 *
                 * For polynomially graded sigma values, the latter integral is calculated analytically.
                 * Special care is taken to account for sigma(pos) = 0 when pos is outside of PML.
                 *
                 * @param startPos start position, in local domain and without guard [cells]
                 * @param finishPos finish position, in local domain and without guard [cells]
                 * @param timeDuration integration time duration (only duration is required as start and finish
                 *        positions already take into account start time)
                 * @param parameters parameters of PML in the local domain
                 * @param axis axis index, 0 = x, 1 = y, 2 = z
                 */
                DINLINE float_X getNormalizedSigmaIntegral(
                    float_X const startPos,
                    float_X const finishPos,
                    float_X const timeDuration,
                    LocalParameters const& parameters,
                    uint32_t const axis)
                {
                    // Note that velocity in units of [sim.pic.getCellSize()[axis] / time], which is more natural here
                    auto const vel = (finishPos - startPos) / timeDuration;

                    // For near-zero velocity use an approximate formula
                    constexpr auto eps = 1e-5;
                    if(math::abs(vel) < eps * sim.pic.getCellSize()[axis])
                    {
                        auto const startNormalizedSigma = detail::getNormalizedSigma(startPos, parameters, axis);
                        auto const finishNormalizedSigma = detail::getNormalizedSigma(finishPos, parameters, axis);
                        return timeDuration * 0.5_X * (startNormalizedSigma + finishNormalizedSigma);
                    }

                    /* In case only part of the trajectory is in PML, the result is equal to the integral over only
                     * that part, since sigma(pos) = 0 for any pos outside of PML.
                     * In this case adjust the positions and time duration to only represent that part.
                     * It has no effect when both points are in or both are out of the PML area.
                     * At most one of the following adjustments will be done as PMLs do not overlap.
                     */
                    auto adjustedStartPos = startPos;
                    auto adjustedFinishPos = finishPos;
                    // Left-side PML interface end, without guard same as our positions
                    auto const negativePmlFinishPos = static_cast<float_X>(parameters.negativeBorderSize[axis]);
                    if((finishPos < negativePmlFinishPos) && (startPos >= negativePmlFinishPos))
                        adjustedStartPos = negativePmlFinishPos;
                    if((startPos < negativePmlFinishPos) && (finishPos >= negativePmlFinishPos))
                        adjustedFinishPos = negativePmlFinishPos;
                    // Right-side PML interface start, without guard same as our positions
                    auto const positivePmlStartPos = static_cast<float_X>(
                        parameters.numLocalDomainCells[axis] - 2 * parameters.numGuardCells[axis]
                        - parameters.positiveBorderSize[axis]);
                    if((finishPos > positivePmlStartPos) && (startPos <= positivePmlStartPos))
                        adjustedStartPos = positivePmlStartPos;
                    if((startPos > positivePmlStartPos) && (finishPos <= positivePmlStartPos))
                        adjustedFinishPos = positivePmlStartPos;
                    auto const adjustedTimeDuration = (adjustedFinishPos - adjustedStartPos) / vel;

                    /* After the adjustment both start and finish position are at the same side from PML interface.
                     * And the resulting integral is
                     *     I = integral(normalizedSigma(pos) * d(pos) / vel;
                     *                  pos in [adjustedStartPosition, adjustedFinishPosition]).
                     * With normalizedSigma(pos) being a polynomial we calculated it analytically.
                     * The resulting expression is formulated to reuse the function to calculate normalizedSigma.
                     */
                    auto depthCoeff = 0.0_X;
                    if(adjustedStartPos <= negativePmlFinishPos)
                        depthCoeff = adjustedStartPos - negativePmlFinishPos;
                    if(adjustedStartPos >= positivePmlStartPos)
                        depthCoeff = adjustedStartPos - positivePmlStartPos;
                    auto const startNormalizedSigma = detail::getNormalizedSigma(adjustedStartPos, parameters, axis);
                    auto const finishNormalizedSigma = detail::getNormalizedSigma(adjustedFinishPos, parameters, axis);
                    auto integral = (finishNormalizedSigma * adjustedTimeDuration
                                     + (finishNormalizedSigma - startNormalizedSigma) * depthCoeff / vel)
                        / (parameters.sigmaKappaGradingOrder + 1.0_X);
                    return integral;
                }

                /** Stencil functor to update electric field by a time step using FDTD with the given curl and PML
                 *
                 * @tparam T_CurlB curl functor type to be applied to magnetic field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlB>
                class UpdateEFunctor : public maxwellSolver::fdtd::StencilFunctor<T_CurlB>
                {
                public:
                    /** Create a functor instance on the host side
                     *
                     * @param fieldPsiE PML convolutional electric field iterator
                     * @param parameters PML parameters for a local domain
                     */
                    UpdateEFunctor(FieldBox fieldPsiE, LocalParameters const parameters)
                        : fieldPsiE(fieldPsiE)
                        , parameters(parameters)
                    {
                    }

                    UpdateEFunctor(const UpdateEFunctor&) = default;

                    /** Update electric field at the given position
                     *
                     * @tparam T_LocalBBox local magnetic field box type
                     * @tparam T_LocalEBox local electric field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localE
                     */
                    template<typename T_LocalBBox, typename T_LocalEBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalBBox const localB,
                        T_LocalEBox localE)
                    {
                        constexpr auto c2 = sim.pic.getSpeedOfLight() * sim.pic.getSpeedOfLight();
                        constexpr auto dt = maxwellSolver::getTimeStep();
                        // with the current Yee grid, no shift needed here
                        auto const pmlIdx = precisionCast<float_X>(gridIndex);
                        auto const coeffs = detail::getCoefficients(pmlIdx, parameters, dt);

                        if(isInPML(coeffs))
                        {
                            /* Update convolutional fields using [Taflove, Hagness],
                             * eq. (7.105a,b) and similar for other components.
                             * For PIC the right-hand side uses B, not H.
                             *
                             * Notation: dBdx = dB / dx, dBdx.y() = dBy / dx, etc.
                             */
                            auto const dBdx = curl.xDerivative(localB);
                            auto const dBdy = curl.yDerivative(localB);
                            auto const dBdz = curl.zDerivative(localB);
                            auto& psiE = fieldPsiE(gridIndex);
                            psiE.yx = coeffs.b.x() * psiE.yx + coeffs.c.x() * dBdx.z();
                            psiE.zx = coeffs.b.x() * psiE.zx + coeffs.c.x() * dBdx.y();
                            psiE.xy = coeffs.b.y() * psiE.xy + coeffs.c.y() * dBdy.z();
                            psiE.zy = coeffs.b.y() * psiE.zy + coeffs.c.y() * dBdy.x();
                            psiE.xz = coeffs.b.z() * psiE.xz + coeffs.c.z() * dBdz.y();
                            psiE.yz = coeffs.b.z() * psiE.yz + coeffs.c.z() * dBdz.x();

                            /* [Taflove, Hagness], eq. (7.106) and similar for other
                             * components. Coefficients Ca, Cb as given in (7.107a,b)
                             * are general to account for materials, in addition to
                             * artificial PML absorbing medium. We do not have any
                             * real material, so in (7.107a,b) we have to use
                             * sigma(i + 1/2, j, k) = 0 (it is another sigma,
                             * unrelated to PML), eps(i + 1/2, j, k) = sim.pic.getEps0(). Also,
                             * same as the FDTD scheme in PIC, adjusted to use B,
                             * not H, on the right-hand side.
                             */
                            localE().x() += c2 * dt
                                * (dBdy.z() / coeffs.kappa.y() - dBdz.y() / coeffs.kappa.z() + psiE.xy - psiE.xz);
                            localE().y() += c2 * dt
                                * (dBdz.x() / coeffs.kappa.z() - dBdx.z() / coeffs.kappa.x() + psiE.yz - psiE.yx);
                            localE().z() += c2 * dt
                                * (dBdx.y() / coeffs.kappa.x() - dBdy.x() / coeffs.kappa.y() + psiE.zx - psiE.zy);
                        }
                        else
                            // Normal FDTD update
                            localE() += curl(localB) * c2 * dt;
                    }

                private:
                    FieldBox fieldPsiE;
                    LocalParameters const parameters;
                    // keep curl as member to support stateful types
                    T_CurlB const curl = T_CurlB{};
                };

                /** Stencil functor to update magnetic field by half a time step using FDTD with the given curl and PML
                 *
                 * @tparam T_CurlE curl functor type to be applied to electric field,
                 *                 adheres to the Curl concept
                 */
                template<typename T_CurlE>
                class UpdateBHalfFunctor : public maxwellSolver::fdtd::StencilFunctor<T_CurlE>
                {
                public:
                    /** Create a functor instance on the host side
                     *
                     * @param fieldPsiE PML convolutional electric field iterator
                     * @param parameters PML parameters for a local domain
                     * @param updatePsiB whether convolutional magnetic fields need to be updated, or are
                     * up-to-date
                     */
                    UpdateBHalfFunctor(FieldBox fieldPsiB, LocalParameters const parameters, bool updatePsiB)
                        : fieldPsiB(fieldPsiB)
                        , parameters(parameters)
                        , updatePsiB(updatePsiB)
                    {
                    }

                    UpdateBHalfFunctor(const UpdateBHalfFunctor&) = default;

                    /** Update magnetic field at the given position
                     *
                     * @tparam T_LocalEBox local electric field box type
                     * @tparam T_LocalBBox local magnetic field box type
                     *
                     * @param gridIndex index of the updated field element, with guards
                     * @param localE electric field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     * @param localB magnetic field box shifted to position gridIndex,
                     *               note that it is the box, not the value
                     *
                     * @return update the value pointed to by localB
                     */
                    template<typename T_LocalEBox, typename T_LocalBBox>
                    DINLINE void operator()(
                        pmacc::DataSpace<simDim> const& gridIndex,
                        T_LocalEBox const localE,
                        T_LocalBBox localB)
                    {
                        constexpr auto dt = maxwellSolver::getTimeStep();
                        constexpr auto halfDt = 0.5_X * dt;

                        // with the current Yee grid, a half cell shift is needed here
                        auto const pmlIdx = floatD_X::create(0.5_X) + precisionCast<float_X>(gridIndex);
                        /* Note that convolutional fields are updated once per dt. So the coefficients are computed
                         * in this way, and whether the update has to be performed is controlled by a kernel caller
                         * with updatePsiB parameter.
                         */
                        auto const coeffs = detail::getCoefficients(pmlIdx, parameters, dt);

                        if(detail::isInPML(coeffs))
                        {
                            /* Update convolutional fields using [Taflove, Hagness],
                             * eq. (7.110a,b) and similar for other components.
                             * For PIC the left-hand side uses B, not H.
                             *
                             * Notation: dEdx = dE / dx, dEdx.y() = dEy / dx, etc.
                             */
                            auto const dEdx = curl.xDerivative(localE);
                            auto const dEdy = curl.yDerivative(localE);
                            auto const dEdz = curl.zDerivative(localE);
                            auto& psiB = fieldPsiB(gridIndex);
                            if(updatePsiB)
                            {
                                psiB.yx = coeffs.b.x() * psiB.yx + coeffs.c.x() * dEdx.z();
                                psiB.zx = coeffs.b.x() * psiB.zx + coeffs.c.x() * dEdx.y();
                                psiB.xy = coeffs.b.y() * psiB.xy + coeffs.c.y() * dEdy.z();
                                psiB.zy = coeffs.b.y() * psiB.zy + coeffs.c.y() * dEdy.x();
                                psiB.xz = coeffs.b.z() * psiB.xz + coeffs.c.z() * dEdz.y();
                                psiB.yz = coeffs.b.z() * psiB.yz + coeffs.c.z() * dEdz.x();
                            }

                            /* [Taflove, Hagness], eq. (7.108) and similar for other
                             * components. Coefficients Da, Db as given in (7.109a,b)
                             * are general to account for materials, in addition to
                             * artificial PML absorbing medium. We do not have any
                             * real material, so in (7.109a,b) we have to use
                             * sigma*(i + 1/2, j, k) = 0 (it is another sigma*,
                             * unrelated to PML), mue(i + 1/2, j, k) = sim.pic.getMue0(). Also,
                             * same as the FDTD scheme in PIC, adjusted to use B,
                             * not H, on the left-hand side.
                             */
                            localB().x() += halfDt
                                * (dEdz.y() / coeffs.kappa.z() - dEdy.z() / coeffs.kappa.y() + psiB.xz - psiB.xy);
                            localB().y() += halfDt
                                * (dEdx.z() / coeffs.kappa.x() - dEdz.x() / coeffs.kappa.z() + psiB.yx - psiB.yz);
                            localB().z() += halfDt
                                * (dEdy.x() / coeffs.kappa.y() - dEdx.y() / coeffs.kappa.x() + psiB.zy - psiB.zx);
                        }
                        else
                            // Normal FDTD update
                            localB() -= curl(localE) * halfDt;
                    }

                private:
                    FieldBox fieldPsiB;
                    LocalParameters const parameters;
                    bool const updatePsiB;
                    // keep curl as member to support stateful types
                    T_CurlE const curl = T_CurlE{};
                };

            } // namespace pml
        } // namespace absorber
    } // namespace fields
} // namespace picongpu
