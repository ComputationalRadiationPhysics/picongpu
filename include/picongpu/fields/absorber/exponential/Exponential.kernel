/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/lockstep.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/meta/ForEach.hpp>

#include <boost/mpl/integral_c.hpp>
#include <boost/mpl/range_c.hpp>


namespace picongpu
{
    namespace fields
    {
        namespace absorber
        {
            namespace exponential
            {
                namespace detail
                {
                    /** damp each field component at exchange the border
                     *
                     * @tparam T_Axis, boost::mpl::integral_c axis of the coordinate system
                     *                 (0 = x, 1 = y, 2 = z)
                     */
                    template<typename T_Axis>
                    struct AbsorbInOneDirection
                    {
                        /** absorb one direction
                         *
                         * The functor is only performed if `relExchangeDir[ T_Axis::value ] != 0`.
                         *
                         * @tparam T_BoxedMemory pmacc::DataBox, type of the field
                         * @tparam T_Mapping mapper functor type
                         *
                         * @param field field to manipulate
                         * @param thickness the thickness of the absorber area (in cells)
                         * @param absorberStrength strength of the absorber
                         * @param mapper functor to map a block to a supercell
                         * @param relExchangeDir relative direction for each dimension
                         *        (-1 = negative; +1 = positive direction; 0 = direction not selected)
                         */
                        template<typename T_BoxedMemory, typename T_Mapping, typename T_Worker>
                        DINLINE void operator()(
                            T_Worker const& worker,
                            T_BoxedMemory& field,
                            uint32_t const thickness,
                            float_X const absorberStrength,
                            T_Mapping& mapper,
                            DataSpace<simDim> const& relExchangeDir) const
                        {
                            constexpr int axis = T_Axis::value;

                            // return if axis is not selected
                            if(relExchangeDir[axis] == 0)
                                return;

                            using SuperCellSize = typename T_Mapping::SuperCellSize;
                            DataSpace<simDim> const superCellIdx(
                                mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

                            constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;

                            auto const numGuardSuperCells = mapper.getGuardingSuperCells();
                            DataSpace<simDim> guardCells(numGuardSuperCells * SuperCellSize::toRT());

                            // cell index of the supercell within the local domain (incl. the guards)
                            DataSpace<simDim> const localDomainCells
                                = mapper.getGridSuperCells() * SuperCellSize::toRT();

                            auto forEachParticleInFrame = lockstep::makeForEach<cellsPerSuperCell>(worker);

                            forEachParticleInFrame(
                                [&](uint32_t const linearIdx)
                                {
                                    /* cell index within the superCell */
                                    DataSpace<simDim> const cellIdx
                                        = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);

                                    DataSpace<simDim> cell(superCellIdx * SuperCellSize::toRT() + cellIdx);


                                    do
                                    {
                                        cell[axis] += guardCells[axis] * -relExchangeDir[axis];
                                        int factor(0);

                                        if(relExchangeDir[axis] < 0)
                                        {
                                            factor = guardCells[axis] - cell[axis] + thickness - 1;
                                        }
                                        else
                                        {
                                            factor
                                                = guardCells[axis] + cell[axis] - localDomainCells[axis] + thickness;
                                        }

                                        if(factor <= 0)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            float_X const a = math::exp(-absorberStrength * float_X(factor));
                                            field(cell) = field(cell) * a;
                                        }
                                    } while(true);
                                });
                        }
                    };

                } // namespace detail

                /** damp each field's components at the outer cells of the global domain
                 *
                 * Done for one direction per call.
                 */
                struct KernelAbsorbBorder
                {
                    /** damp a field at the border
                     *
                     * @tparam T_BoxedMemory pmacc::DataBox, type of the field
                     * @tparam T_Mapping pmacc::ExchangeMapping, mapper functor type
                     *
                     * @param field filed to manipulate
                     * @param thickness the thickness of the absorber area (in cells)
                     * @param absorberStrength strength of the absorber (positive, exponential damping constant)
                     * @param mapper functor to map a block to a supercell,
                     *               selects the direction of damping by the exchange type
                     */
                    template<typename T_BoxedMemory, typename T_Mapping, typename T_Worker>
                    DINLINE void operator()(
                        T_Worker const& worker,
                        T_BoxedMemory field,
                        uint32_t const thickness,
                        float_X const absorberStrength,
                        T_Mapping mapper) const
                    {
                        DataSpace<simDim> const relExchangeDir
                            = Mask::getRelativeDirections<simDim>(mapper.getExchangeType());

                        /* create a sequence with int values [0;simDim)
                         * MakeSeq_t allows to use the result of mpl::range_c
                         * within the PMacc ForEach
                         */
                        using SimulationDimensions = MakeSeq_t<boost::mpl::range_c<int, 0, int(simDim)>>;

                        meta::ForEach<SimulationDimensions, detail::AbsorbInOneDirection<boost::mpl::_1>>
                            absorbInAllDirections;

                        absorbInAllDirections(worker, field, thickness, absorberStrength, mapper, relExchangeDir);
                    }
                };

            } // namespace exponential
        } // namespace absorber
    } // namespace fields
} // namespace picongpu
