/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/algorithms/Velocity.hpp"
#include "picongpu/fields/FieldJ.hpp"
#include "picongpu/fields/currentDeposition/Cache.hpp"
#include "picongpu/fields/currentDeposition/Strategy.def"
#include "picongpu/traits/attribute/DampedWeighting.hpp"

#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>
#include <pmacc/types.hpp>

#include <type_traits>
#include <utility>

namespace picongpu
{
    namespace currentSolver
    {
        /** compute current
         *
         * @tparam T_BlockDescription current field domain description needed for the
         *                            collective stencil
         */
        template<typename T_BlockDescription>
        struct KernelComputeCurrent
        {
            /** scatter particle current of particles located in a supercell
             *
             * The current for the supercell including the guards is cached in shared memory
             * and scattered at the end of the functor to the global memory.
             *
             * @tparam JBox pmacc::DataBox, particle current box type
             * @tparam ParBox pmacc::ParticlesBox, particle box type
             * @tparam Mapping mapper functor type
             * @tparam FrameSolver frame solver functor type
             * @tparam T_Worker lockstep worker type
             *
             * @param worker lockstep worker
             * @param fieldJ field with particle current
             * @param boxPar particle memory
             * @param frameSolver functor to calculate the current for a frame
             * @param mapper functor to map a block to a supercell
             */
            template<typename JBox, typename ParBox, typename FrameSolver, typename Mapping, typename T_Worker>
            DINLINE void operator()(
                T_Worker const& worker,
                JBox fieldJ,
                ParBox boxPar,
                FrameSolver frameSolver,
                Mapping mapper) const
            {
                using SuperCellSize = typename Mapping::SuperCellSize;

                const DataSpace<simDim> superCellIdx(
                    mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(worker.getAcc()))));

                auto forEachParticle = pmacc::particles::algorithm::acc::makeForEach(worker, boxPar, superCellIdx);

                // end kernel if we have no particles
                if(!forEachParticle.hasParticles())
                    return;

                DataSpace<simDim> const blockCell = superCellIdx * SuperCellSize::toRT();
                using Strategy = currentSolver::traits::GetStrategy_t<FrameSolver>;

                /* this memory is used by all virtual blocks */
                auto cachedJ
                    = detail::Cache<Strategy>::template create<T_BlockDescription>(worker, fieldJ.shift(blockCell));

                worker.sync();

                forEachParticle([&cachedJ, &frameSolver](auto const& lockstepWorker, auto& particle)
                                { frameSolver(lockstepWorker, particle, cachedJ); });

                /* we wait that all workers finish the loop */
                worker.sync();

                /* this memory is used by all virtual blocks */
                detail::Cache<Strategy>::template flush<T_BlockDescription>(worker, fieldJ.shift(blockCell), cachedJ);
            }
        };

        template<typename T_ParticleAlgo, typename Velocity, typename TVec>
        struct ComputePerFrame
        {
            using ParticleAlgo = T_ParticleAlgo;

            HDINLINE ComputePerFrame(const float_X deltaTime) : m_deltaTime(deltaTime)
            {
            }

            template<typename T_Particle, typename BoxJ, typename T_Worker>
            DINLINE void operator()(T_Worker const& worker, T_Particle& particle, BoxJ& jBox)
            {
                /* Use (potentially) damped weighting for charge calculation.
                 * @see particles::boundary::DampWeightsInPml for details.
                 */
                const auto dampedWeighting = attribute::getDampedWeighting(particle);
                const float_X charge = attribute::getCharge(dampedWeighting, particle);
                const floatD_X pos = particle[position_];
                const int particleCellIdx = particle[localCellIdx_];
                const DataSpace<simDim> localCell(DataSpaceOperations<simDim>::template map<TVec>(particleCellIdx));

                // The rest uses normal weighting
                const float_X weighting = particle[weighting_];
                Velocity velocity;
                const float3_X vel = velocity(particle[momentum_], attribute::getMass(weighting, particle));
                auto fieldJShiftToParticle = jBox.shift(localCell);
                ParticleAlgo perParticle;
                perParticle(worker, fieldJShiftToParticle, pos, vel, charge, m_deltaTime);
            }

        private:
            PMACC_ALIGN(m_deltaTime, const float_32);
        };

        namespace traits
        {
            template<typename ParticleAlgo, typename Velocity, typename TVec>
            struct GetStrategy<ComputePerFrame<ParticleAlgo, Velocity, TVec>>
            {
                using type = GetStrategy_t<ParticleAlgo>;
            };
        } // namespace traits
    } // namespace currentSolver
} // namespace picongpu
