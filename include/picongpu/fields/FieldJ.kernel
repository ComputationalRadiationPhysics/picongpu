/* Copyright 2013-2021 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "picongpu/algorithms/Velocity.hpp"
#include "picongpu/fields/FieldJ.hpp"
#include "picongpu/fields/currentDeposition/Cache.hpp"
#include "picongpu/fields/currentDeposition/Strategy.def"

#include <pmacc/dimensions/DataSpaceOperations.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>
#include <pmacc/types.hpp>

#include <type_traits>
#include <utility>

namespace picongpu
{
    namespace currentSolver
    {
        /** add current to electric and magnetic field
         *
         * @tparam T_numWorkers number of workers
         */
        template<uint32_t T_numWorkers>
        struct KernelAddCurrentToEMF
        {
            template<typename T_CurrentInterpolationFunctor, typename T_Mapping, typename T_Acc>
            DINLINE void operator()(
                T_Acc const& acc,
                typename FieldE::DataBoxType fieldE,
                typename FieldB::DataBoxType fieldB,
                typename FieldJ::DataBoxType fieldJ,
                T_CurrentInterpolationFunctor currentInterpolationFunctor,
                T_Mapping mapper) const
            {
                /* Caching of fieldJ */
                typedef SuperCellDescription<
                    SuperCellSize,
                    typename T_CurrentInterpolationFunctor::LowerMargin,
                    typename T_CurrentInterpolationFunctor::UpperMargin>
                    BlockArea;

                constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;
                constexpr uint32_t numWorkers = T_numWorkers;

                uint32_t const workerIdx = cupla::threadIdx(acc).x;

                auto cachedJ = CachedBox::create<0, typename FieldJ::DataBoxType::ValueType>(acc, BlockArea());

                pmacc::math::operation::Assign assign;
                DataSpace<simDim> const block(mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc))));
                DataSpace<simDim> const blockCell = block * MappingDesc::SuperCellSize::toRT();


                auto fieldJBlock = fieldJ.shift(blockCell);

                ThreadCollective<BlockArea, numWorkers> collective(workerIdx);

                collective(acc, assign, cachedJ, fieldJBlock);

                cupla::__syncthreads(acc);

                lockstep::makeForEach<cellsPerSuperCell, numWorkers>(workerIdx)([&](uint32_t const linearIdx) {
                    /* cell index within the superCell */
                    DataSpace<simDim> const cellIdx
                        = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);
                    DataSpace<simDim> const cell(blockCell + cellIdx);

                    // Amperes Law:
                    //   Change of the dE = - j / EPS0 * dt
                    //                        j = current density (= current per area)
                    //                          = fieldJ
                    currentInterpolationFunctor(fieldE.shift(cell), fieldB.shift(cell), cachedJ.shift(cellIdx));
                });
            }
        };

    } // namespace currentSolver
} // namespace picongpu
