/* Copyright 2013-2022 Felix Schmitt, Heiko Burau, Rene Widera, Sergei Bastrakov
 *
 * This file is part of PMacc.
 *
 * PMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with PMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#include "pmacc/dimensions/DataSpaceOperations.hpp"
#include "pmacc/kernel/atomic.hpp"
#include "pmacc/lockstep.hpp"
#include "pmacc/mappings/kernel/ExchangeMapping.hpp"
#include "pmacc/memory/Array.hpp"
#include "pmacc/memory/shared/Allocate.hpp"
#include "pmacc/particles/algorithm/ForEach.hpp"
#include "pmacc/particles/memory/boxes/ExchangePopDataBox.hpp"
#include "pmacc/particles/memory/boxes/ExchangePushDataBox.hpp"
#include "pmacc/particles/memory/boxes/ParticlesBox.hpp"
#include "pmacc/particles/memory/boxes/PushDataBox.hpp"
#include "pmacc/particles/memory/boxes/TileDataBox.hpp"
#include "pmacc/particles/operations/Assign.hpp"
#include "pmacc/particles/operations/Deselect.hpp"
#include "pmacc/traits/NumberOfExchanges.hpp"
#include "pmacc/types.hpp"

#include <cstdint>

namespace pmacc
{
    template<typename T_ParticleBox, typename T_SuperCellIdxType, typename T_Worker>
    DINLINE typename T_ParticleBox::FramePtr getPreviousFrameAndRemoveLastFrame(
        const T_Worker& worker,
        const typename T_ParticleBox::FramePtr& frame,
        T_ParticleBox& pb,
        const T_SuperCellIdxType& superCellIdx)
    {
        typename T_ParticleBox::FramePtr result = pb.getPreviousFrame(frame);
        pb.removeLastFrame(worker, superCellIdx);
        return result;
    }

    /** fill particle gaps in the last frame
     *
     * Copy all particles in a frame to the storage places at the frame's beginning.
     * This leaves the frame with a contiguous number of valid particles at
     * the beginning and a subsequent, contiguous gap at the end.
     */
    struct KernelFillGapsLastFrame
    {
        /** fill particle gaps
         *
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_Mapping mapper functor type
         *
         * @param boxPar particle memory
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_ParBox, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(T_Worker const& worker, T_ParBox pb, T_Mapping mapper) const
        {
            using namespace particles::operations;

            constexpr uint32_t frameSize = math::CT::volume<typename T_Mapping::SuperCellSize>::type::value;
            constexpr uint32_t dim = T_Mapping::Dim;

            using FramePtr = typename T_ParBox::FramePtr;

            DataSpace<dim> const superCellIdx
                = mapper.getSuperCellIndex(DataSpace<dim>(cupla::blockIdx(worker.getAcc())));

            PMACC_SMEM(worker, lastFrame, FramePtr);
            PMACC_SMEM(worker, gapIndices_sh, memory::Array<int, frameSize>);
            PMACC_SMEM(worker, numGaps, int);
            PMACC_SMEM(worker, numParticles, uint32_t);
            PMACC_SMEM(worker, srcGap, int);

            lockstep::makeMaster(worker)(
                [&]()
                {
                    lastFrame = pb.getLastFrame(superCellIdx);
                    numGaps = 0;
                    numParticles = 0u;
                    srcGap = 0;
                });

            worker.sync();

            if(lastFrame.isValid())
            {
                /* loop over all particles in the frame */
                auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

                /* context if an element within the frame is a particle */
                auto isParticleCtx = forEachParticle(
                    [&](uint32_t const linearIdx) -> bool { return lastFrame[linearIdx][multiMask_]; });

                // count particles in last frame
                forEachParticle(
                    [&](lockstep::Idx const idx)
                    {
                        if(isParticleCtx[idx])
                            kernel::atomicAllInc(worker, &numParticles, ::alpaka::hierarchy::Threads{});
                    });

                worker.sync();

                forEachParticle(
                    [&](lockstep::Idx const idx)
                    {
                        if(idx < numParticles && isParticleCtx[idx] == false)
                        {
                            int const localGapIdx
                                = kernel::atomicAllInc(worker, &numGaps, ::alpaka::hierarchy::Threads{});
                            gapIndices_sh[localGapIdx] = idx;
                        }
                    });
                worker.sync();
                forEachParticle(
                    [&](lockstep::Idx const idx)
                    {
                        if(idx >= numParticles && isParticleCtx[idx])
                        {
                            // any particle search a gap
                            int const srcGapIdx
                                = kernel::atomicAllInc(worker, &srcGap, ::alpaka::hierarchy::Threads{});
                            int const gapIdx = gapIndices_sh[srcGapIdx];
                            auto parDestFull = lastFrame[gapIdx];
                            /* enable particle */
                            parDestFull[multiMask_] = 1;
                            /* we do not update the multiMask because copying from mem to mem is too slow
                             * we have to enabled particles explicitly
                             */
                            auto parDest = deselect<multiMask>(parDestFull);
                            auto parSrc = (lastFrame[idx]);
                            assign(parDest, parSrc);
                            parSrc[multiMask_] = 0; // delete old particle
                        }
                    });
            }
            lockstep::makeMaster(worker)(
                [&]()
                {
                    // there is no need to add a zero to the global memory
                    if(numParticles != 0)
                    {
                        auto& superCell = pb.getSuperCell(superCellIdx);
                        superCell.setNumParticles(superCell.getNumParticles() + numParticles);
                    }
                    else
                    {
                        /* The last frame is empty therefore it must be removed.
                         * It is save to call this method even if there is no last frame.
                         */
                        pb.removeLastFrame(worker, superCellIdx);
                    }
                });
        }
    };

    /** fill particle gaps in all frames
     *
     * Copy all particles from the end to the gaps at the beginning of the frame list.
     * The functor fulfills the restriction that the last frame must be hold a contiguous
     * number of valid particles at the beginning and a subsequent, contiguous gap at the end.
     */
    struct KernelFillGaps
    {
        /** fill particle gaps
         *
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_Mapping mapper functor type
         *
         * @param pb particle memory
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_ParBox, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(T_Worker const& worker, T_ParBox pb, T_Mapping const mapper) const
        {
            using namespace particles::operations;

            using FramePtr = typename T_ParBox::FramePtr;

            constexpr uint32_t frameSize = math::CT::volume<typename T_ParBox::FrameType::SuperCellSize>::type::value;
            constexpr uint32_t dim = T_Mapping::Dim;

            DataSpace<dim> const superCellIdx(
                mapper.getSuperCellIndex(DataSpace<dim>(cupla::blockIdx(worker.getAcc()))));

            // data copied from right (last) to left (first)
            PMACC_SMEM(worker, firstFrame, FramePtr);
            PMACC_SMEM(worker, lastFrame, FramePtr);

            PMACC_SMEM(worker, particleIndices_sh, memory::Array<int, frameSize>);
            // number of gaps in firstFrame frame
            PMACC_SMEM(worker, numGaps, int);
            // number of particles in the lastFrame
            PMACC_SMEM(worker, numParticles, int);

            uint32_t numParticlesPerSuperCell = 0u;

            auto onlyMaster = lockstep::makeMaster(worker);

            onlyMaster(
                [&]()
                {
                    firstFrame = pb.getFirstFrame(superCellIdx);
                    lastFrame = pb.getLastFrame(superCellIdx);
                });

            worker.sync();

            while(firstFrame.isValid() && firstFrame != lastFrame)
            {
                onlyMaster(
                    [&]()
                    {
                        numGaps = 0;
                        numParticles = 0;
                    });

                worker.sync();

                // loop over all particles in the frame
                auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

                // find gaps in firstFrame
                auto localGapIdxCtx = forEachParticle(
                    [&](lockstep::Idx const idx)
                    {
                        int gapIdx = INV_LOC_IDX;
                        if(firstFrame[idx][multiMask_] == 0)
                        {
                            gapIdx = kernel::atomicAllInc(worker, &numGaps, ::alpaka::hierarchy::Threads{});
                        }
                        return gapIdx;
                    });

                worker.sync();

                if(numGaps != 0)
                {
                    // count particles in lastFrame
                    forEachParticle(
                        [&](uint32_t const linearIdx)
                        {
                            // search particles for gaps
                            if(lastFrame[linearIdx][multiMask_] == 1)
                            {
                                int const localParticleIdx
                                    = kernel::atomicAllInc(worker, &numParticles, ::alpaka::hierarchy::Threads{});
                                particleIndices_sh[localParticleIdx] = linearIdx;
                            }
                        });

                    worker.sync();

                    // copy particles from lastFrame to the gaps in firstFrame
                    forEachParticle(
                        [&](lockstep::Idx const idx)
                        {
                            if(localGapIdxCtx[idx] < numParticles)
                            {
                                int const parIdx = particleIndices_sh[localGapIdxCtx[idx]];
                                auto parDestFull = firstFrame[idx];
                                // enable particle
                                parDestFull[multiMask_] = 1;
                                /* we not update multiMask because copy from mem to mem is to slow
                                 * we have enabled particle explicit
                                 */
                                auto parDest = deselect<multiMask>(parDestFull);
                                auto parSrc = lastFrame[parIdx];
                                assign(parDest, parSrc);
                                parSrc[multiMask_] = 0;
                            }
                        });

                    worker.sync();

                    onlyMaster(
                        [&]()
                        {
                            if(numGaps < numParticles)
                            {
                                numParticlesPerSuperCell += frameSize;
                                // any gap in the first frame is filled
                                firstFrame = pb.getNextFrame(firstFrame);
                            }
                            else if(numGaps > numParticles)
                            {
                                // we need more particles
                                lastFrame = getPreviousFrameAndRemoveLastFrame(worker, lastFrame, pb, superCellIdx);
                            }
                            else if(numGaps == numParticles)
                            {
                                // update lastFrame and firstFrame
                                lastFrame = getPreviousFrameAndRemoveLastFrame(worker, lastFrame, pb, superCellIdx);
                                if(lastFrame.isValid() && lastFrame != firstFrame)
                                {
                                    numParticlesPerSuperCell += frameSize;
                                    firstFrame = pb.getNextFrame(firstFrame);
                                }
                            }
                        });
                }
                else
                {
                    // there are no gaps in firstFrame, goto to next frame
                    onlyMaster(
                        [&]()
                        {
                            numParticlesPerSuperCell += frameSize;
                            firstFrame = pb.getNextFrame(firstFrame);
                        });
                }

                worker.sync();
            }

            onlyMaster(
                [&]()
                {
                    /* numParticlesPerSuperCell is the number of particles in the
                     * supercell except the particles in the last frame
                     */
                    auto& superCell = pb.getSuperCell(superCellIdx);
                    superCell.setNumParticles(numParticlesPerSuperCell);
                });

            // fill all gaps in the last frame of the supercell
            KernelFillGapsLastFrame{}(worker, pb, mapper);
        }
    };

    /** shift particles leaving the supercell
     *
     * The functor fulfills the restriction that all frames except the last
     * must be fully filled with particles as can be stored in a frame.
     *
     * In case a supercell has no neighbors in some directions,
     * there must be no particles moving towards those directions.
     * So such directions would effectively be skipped.
     * It is required in case the kernel is run in the area including GUARD supercells.
     */
    struct KernelShiftParticles
    {
        /** This kernel moves particles to the next supercell
         *
         * @warning this kernel can only run with a double checker board
         *
         * @tparam T_ParBox particle data box type
         * @tparam Mapping mapper type, adheres to Mapper concept
         * @tparam T_Worker lockstep worker type
         * @tparam T_Idx supercell index type
         *
         * @param acc accelerator
         * @param pb particle box
         * @param mapper mapper from blocks to supercells
         * @param numSupercellsWithGuard number of supercells in local domain with guard
         * @param onlyProcessMustShiftSupercells whether to process only supercells with mustShift set to true
         * (optimization to be used with particle pusher) or process all supercells
         */
        template<typename T_ParBox, typename Mapping, typename T_Worker, typename T_Idx>
        DINLINE void operator()(
            T_Worker const& worker,
            T_ParBox pb,
            Mapping mapper,
            T_Idx numSupercellsWithGuard,
            bool onlyProcessMustShiftSupercells) const
        {
            using ParBox = T_ParBox;
            using FrameType = typename ParBox::FrameType;
            using FramePtr = typename ParBox::FramePtr;

            PMACC_CONSTEXPR_CAPTURE uint32_t dim = Mapping::Dim;
            constexpr uint32_t frameSize = math::CT::volume<typename FrameType::SuperCellSize>::type::value;
            /* number exchanges in 2D=9 and in 3D=27 */
            constexpr uint32_t numExchanges = traits::NumberOfExchanges<dim>::value;

            /* define memory for two times Exchanges
             * index range [0,numExchanges-1] are being referred to as `low frames`
             * index range [numExchanges,2*numExchanges-1] are being referred to as `high frames`
             */
            PMACC_SMEM(worker, destFrames, memory::Array<FramePtr, numExchanges * 2>);
            // count particles per frame
            PMACC_SMEM(worker, destFramesCounter, memory::Array<uint32_t, numExchanges>);

            PMACC_SMEM(worker, isProcessedSupercell, bool);

            DataSpace<dim> const superCellIdx
                = mapper.getSuperCellIndex(DataSpace<dim>(cupla::blockIdx(worker.getAcc())));

            lockstep::makeMaster(worker)(
                [&]()
                {
                    isProcessedSupercell
                        = !onlyProcessMustShiftSupercells || pb.getSuperCell(superCellIdx).mustShift();
                    if(isProcessedSupercell)
                    {
                        pb.getSuperCell(superCellIdx).setMustShift(false);
                    }
                });

            namespace particleAccAlgos = pmacc::particles::algorithm::acc;
            auto forEachFrameInSupercell
                = particleAccAlgos::makeForEachFrame<particleAccAlgos::Forward>(worker, pb, superCellIdx);

            worker.sync();
            if(!isProcessedSupercell || !forEachFrameInSupercell.hasParticles())
                return;

            auto forEachExchange = lockstep::makeForEach<numExchanges>(worker);

            auto newParticleInFrameCtx = lockstep::makeVar<int32_t>(forEachExchange, 0);

            /* if a partially filled last frame exists for the neighboring supercell,
             * each master thread (one master per direction) will load it
             */
            forEachExchange(
                [&](lockstep::Idx const idx)
                {
                    uint32_t const linearIdx = idx;
                    destFramesCounter[linearIdx] = 0u;
                    destFrames[linearIdx] = FramePtr();
                    destFrames[linearIdx + numExchanges] = FramePtr();
                    /* neighborSuperCellIdx should not be stored in a context variable.
                     * Using a context variable results into 16bit reads.
                     */
                    auto const neighborSuperCellIdx = superCellIdx + Mask::getRelativeDirections<dim>(idx + 1);
                    if(isValidSupercellIdx(T_Idx{neighborSuperCellIdx}, numSupercellsWithGuard))
                    {
                        /* load last frame of neighboring supercell */
                        FramePtr tmpFrame(pb.getLastFrame(neighborSuperCellIdx));

                        if(tmpFrame.isValid())
                        {
                            uint32_t const particlesInFrame = pb.getSuperCell(neighborSuperCellIdx).getSizeLastFrame();
                            // do not use the neighbor's last frame if it is full
                            if(particlesInFrame < frameSize)
                            {
                                newParticleInFrameCtx[idx] = -particlesInFrame;
                                destFrames[linearIdx] = tmpFrame;
                                destFramesCounter[linearIdx] = particlesInFrame;
                            }
                        }
                    }
                });

            worker.sync();

            forEachFrameInSupercell(
                /* iterate over the frame list of the current supercell */
                [&](auto const& lockstepWorker, auto& frameIterCtx)
                {
                    auto forEachParticleInFrame = forEachFrameInSupercell.lockstepForEach();

                    auto destParticleIdxCtx
                        = lockstep::makeVar<lcellId_t>(forEachParticleInFrame, lcellId_t(INV_LOC_IDX));

                    auto directionCtx = forEachParticleInFrame(
                        [&](lockstep::Idx const idx)
                        {
                            /* set to value to of multiMask to a value in range [-2, EXCHANGES - 1]
                             * -2 is no particle
                             * -1 is particle but it is not shifted (stays in supercell)
                             * >=0 particle moves in a certain direction
                             *     (@see ExchangeType in types.h)
                             */
                            int direction = frameIterCtx[idx][idx % frameSize][multiMask_] - 2;
                            if(direction >= 0)
                            {
                                destParticleIdxCtx[idx] = cupla::atomicAdd(
                                    lockstepWorker.getAcc(),
                                    &(destFramesCounter[direction]),
                                    1u,
                                    ::alpaka::hierarchy::Threads{});
                            }
                            return direction;
                        });
                    lockstepWorker.sync();

                    forEachExchange(
                        [&](lockstep::Idx const idx)
                        {
                            uint32_t const linearIdx = idx;
                            /* If the master thread (responsible for a certain direction) did not
                             * obtain a `low frame` from the neighboring super cell before the loop,
                             * it will create one now.
                             *
                             * In case not all particles that are shifted to the neighboring
                             * supercell fit into the `low frame`, a second frame is created to
                             * contain further particles, the `high frame` (default: invalid).
                             */
                            if(destFramesCounter[linearIdx] > 0u)
                            {
                                /* neighborSuperCellIdx should not be stored in a context variable.
                                 * Using a context variable results into 16bit reads.
                                 */
                                auto const neighborSuperCellIdx
                                    = superCellIdx + Mask::getRelativeDirections<dim>(linearIdx + 1);
                                if(isValidSupercellIdx(T_Idx{neighborSuperCellIdx}, numSupercellsWithGuard))
                                {
                                    /* if we had no `low frame` we load a new empty one */
                                    if(!destFrames[linearIdx].isValid())
                                    {
                                        FramePtr tmpFrame(pb.getEmptyFrame(lockstepWorker));
                                        destFrames[linearIdx] = tmpFrame;
                                        pb.setAsLastFrame(lockstepWorker, tmpFrame, neighborSuperCellIdx);
                                    }
                                    /* check if a `high frame` is needed */
                                    if(destFramesCounter[linearIdx] > frameSize)
                                    {
                                        FramePtr tmpFrame(pb.getEmptyFrame(lockstepWorker));
                                        destFrames[linearIdx + numExchanges] = tmpFrame;
                                        pb.setAsLastFrame(lockstepWorker, tmpFrame, neighborSuperCellIdx);
                                    }
                                }
                            }
                        });
                    lockstepWorker.sync();

                    forEachParticleInFrame(
                        [&](lockstep::Idx const idx)
                        {
                            /* All threads with a valid index in the neighbor's frame, valid index
                             * range is [0, frameSize * 2-1], will copy their particle to the new
                             * frame.
                             *
                             * The default value for indexes (in the destination frame) is
                             * above this range (INV_LOC_IDX) for all particles that are not shifted.
                             */
                            if(destParticleIdxCtx[idx] < frameSize * 2)
                            {
                                if(destParticleIdxCtx[idx] >= frameSize)
                                {
                                    /* use `high frame` */
                                    directionCtx[idx] += numExchanges;
                                    destParticleIdxCtx[idx] -= frameSize;
                                }
                                auto dstParticle = destFrames[directionCtx[idx]][destParticleIdxCtx[idx]];
                                auto srcParticle = frameIterCtx[idx][idx % frameSize];
                                dstParticle[multiMask_] = 1;
                                srcParticle[multiMask_] = 0;
                                auto dstFilteredParticle = particles::operations::deselect<multiMask>(dstParticle);
                                particles::operations::assign(dstFilteredParticle, srcParticle);
                            }
                        });
                    lockstepWorker.sync();

                    forEachExchange(
                        [&](lockstep::Idx const idx)
                        {
                            uint32_t const linearIdx = idx;
                            /* if the `low frame` is full, each master thread
                             * uses the `high frame` (is invalid, if still empty) as the next
                             * `low frame` for the following iteration of the loop
                             */
                            if(destFramesCounter[linearIdx] >= frameSize)
                            {
                                newParticleInFrameCtx[idx] += frameSize;
                                destFramesCounter[linearIdx] -= frameSize;
                                destFrames[linearIdx] = destFrames[linearIdx + numExchanges];
                                destFrames[linearIdx + numExchanges] = FramePtr();
                            }
                        });
                    lockstepWorker.sync();
                });

            forEachExchange(
                [&](lockstep::Idx const idx)
                {
                    newParticleInFrameCtx[idx] += destFramesCounter[idx];
                    if(newParticleInFrameCtx[idx] > 0)
                    {
                        /* neighborSuperCellIdx should not be stored in a context variable.
                         * Using a context variable results into 16bit reads.
                         */
                        auto const neighborSuperCellIdx = superCellIdx + Mask::getRelativeDirections<dim>(idx + 1);
                        if(isValidSupercellIdx(T_Idx{neighborSuperCellIdx}, numSupercellsWithGuard))
                        {
                            /* Each master thread updates the number of particles
                             * for the neighbor frame. The number of particles in the neighbor
                             * frame must be correct because fill gaps is only called on the
                             * current used supercell.
                             */
                            auto& superCell = pb.getSuperCell(neighborSuperCellIdx);
                            superCell.setNumParticles(superCell.getNumParticles() + newParticleInFrameCtx[idx]);
                        }
                    }
                });

            // fill all gaps in the frame list of the supercell
            KernelFillGaps{}(worker, pb, mapper);
        }

        /** Is the given supercell index valid
         *
         * This method must be static to workaround an internal compiler bug with g++7 with the OMP2 alpaka
         * accelerator.
         */
        template<typename T_Idx>
        static DINLINE bool isValidSupercellIdx(T_Idx const& supercellIdx, T_Idx const& numSupercells)
        {
            for(uint32_t d = 0; d < T_Idx::dim; d++)
                if((supercellIdx[d] < 0) || (supercellIdx[d] >= numSupercells[d]))
                    return false;
            return true;
        }
    };

    //! deletes all particles within an AREA
    struct KernelDeleteParticles
    {
        /** deletes all particles
         *
         * @warning the particle memory of the particle is not byte-wise zeroed
         *
         * @tparam T_ParticleBox pmacc::ParticlesBox, particle box type
         * @tparam T_Mapping mapper functor type
         *
         * @param pb particle memory
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_ParticleBox, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(T_Worker const& worker, T_ParticleBox pb, T_Mapping const mapper) const
        {
            using namespace particles::operations;

            using ParticleBox = T_ParticleBox;
            using FrameType = typename ParticleBox::FrameType;
            using FramePtr = typename ParticleBox::FramePtr;

            constexpr uint32_t dim = T_Mapping::Dim;
            constexpr uint32_t frameSize = math::CT::volume<typename FrameType::SuperCellSize>::type::value;

            DataSpace<dim> const superCellIdx
                = mapper.getSuperCellIndex(DataSpace<dim>(cupla::blockIdx(worker.getAcc())));

            PMACC_SMEM(worker, frame, FramePtr);

            auto onlyMaster = lockstep::makeMaster(worker);

            onlyMaster([&]() { frame = pb.getLastFrame(superCellIdx); });

            worker.sync();

            while(frame.isValid())
            {
                // loop over all particles in the frame
                auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

                forEachParticle(
                    [&](uint32_t const linearIdx)
                    {
                        auto particle = (frame[linearIdx]);
                        particle[multiMask_] = 0; // delete particle
                    });

                worker.sync();

                onlyMaster(
                    [&]()
                    {
                        // always remove the last frame
                        frame = getPreviousFrameAndRemoveLastFrame(worker, frame, pb, superCellIdx);
                    });
                worker.sync();
            }

            onlyMaster(
                [&]()
                {
                    // all frames and particles are removed
                    pb.getSuperCell(superCellIdx).setNumParticles(0);
                });
        }
    };

    /** copy particles from the guard to an exchange buffer
     *
     * @warning This kernel resets the number of particles in the processed supercells even
     * if there are particles left in the supercell and does not guarantee that the last frame is
     * contiguous filled.
     * Call KernelFillGaps afterwards if you need a valid number of particles
     * and a contiguously filled last frame.
     */
    struct KernelCopyGuardToExchange
    {
        /** copy guard particles to an exchange buffer
         *
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_ExchangeValueType frame type of the exchange buffer
         * @tparam T_Mapping mapper functor type
         *
         * @param pb particle memory
         * @param exchangeBox exchange buffer for particles
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_ParBox, typename T_ExchangeValueType, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(
            T_Worker const& worker,
            T_ParBox pb,
            ExchangePushDataBox<vint_t, T_ExchangeValueType, T_Mapping::Dim - 1> exchangeBox,
            T_Mapping const mapper) const
        {
            using namespace particles::operations;

            PMACC_CONSTEXPR_CAPTURE uint32_t dim = T_Mapping::Dim;
            constexpr uint32_t frameSize = math::CT::volume<typename T_ParBox::FrameType::SuperCellSize>::type::value;

            using FramePtr = typename T_ParBox::FramePtr;

            DataSpace<dim> const superCellIdx
                = mapper.getSuperCellIndex(DataSpace<dim>(cupla::blockIdx(worker.getAcc())));

            // number of particles in the current handled frame
            PMACC_SMEM(worker, numParticles, int);
            PMACC_SMEM(worker, frame, FramePtr);

            /* `exchangeChunk` is a view to a chunk of the memory in the exchange-
             * The chunk contains between 0 and `numParticles` particles
             * and is updated for each frame.
             */
            PMACC_SMEM(worker, exchangeChunk, TileDataBox<T_ExchangeValueType>);

            /* flag: define if all particles from the current frame are copied to the
             * exchange buffer
             *
             * `true` if all particles are copied, else `false`
             */
            PMACC_SMEM(worker, allParticlesCopied, bool);

            auto onlyMaster = lockstep::makeMaster(worker);

            onlyMaster(
                [&]()
                {
                    allParticlesCopied = true;
                    frame = pb.getLastFrame(superCellIdx);
                });

            worker.sync();

            while(frame.isValid() && allParticlesCopied)
            {
                // loop over all particles in the frame
                auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

                onlyMaster([&]() { numParticles = 0; });

                worker.sync();


                /* the index of the gap in the exchange box where the particle
                 * is copied to
                 */
                auto exchangeGapIdxCtx = forEachParticle(
                    [&](uint32_t const idx)
                    {
                        lcellId_t gabIdx = INV_LOC_IDX;
                        if(frame[idx][multiMask_] == 1)
                        {
                            gabIdx = kernel::atomicAllInc(worker, &numParticles, ::alpaka::hierarchy::Threads{});
                        }
                        return gabIdx;
                    });

                worker.sync();

                if(numParticles > 0)
                {
                    onlyMaster(
                        [&]()
                        {
                            // try to get as many memory as particles in the current frame
                            exchangeChunk = exchangeBox.pushN(
                                worker,
                                numParticles,
                                // Compute the target supercell depending on the exchangeType
                                DataSpaceOperations<dim>::reduce(superCellIdx, mapper.getExchangeType()),
                                ::alpaka::hierarchy::Blocks{});
                            if(exchangeChunk.getSize() < numParticles)
                                allParticlesCopied = false;
                        });

                    worker.sync();

                    forEachParticle(
                        [&](lockstep::Idx const idx)
                        {
                            if(exchangeGapIdxCtx[idx] != lcellId_t(INV_LOC_IDX)
                               && exchangeGapIdxCtx[idx] < exchangeChunk.getSize())
                            {
                                auto parDest = exchangeChunk[exchangeGapIdxCtx[idx]][0];
                                auto parSrc = frame[idx];
                                assign(parDest, parSrc);
                                parSrc[multiMask_] = 0;
                            }
                        });
                    worker.sync();
                }

                onlyMaster(
                    [&]()
                    {
                        /* do not remove the frame if we had not copied
                         * all particles from the current frame to the exchange buffer
                         */
                        if(allParticlesCopied)
                            frame = getPreviousFrameAndRemoveLastFrame(worker, frame, pb, superCellIdx);
                    });

                worker.sync();
            }
            onlyMaster(
                [&]()
                {
                    /* Mark supercell as empty even if there are particles left.
                     * This kernel not depends on the correct number particles in the supercell.
                     */
                    pb.getSuperCell(superCellIdx).setNumParticles(0);
                });
        }
    };

    //! copy particles from exchange buffer into the border of the simulation
    struct KernelInsertParticles
    {
        /** copy particles from exchange buffer into the border of the simulation
         *
         * @tparam T_ParBox pmacc::ParticlesBox, particle box type
         * @tparam T_ExchangeValueType frame type of the exchange buffer
         * @tparam T_Mapping mapper functor type
         *
         * @param pb particle memory
         * @param exchangeBox exchange box for particles
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_ParBox, typename T_ExchangeValueType, typename T_Mapping, typename T_Worker>
        DINLINE void operator()(
            T_Worker const& worker,
            T_ParBox pb,
            ExchangePopDataBox<vint_t, T_ExchangeValueType, T_Mapping::Dim - 1> exchangeBox,
            T_Mapping const mapper) const
        {
            using namespace particles::operations;

            PMACC_CONSTEXPR_CAPTURE uint32_t dim = T_Mapping::Dim;
            constexpr uint32_t frameSize = math::CT::volume<typename T_ParBox::FrameType::SuperCellSize>::type::value;

            using FramePtr = typename T_ParBox::FramePtr;

            PMACC_SMEM(worker, frame, FramePtr);
            PMACC_SMEM(worker, elementCount, uint32_t);
            PMACC_SMEM(worker, exchangeChunk, TileDataBox<T_ExchangeValueType>);


            auto onlyMaster = lockstep::makeMaster(worker);

            /* compressed index of the the supercell
             * can be uncompressed with `DataSpaceOperations< >::extend()`
             */
            auto compressedSuperCellIdxCtx = lockstep::makeVar<DataSpace<dim - 1>>(onlyMaster);

            onlyMaster(
                [&](lockstep::Idx const idx)
                {
                    exchangeChunk
                        = exchangeBox.get(cupla::blockIdx(worker.getAcc()).x, compressedSuperCellIdxCtx[idx]);
                    elementCount = exchangeChunk.getSize();
                    if(elementCount > 0u)
                    {
                        frame = pb.getEmptyFrame(worker);
                    }
                });

            worker.sync();

            // loop over all particles in the frame
            auto forEachParticle = lockstep::makeForEach<frameSize>(worker);

            forEachParticle(
                [&](uint32_t const linearIdx)
                {
                    if(linearIdx < elementCount)
                    {
                        auto parDestFull = frame[linearIdx];
                        parDestFull[multiMask_] = 1;
                        auto parSrc = exchangeChunk[linearIdx][0];
                        /*we know that source has no multiMask*/
                        auto parDest = deselect<multiMask>(parDestFull);
                        assign(parDest, parSrc);
                    }
                });

            /** @bug This synchronize fixes a kernel crash in special cases,
             * psychocoderHPC: I can't tell why.
             */
            worker.sync();

            onlyMaster(
                [&](lockstep::Idx const idx)
                {
                    if(elementCount > 0u)
                    {
                        // compute the super cell position in target frame to insert into
                        //! @todo: offset == simulation border should be passed to this func instead of being created
                        //! here
                        DataSpace<dim> dstSuperCell = DataSpaceOperations<dim - 1>::extend(
                            compressedSuperCellIdxCtx[idx],
                            mapper.getExchangeType(),
                            mapper.getGridSuperCells(),
                            mapper.getGuardingSuperCells());

                        pb.setAsLastFrame(worker, frame, dstSuperCell);
                    }
                });
        }
    };

} // namespace pmacc
