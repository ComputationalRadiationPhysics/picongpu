/**
 * Copyright 2013 Rene Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */



#pragma once

#include <vector>
#include "traits/Unit.hpp"

namespace picongpu
{

namespace traits
{

template<typename T_Type>
struct Unit<position<T_Type> >
{
  static std::vector<double> get()
  {
      std::vector<double> unit(simDim);
      /* in-cell position needs two transformations to get to SI:
         in-cell [0;1) -> dimensionless scaling to grid -> SI*/
      for(uint32_t i=0;i<simDim;++i)
        unit[i]=cellSize[i]*UNIT_LENGTH;

      return unit;
  }
};

template<>
struct Unit<radiationFlag>
{
  static std::vector<double> get()
  {
      std::vector<double> unit;
      return unit;
  }
};

template<>
struct Unit<momentum >
{
  static std::vector<double> get()
  {
      std::vector<double> unit(simDim);
      for(uint32_t i=0;i<simDim;++i)
        unit[i]=UNIT_MASS*UNIT_SPEED;

      return unit;
  }
};

template<>
struct Unit<momentumPrev1> 
{
  static std::vector<double> get()
  {
      std::vector<double> unit(simDim);
      for(uint32_t i=0;i<simDim;++i)
        unit[i]=UNIT_MASS*UNIT_SPEED;

      return unit;
  }
};

template<>
struct Unit<weighting >
{
  static std::vector<double> get()
  {
      std::vector<double> unit;
      return unit;
  }
};

template<typename T_Type>
struct Unit<globalCellIdx<T_Type> >
{
  static std::vector<double> get()
  {
      std::vector<double> unit(simDim);
      for(uint32_t i=0;i<simDim;++i)
        unit[i]=1.0;
      return unit;
  }
};


}//namespace traits
} //namespace picongpu
