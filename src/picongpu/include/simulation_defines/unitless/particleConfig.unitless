/**
 * Copyright 2013 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "static_assert.hpp"

namespace picongpu
{
    // electron temperature
    const double ELECTRON_TEMPERATURE_SI_JOULE = ELECTRON_TEMPERATURE_keV * UNITCONV_keV_to_Joule; //unit: Joule
    const float_X ELECTRON_TEMPERATURE = float_X(ELECTRON_TEMPERATURE_SI_JOULE / UNIT_ENERGY);

    // ion temperature
    const double ION_TEMPERATURE_SI_JOULE = ION_TEMPERATURE_keV * UNITCONV_keV_to_Joule; //unit Joule
    const float_X ION_TEMPERATURE = float_X(ION_TEMPERATURE_SI_JOULE / UNIT_ENERGY);

    /* Avoid non-physical drift velocities: */
    PMACC_CASSERT_MSG(Drift_velocity_wrong___no_drift_means_gamma_eq_1,
                        (PARTICLE_INIT_DRIFT_GAMMA)>=1.0);
    PMACC_CASSERT_MSG(Drift_velocity_wrong___no_drift_means_gamma_eq_1,
                        (PARTICLE_INIT_DRIFT_GAMMA_MIDDLE)>=1.0);

    namespace particleInitQuietStart
    {

#if(SIMDIM==DIM3)

        CONST_VECTOR(int,DIM3,num_particle_per_cell,NUM_PARTICLES_PER_CELL_X,NUM_PARTICLES_PER_CELL_Y,NUM_PARTICLES_PER_CELL_Z);
#elif(SIMDIM==DIM2)

        CONST_VECTOR(int,DIM2,num_particle_per_cell,NUM_PARTICLES_PER_CELL_X,NUM_PARTICLES_PER_CELL_Y);
#endif

    }
}

// include implemented particle initializations
//
#include "particles/init/particleInitRandomPos.hpp"
#include "particles/init/particleInitQuietStart.hpp"
