/**
 * Copyright 2013 Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 


#pragma once

#include "static_assert.hpp"


#if (ENABLE_RADIATION == 1 )

//PMACC_CASSERT_MSG(We_not_support_radiation_if_ENABLE_IONS_is_set_to_1__change_ENABLE_IONS_in_file_componentsConfig_param,ENABLE_IONS==0);
PMACC_CASSERT_MSG(ENABLE_ELECTRONS_must_set_to_1__change_ENABLE_ELECTRONS_in_file_componentsConfig_param,ENABLE_ELECTRONS==1);


namespace picongpu
{
  namespace rad_linear_frequencies
  {
    const float_X omega_min = SI::omega_min*UNIT_TIME;
    const float_X omega_max = SI::omega_max*UNIT_TIME;
    const float_X delta_omega = (float_X) ((omega_max - omega_min) / (float_X) (N_omega - 1)); // difference beween two omega

    const unsigned int blocksize_omega = picongpu::MappingDesc::SuperCellSize::elements;
    const unsigned int gridsize_omega = N_omega / blocksize_omega; // size of grid (dim: x); radiation
  }
}


namespace picongpu
{
  namespace rad_log_frequencies
  {
    const float_X omega_min = (SI::omega_min*UNIT_TIME);
    const float_X omega_max = (SI::omega_max*UNIT_TIME);
    //const numtype2 delta_omega_log = (numtype2) ((omega_log_max - omega_log_min) / (double) (N_omega - 1)); // difference beween two omega

    const unsigned int blocksize_omega = picongpu::MappingDesc::SuperCellSize::elements;
    const unsigned int gridsize_omega = N_omega / blocksize_omega; // size of grid (dim: x); radiation
  }
}

namespace picongpu
{
  namespace rad_frequencies_from_list
  {
    const unsigned int blocksize_omega = picongpu::MappingDesc::SuperCellSize::elements;
    const unsigned int gridsize_omega = N_omega / blocksize_omega; // size of grid (dim: x); radiation
  }
}



namespace parameters
{

    const unsigned int gridsize_theta = N_observer; // size of grid /dim: y); radiation

}

#endif


#include "plugins/radiation/frequencies/radiation_lin_freq.hpp"
#include "plugins/radiation/frequencies/radiation_log_freq.hpp"
#include "plugins/radiation/frequencies/radiation_list_freq.hpp"
