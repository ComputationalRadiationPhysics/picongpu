/**
 * Copyright 2013-2016 Axel Huebl, Rene Widera, Felix Schmitt,
 * Benjamin Worpitz, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include <boost/mpl/vector.hpp>
#include <boost/mpl/pair.hpp>
#include <boost/mpl/int.hpp>

#include "compileTime/conversion/MakeSeq.hpp"

/** some forward declarations we need */
#include "fields/Fields.def"
#include "particles/particleToGrid/ComputeGridValuePerFrame.def"

namespace picongpu
{
    /** FieldTmp output (calculated at runtime) *******************************
     *
     * you can choose any of these particle to grid projections:
     *   - CreateDensityOperation: particle position + shape on the grid
     *   - CreateChargeDensityOperation: density * charge
     *   - CreateMidCurrentDensityComponentOperation:
     *                                   density * charge * velocity_component
     *   - CreateCounterOperation: counts point like particles per cell (debug)
     *   - CreateEnergyDensityOperation: particle energy density with respect
     *                                   to shape
     *   - CreateEnergyOperation: particle energy with respect to shape
     *   - CreateMomentumComponentOperation: ratio between a selected momentum
     *                                       component and the absolute
     *                                       momentum with respect to shape
     *   - CreateLarmorPowerOperation: radiated larmor power (needs ENABLE_RADIATION)
     */
    using namespace particleToGrid;

    /* ChargeDensity section */
    typedef bmpl::transform<
            VectorAllSpecies,
            CreateChargeDensityOperation<bmpl::_1>
            >::type ChargeDensity_Seq;

    /* ParticleCounter section */
    typedef bmpl::transform<
            VectorAllSpecies,
            CreateCounterOperation<bmpl::_1>
            >::type Counter_Seq;

    /* EnergyDensity section */
    typedef bmpl::transform<
            VectorAllSpecies,
            CreateEnergyDensityOperation<bmpl::_1>
            >::type EnergyDensity_Seq;

    /* CreateMomentumComponentOperation section: define "component" as
       0=X (default), 1=Y or 2=Z (results: [-1.:1.])
     */
    typedef bmpl::transform<
            VectorAllSpecies,
            CreateMomentumComponentOperation<bmpl::_1, bmpl::int_<0> >
            >::type MomentumComponent_Seq;


    /** FieldTmpSolvers groups all solvers that create data for FieldTmp ******
     *
     * FieldTmpSolvers is used in @see FieldTmp to calculate the exchange size
     */
    typedef MakeSeq<
        ChargeDensity_Seq,
        Counter_Seq,
        EnergyDensity_Seq,
        MomentumComponent_Seq
    >::type FieldTmpSolvers;


    /** FileOutputFields: Groups all Fields that shall be dumped *************/

    /** Possible native fields: FieldE, FieldB, FieldJ
     */
    typedef MakeSeq<FieldE, FieldB>::type NativeFileOutputFields;

    typedef MakeSeq<
        NativeFileOutputFields,
        FieldTmpSolvers
    >::type FileOutputFields;


    /** FileOutputParticles: Groups all Species that shall be dumped **********
     *
     * hint: to disable particle output set to
     *   typedef bmpl::vector0< > FileOutputParticles;
     */
    typedef VectorAllSpecies FileOutputParticles;

}
