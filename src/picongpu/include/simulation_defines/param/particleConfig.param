/**
 * Copyright 2013 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "particles/startPosition/functors.def"
#include "particles/manipulators/manipulators.def"
#include "nvidia/functors/Add.hpp"
#include "nvidia/functors/Assign.hpp"

namespace picongpu
{

namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none */
    const float_X MIN_WEIGHTING = 10.0;

    const uint32_t TYPICAL_PARTICLES_PER_CELL = 2;

namespace manipulators
{

    CONST_VECTOR(float_X,3,DriftParam_direction,1.0,0.0,0.0);
    struct DriftParam
    {
        static const float_64 gamma = 1.0;
        const DriftParam_direction_t direction;
    };
    /* definition of SetDrift start*/
    typedef DriftImpl<DriftParam,nvidia::functors::Assign> AssignXDrift;

    struct TemperatureParam
    {
        /*Initial temperature
         *  unit: keV
         */
        static const float_64 temperature = 0.0;
    };
    /* definition of SetDrift start*/
    typedef TemperatureImpl<TemperatureParam,nvidia::functors::Add> AddTemperature;


    struct IfRelativeGlobalPositionParam
    {
        /* lowerBound is included in the range*/
        static const float_X lowerBound = 0.0;
        /* upperBound is excluded in the range*/
        static const float_X upperBound = 0.5;
        /* dimension for the filter
         * x = 0; y= 1; z = 2
         */
        static const uint32_t dimension = 0;
    };
    /* definition of SetDrift start*/
    typedef IfRelativeGlobalPositionImpl<IfRelativeGlobalPositionParam,AssignXDrift> AssignXDriftToLowerHalfXPosition;

} //namespace manipulators


namespace startPosition
{

    struct RandomParamater
    {
        /** Count of particles per cell at initial state
         *  unit: none */
        static const uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
    };
    /* definition of random particle start*/
    typedef RandomImpl<RandomParamater> Random;

    struct QuietParam
    {
        /** Count of particles per cell per direction at initial state
         *  unit: none */
       typedef typename mCT::shrinkTo<mCT::Int<1, TYPICAL_PARTICLES_PER_CELL, 1>, simDim>::type numParticlesPerDimension;
    };

    /* definition of random particle start*/
    typedef QuietImpl<QuietParam> Quiet;


} //namespace startPosition
} //namespace particles

} //namespac picongpu
