/**
 * Copyright 2013-2014 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include "particles/gasProfiles/profiles.def"

namespace picongpu
{
namespace SI
{
/** The maximum density in particles per m^3 in the gas distribution
 *  unit: ELEMENTS/m^3
 *
 * He (2e- / Atom ) with 1.e15 He / m^3
 *                      = 2.e15 e- / m^3 */
const double GAS_DENSITY_SI = 1.e25;

}

//##########################################################################
//############## special gas profiles ######################################
//##########################################################################

namespace gasProfiles
{

struct GaussianParam
{
    /** Gas Formula:
            const float_X exponent = fabs((y - GAS_CENTER) / GAS_SIGMA);
            const float_X density = __expf(GAS_FACTOR*__powf(exponent, GAS_POWER));

    takes GAS_CENTER_LEFT for y < GAS_CENTER_LEFT,
          GAS_CENTER_RIGHT for y > GAS_CENTER_RIGHT,
    and exponent = float_X(0.0) for GAS_CENTER_LEFT < y < GAS_CENTER_RIGHT */
    static const float_X GAS_FACTOR = -1.0;
    static const float_X GAS_POWER = 4.0;

    /** height of vacuum area on top border
     *      this vacuum is really important because of the laser initialization,
     *      which is done in the first cell of the simulation
     *  unit: cells */
    static const uint32_t VACUUM_CELLS_Y = 50;

    struct SI
    {
        /** The central position of the gas distribution
         *  unit: meter */
        static const float_64 GAS_CENTER_LEFT = 4.62e-5;
        static const float_64 GAS_CENTER_RIGHT = 4.62e-5;
        /** the distance from GAS_CENTER until the gas density decreases to its 1/e-th part
         *  unit: meter */
        static const float_64 GAS_SIGMA_LEFT = 4.0e-5;
        static const float_64 GAS_SIGMA_RIGHT = 4.0e-5;
    };
};

/* definition of gas with gaussian profile*/
typedef GaussianImpl<GaussianParam> Gaussian;

/* definition of homogenous gas*/
typedef HomogenousImpl Homogenous;

struct LinearExponentialParam
{
    /** height of vacuum area on top border
     *      this vacuum is really important because of the laser initialization,
     *      which is done in the first cell of the simulation
     *  unit: cells */
    static const uint32_t VACUUM_CELLS_Y = 50;

    struct SI
    {
        /** Y-Position where the linear slope ends and the exponential slope
         *  begins
         *  unit: meter
         */
        static const float_64 GAS_Y_MAX_SI = 1.0e-3;

        /** Parameters for the linear slope:
         *  For Y <= GAS_Y_MAX_SI:
         *    \rho / GAS_DENSITY = A * Y + B
         *                       = element [0.0; 1.0]
         *  unit for A: 1/m
         *  unit for B: none
         */
        static const float_64 GAS_A_SI = 1.0e-3;

        /** Parameters for the exponential slope
         *  For Y > GAS_MAX_SI:
         *    let Y' = Y - GAS_MAX_SI
         *    \rho = exp[ - Y' * D ]
         *         = element [0.0; 1.0]
         *  unit: 1/m
         */
        static const float_64 GAS_D_SI = 1.0 / 1.0e-3;
    };

    static const float_X GAS_B = 0.0;
};

/* definition of gas with linear start slop and exponential end slope */
typedef LinearExponentialImpl<LinearExponentialParam> LinearExponential;


CONST_VECTOR(float_64, simDim, GaussianCloudParam_center, 1.134e-5, 1.134e-5, 1.134e-5);
CONST_VECTOR(float_64, simDim, GaussianCloudParam_sigma, 7.0e-6, 7.0e-6, 7.0e-6);

struct GaussianCloudParam
{
    /** height of vacuum area on top border
     *      this vacuum is really important because of the laser initialization,
     *      which is done in the first cell of the simulation
     *  unit: cells */
    static const uint32_t vacuum_y_cells = 50;
    /** Gas Formular:
                const float_X exponent = fabs((y - GAS_CENTER) / GAS_SIGMA);
                const float_X density = __expf(factor*__powf(exponent, power));

        takes GAS_CENTER_LEFT for y < GAS_CENTER_LEFT,
              GAS_CENTER_RIGHT for y > GAS_CENTER_RIGHT,
        and exponent = float_X(0.0) for GAS_CENTER_LEFT < y < GAS_CENTER_RIGHT */
    static const float_X factor = 1.0;
    static const float_X power = 4.0;

    struct SI
    {
        /** The central position of the gas distribution
         *  unit: meter */
        const GaussianCloudParam_center_t center;

        /** the distance from GAS_CENTER until the gas density decreases to its 1/e-th part
         *  unit: meter */
        const GaussianCloudParam_sigma_t sigma;
    };
};

/* definition of gas cloud profile*/
typedef GaussianCloudImpl<GaussianCloudParam> GaussianCloud;


/** Middle of the constant sphere
 *  unit: meter */
CONST_VECTOR(float_64, simDim, SphereFlanksParam_center, 8.0e3, 8.0e3, 8.0e3);

struct SphereFlanksParam
{
    /** height of vacuum area on top border
     *      this vacuum is really important because of the laser initialization,
     *      which is done in the first cell of the simulation
     *  unit: cells */
    static const uint32_t vacuum_y_cells = 50;

    struct SI
    {
        /** Radius of the constant sphere
         *  unit: meter */
        static const float_64 r = 1.0e3;

        /** Inner radius if you want to build a shell/ring
         *  unit: meter */
        static const float_64 ri = 0.0;

        /** Middle of the constant sphere
         *  unit: meter */
        const SphereFlanksParam_center_t center;

        /** Parameters for the exponential slope
         *  For radius > GAS_R_SI:
         *    let radius' = radius - r
         *    \rho = exp[ - radius' * exponent ]
         *  unit: 1/m
         */
        static const float_64 exponent = 1.0e-3;

    };
};

/* definition of gas sphere with flanks*/
typedef SphereFlanksImpl<SphereFlanksParam> SphereFlanks;

struct FromHDF5Param
{
    /* prefix of filename
     * full file name: gas_0.h5
     * filename = "gas"
     * iteration = 0
     */
    static const char* filename;
    static const char* datasetName;
    /* simulation step*/
    static const uint32_t iteration = 0;
    static const float_X defaultDensity = 0.0;
};
const char* FromHDF5Param::filename = (char*) "gas";
const char* FromHDF5Param::datasetName = (char*) "fields/Density_e";

/* definition of gas cloud profile*/
typedef FromHDF5Impl<FromHDF5Param> FromHDF5;

struct FreeFormulaFunctor
{

    /**
     * This formula should use SI quantities only!
     * The profile will be multiplied by GAS_DENSITY.
     *
     * @param totalCellOffset total offset including all slides [in cells]
     * @param unitLength PIConGPU unit length
     *
     * @return float_X density
     */
    HDINLINE float_X operator()(const DataSpace<simDim>& totalCellOffset, const float_64 unitLength)
    {
        const float_64 y = float_64(totalCellOffset.y()) * unitLength * 1000.0; // m -> mm

        /* triangle function example
         * for a density profile from 0 to 400 microns */
        float_64 s = 1.0 - 5.0 * math::abs(y - 0.2);

        /* all parts of the function MUST be > 0 */
        s *= float_64(s >= 0.0);
        return s;
    }
};

/* definition of gas sphere with flanks*/
typedef FreeFormulaImpl<FreeFormulaFunctor> FreeFormula;

}//namespace gasProfiles

}
