/**
 * Copyright 2013-2016 Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "dimensions/DataSpace.hpp"
#include "identifier/identifier.hpp"
#include "identifier/alias.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/Particles.hpp"
#include "particles/ParticleDescription.hpp"
#include <boost/mpl/string.hpp>

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
typedef MakeSeq<position<position_pic>, momentum, weighting>::type DefaultParticleAttributes;


/** \todo: not nice, we change this later with nice interfaces
 * Plugins should add required attributes
 */

/*add old momentum for radiation plugin*/
typedef MakeSeq<
#if(ENABLE_RADIATION == 1)
momentumPrev1
#endif
>::type AttributMomentum_mt1;

/*add old radiation flag for radiation plugin*/
typedef MakeSeq<
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
radiationFlag
#endif
>::type AttributRadiationFlag;

typedef MakeSeq<
DefaultParticleAttributes,
AttributMomentum_mt1,
AttributRadiationFlag
>::type DefaultAttributesSeq;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/

/*--------------------------- photons -------------------------------------------*/

value_identifier(float_X, DummyMass, 1.0);
value_identifier(float_X, DummyCharge, 0.0);

typedef bmpl::vector<
    particlePusher<particles::pusher::Photon>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<DummyMass>,
    chargeRatio<DummyCharge>
> ParticleFlagsPhotons;

/*define specie ions*/
typedef Particles<
    ParticleDescription<
        bmpl::string<'p'>,
        SuperCellSize,
        DefaultParticleAttributes,
        ParticleFlagsPhotons
    >
> PIC_Photons;

/*--------------------------- electrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioElectrons, 1.0);
value_identifier(float_X, ChargeRatioElectrons, 1.0);

typedef bmpl::vector<
    particlePusher<UsedParticlePusher>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<MassRatioElectrons>,
    chargeRatio<ChargeRatioElectrons>,
    bremsstrahlung_effect<PIC_Photons>
> ParticleFlagsElectrons;

/*define specie electrons*/
typedef Particles<
    ParticleDescription<
        bmpl::string<'e'>,
        SuperCellSize,
        DefaultAttributesSeq,
        ParticleFlagsElectrons
    >
> PIC_Electrons;

/*--------------------------- ions -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioIons, 1836.152672);
value_identifier(float_X, ChargeRatioIons, -1.0);

typedef bmpl::vector<
    particlePusher<UsedParticlePusher>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<MassRatioIons>,
    chargeRatio<ChargeRatioIons>
> ParticleFlagsIons;

/*define specie ions*/
typedef Particles<
    ParticleDescription<
        bmpl::string<'i'>,
        SuperCellSize,
        DefaultAttributesSeq,
        ParticleFlagsIons
    >
> PIC_Ions;

/*########################### end species ####################################*/


/*! we delete this ugly definition of VectorAllSpecies after all picongpu components
 * support multi species */
/** \todo: not nice, but this should be changed in the future*/
typedef MakeSeq<
#if (ENABLE_ELECTRONS == 1)
PIC_Electrons
#endif
>::type Species1;

typedef MakeSeq<
#if (ENABLE_IONS == 1)
PIC_Ions
#endif
>::type Species2;

typedef MakeSeq<
Species1,
Species2,
PIC_Photons
>::type VectorAllSpecies;


} //namespace picongpu
