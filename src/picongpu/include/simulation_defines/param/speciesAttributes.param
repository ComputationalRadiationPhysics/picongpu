/**
 * Copyright 2014-2017 Rene Widera, Marco Garten, Alexander Grund, Axel Huebl, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "dimensions/DataSpace.hpp"
#include "identifier/identifier.hpp"
#include "identifier/alias.hpp"
#include "identifier/value_identifier.hpp"
#include "particles/IdProvider.def"


/** \file speciesAttributes.param
 *
 * This file defines available attributes that can be stored with each particle
 * of a particle species.
 * Each attribute defined here needs to implement furthermore the traits
 *   - Unit
 *   - UnitDimension
 *   - WeightingPower
 *   - MacroWeighted
 * in \see speciesAttributes.unitless . For further information about these
 * traits see therein.
 */
namespace picongpu
{

/** relative (to cell origin) in-cell position of a particle
 * With this definition we not define any type like float3,double3,...
 * This is only a name without a specialization
 */
alias(position);

value_identifier(uint64_t,particleId,IdProvider<simDim>::getNewId());

/** specialization for the relative in-cell position */
value_identifier(floatD_X,position_pic,floatD_X::create(0.));
/** momentum at timestep t */
value_identifier(float3_X,momentum,float3_X::create(0.));
/** momentum at (previous) timestep t-1 */
value_identifier(float3_X,momentumPrev1,float3_X::create(0.));
/** weighting of the macro particle */
value_identifier(float_X, weighting, 0.0);
/** use this particle for radiation diagnostics */
value_identifier(bool, radiationFlag, false);

/** number of electrons bound to the atom / ion
 *
 * value type is float_X to avoid casts during the runtime
 * - float_X instead of integer types are reasonable because effective charge
 *   numbers are possible
 * - required for ion species if ionization is enabled
 *
 * \todo connect default to proton number
 */
value_identifier(float_X,boundElectrons,float_X(0.0));

/** Total cell index of a particle.
 *
 *  The total cell index is a
 *  N-dimensional DataSpace given by a GPU's
 *    globalDomain.offset + localDomain.offset
 *  added to the N-dimensional cell index the particle belongs to on that GPU.
 */
value_identifier(DataSpace<simDim>, totalCellIdx, DataSpace<simDim>());

/*! alias for particle shape @see species.param */
alias(shape);

/*! alias for particle pusher @see species.param */
alias(particlePusher);

/*! alias for particle ionizer @see speciesDefinition.param */
alias(ionizer);

/*! alias for ionization energy container @see ionizationEnergies.param */
alias(ionizationEnergies);

/*! alias for synchrotronPhotons @see speciesDefinition.param */
alias(synchrotronPhotons)

/*! alias for ion species used for bremsstrahlung */
alias(bremsstrahlungIons);

/*! alias for photon species used for bremsstrahlung */
alias(bremsstrahlungPhotons);

/*! alias for particle to field interpolation @see species.param */
alias(interpolation);

/*! alias for particle current solver @see species.param */
alias(current);

/*! alias for particle flag: atomic numbers @see speciesDefinition.param
 * - only reasonable for atoms / ions / nuclei */
alias(atomicNumbers);

/*! alias for particle flag: effective atomic numbers @see speciesDefinition.param
 * @see ionizerConfig.param
 */
alias(effectiveAtomicNumbers);

/*! alias for particle mass ratio
 *
 * mass ratio between base particle @see `speciesConstants.param` SI::BASE_MASS_SI
 * and a user defined species
 *
 * default value: 1.0 if unset
 */
alias(massRatio);

/*! alias for particle charge ratio
 *
 * charge ratio between base particle @see `speciesConstants.param` SI::BASE_CHARGE_SI
 * and a user defined species
 *
 * default value: 1.0 if unset
 */
alias(chargeRatio);

/*! alias for particle density ratio
 *
 * density ratio between default density @see `densityConfig.param` SI::BASE_DENSITY_SI
 * and a user defined species
 *
 * default value: 1.0 if unset
 */
alias(densityRatio);

}
