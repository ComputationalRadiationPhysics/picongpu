/**
 * Copyright 2013 Axel Huebl, Heiko Burau, Ren√© Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 


#pragma once

#include "simulation_defines.hpp"
#include "types.h"

#include "math/vector/compile-time/Vector.hpp"

#include "algorithms/Gamma.hpp"

namespace picongpu
{
    namespace particleToGrid
    {


        struct ComputeEnergyDensityOptions
        {
            static const uint32_t calcDensity = 0u;
            static const uint32_t calcEnergy = 1u;
            static const uint32_t calcEnergyDensity = 2u;
            static const uint32_t calcCounter = 3u;
#if(ENABLE_RADIATION == 1)
            static const uint32_t calcLarmorEnergy = 4u;
#endif
        };


        template<class AssignmentFunction, uint32_t calcType>
        class ComputeEnergyDensityPerFrame
        {
        public:

            static const int supp = AssignmentFunction::support;

            static const int lowerMargin = supp / 2;
            static const int upperMargin = ( supp + 1 ) / 2;
            typedef PMacc::math::CT::Int<lowerMargin, lowerMargin, lowerMargin> LowerMargin;
            typedef PMacc::math::CT::Int<upperMargin, upperMargin, upperMargin> UpperMargin;

            HDINLINE ComputeEnergyDensityPerFrame( ) /* const float3_X cellSize, const float_X deltaTime ) :
            cellSize( cellSize ), deltaTime( deltaTime ) */
            {
            }

            /** return unit for charge density * energy
             */
            HDINLINE float1_64 getUnit( ) const
            {
                const double UNIT_VOLUME = ( UNIT_LENGTH * UNIT_LENGTH * UNIT_LENGTH );

                if( calcType == ComputeEnergyDensityOptions::calcDensity )
                    return UNIT_CHARGE / UNIT_VOLUME;
                else
                if( calcType == ComputeEnergyDensityOptions::calcEnergy )
                    return UNIT_ENERGY;
                else
                if( calcType == ComputeEnergyDensityOptions::calcEnergyDensity )
                    return UNIT_CHARGE / UNIT_VOLUME * UNIT_ENERGY;
                else
                if( calcType == ComputeEnergyDensityOptions::calcCounter )
                    return NUM_EL_PER_PARTICLE;

#if(ENABLE_RADIATION == 1)
                else
                if( calcType == ComputeEnergyDensityOptions::calcLarmorEnergy )
                    return UNIT_ENERGY;
#endif
                else
                    return 1.0;
            }
            
            HINLINE std::string getName( ) const
            {
                if( calcType == ComputeEnergyDensityOptions::calcDensity )
                    return "fields_Density";
                else
                if( calcType == ComputeEnergyDensityOptions::calcEnergy )
                    return "fields_ParticleEnergy";
                else
                if( calcType == ComputeEnergyDensityOptions::calcEnergyDensity )
                    return "fields_EnergyDensity";
                else
                if( calcType == ComputeEnergyDensityOptions::calcCounter )
                    return "fields_ParticleCounter";
#if(ENABLE_RADIATION == 1)
                else
                if( calcType == ComputeEnergyDensityOptions::calcLarmorEnergy )
                    return "fields_ParticleLarmorEnergy";
#endif
                else
                    return "fields_FieldTmp";
            }

            template<class FrameType, class TVecSuperCell, class BoxTmp >
            DINLINE void operator( )( FrameType& frame, const int localIdx,
                                         const TVecSuperCell superCell,
                                         BoxTmp& tmpBox )
            {

                PMACC_AUTO(particle,frame[localIdx]);
                typedef float_X WeightingType;

                const float_X weighting = particle[weighting_];
                const float3_X pos = particle[position_];
                const float3_X mom = particle[momentum_];
#if(ENABLE_RADIATION == 1)
                const float3_X mom_mt1 = particle[momentumPrev1_];
                const float3_X mom_dt = mom - mom_mt1;
#endif
                const float_X mass = frame.getMass( weighting );
                const float_X charge = frame.getCharge( weighting );

                const int particleCellIdx = particle[localCellIdx_];
                const DataSpace<TVecSuperCell::dim> localCell( DataSpaceOperations<TVecSuperCell::dim>::template map<TVecSuperCell > ( particleCellIdx ) );

                Gamma<float_X> calcGamma;
                const typename Gamma<float_X>::valueType gamma = calcGamma( mom, mass );
                const float_X c2 = SPEED_OF_LIGHT * SPEED_OF_LIGHT;

                const float_X energy = ( gamma - float_X( 1.0 ) ) * mass * c2;
#if(ENABLE_RADIATION == 1)
                const float_X el_factor = charge * charge
                    / ( 6.0 * PI * EPS0 *
                        c2 * c2 * SPEED_OF_LIGHT * mass * mass );
                const float_X energyLarmor = el_factor * math::pow(gamma, 4)
                    * ( math::abs2( mom_dt ) -
                        math::abs2( math::cross(mom, mom_dt) ) );
#endif
                const float_X particleChargeDensity = charge / ( CELL_WIDTH * CELL_HEIGHT * CELL_DEPTH );

                /** Shift to the cell the particle belongs to */
                PMACC_AUTO( fieldTmpShiftToParticle, tmpBox.shift( localCell ) );

                /** loop around local super cell position (regarding shape)
                 *  \todo take care of non-yee cells
                 */
                for( int k = -lowerMargin; k <= upperMargin; ++k )
                {
                    const float_X assignZ = AssignmentFunction( )( float_X( k ) - pos.z( ) );
                    for( int j = -lowerMargin; j <= upperMargin; ++j )
                    {
                        const float_X assignY = AssignmentFunction( )( float_X( j ) - pos.y( ) );
                        for( int i = -lowerMargin; i <= upperMargin; ++i )
                        {
                            DataSpace<simDim> offsetToBaseCell( i, j, k );

                            const float_X assignX = AssignmentFunction( )( float_X( i ) - pos.x( ) );

                            /** multiply charge, devide by cell volume and multiply by
                             *  energy of this particle
                             */
                            const float_X assignComb = assignX * assignY * assignZ;

                            if( calcType == ComputeEnergyDensityOptions::calcDensity )
                                atomicAddWrapper( &(fieldTmpShiftToParticle( offsetToBaseCell ).x()),
                                                  assignComb * particleChargeDensity );

                            if( calcType == ComputeEnergyDensityOptions::calcEnergy )
                                atomicAddWrapper( &(fieldTmpShiftToParticle( offsetToBaseCell ).x()),
                                                  assignComb * energy );

                            if( calcType == ComputeEnergyDensityOptions::calcEnergyDensity )
                                atomicAddWrapper( &(fieldTmpShiftToParticle( offsetToBaseCell ).x()),
                                                  assignComb * particleChargeDensity * energy );
                            
                            if( calcType == ComputeEnergyDensityOptions::calcCounter )
                                atomicAddWrapper( &(fieldTmpShiftToParticle( offsetToBaseCell ).x()),
                                                  assignComb * weighting / NUM_EL_PER_PARTICLE );

#if(ENABLE_RADIATION == 1)
                            if( calcType == ComputeEnergyDensityOptions::calcLarmorEnergy )
                                atomicAddWrapper( &(fieldTmpShiftToParticle( offsetToBaseCell ).x()),
                                                  assignComb * energyLarmor );
#endif
                        }
                    }
                }
            }

        private:
            //const PMACC_ALIGN( cellSize, float3_X );
            //const PMACC_ALIGN( deltaTime, float );
        };

    } // namespace particleToGrid
} // namespace picongpu
