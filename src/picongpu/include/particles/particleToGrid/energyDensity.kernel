/**
 * Copyright 2013-2014 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "types.h"

#include "math/vector/compile-time/Vector.hpp"

#include "algorithms/Gamma.hpp"

namespace picongpu
{
namespace particleToGrid
{

struct ComputeEnergyDensityOptions
{
    static const uint32_t calcDensity = 0u;
    static const uint32_t calcEnergy = 1u;
    static const uint32_t calcEnergyDensity = 2u;
    static const uint32_t calcCounter = 3u;
#if(ENABLE_RADIATION == 1)
    static const uint32_t calcLarmorEnergy = 4u;
#endif
};

template<class AssignmentFunction, uint32_t calcType>
class ComputeEnergyDensityPerFrame
{
public:

    static const int supp = AssignmentFunction::support;

    static const int lowerMargin = supp / 2;
    static const int upperMargin = (supp + 1) / 2;
    typedef typename PMacc::math::CT::make_Int<simDim, lowerMargin>::type LowerMargin;
    typedef typename PMacc::math::CT::make_Int<simDim, upperMargin>::type UpperMargin;

    HDINLINE ComputeEnergyDensityPerFrame()
    {
    }

    /** return unit for charge density * energy
     */
    HDINLINE float1_64 getUnit() const
    {
        const double UNIT_VOLUME = (UNIT_LENGTH * UNIT_LENGTH * UNIT_LENGTH);

        if (calcType == ComputeEnergyDensityOptions::calcDensity)
            return UNIT_CHARGE / UNIT_VOLUME;
        else
            if (calcType == ComputeEnergyDensityOptions::calcEnergy)
            return UNIT_ENERGY;
        else
            if (calcType == ComputeEnergyDensityOptions::calcEnergyDensity)
            return UNIT_CHARGE / UNIT_VOLUME * UNIT_ENERGY;
        else
            if (calcType == ComputeEnergyDensityOptions::calcCounter)
            return NUM_EL_PER_PARTICLE;

#if(ENABLE_RADIATION == 1)
        else
            if (calcType == ComputeEnergyDensityOptions::calcLarmorEnergy)
            return UNIT_ENERGY;
#endif
        else
            return 1.0;
    }

    HINLINE std::string getName() const
    {
        if (calcType == ComputeEnergyDensityOptions::calcDensity)
            return "Density";
        else
            if (calcType == ComputeEnergyDensityOptions::calcEnergy)
            return "ParticleEnergy";
        else
            if (calcType == ComputeEnergyDensityOptions::calcEnergyDensity)
            return "EnergyDensity";
        else
            if (calcType == ComputeEnergyDensityOptions::calcCounter)
            return "ParticleCounter";
#if(ENABLE_RADIATION == 1)
        else
            if (calcType == ComputeEnergyDensityOptions::calcLarmorEnergy)
            return "fields_ParticleLarmorEnergy";
#endif
        else
            return "FieldTmp";
    }

    template<class FrameType, class TVecSuperCell, class BoxTmp >
    DINLINE void operator()(FrameType& frame, const int localIdx,
                            const TVecSuperCell superCell,
                            BoxTmp& tmpBox)
    {

        PMACC_AUTO(particle, frame[localIdx]);
        typedef float_X WeightingType;

        const float_X weighting = particle[weighting_];
        const floatD_X pos = particle[position_];
        const float3_X mom = particle[momentum_];
#if(ENABLE_RADIATION == 1)
        const float3_X mom_mt1 = particle[momentumPrev1_];
        const float3_X mom_dt = mom - mom_mt1;
#endif
        const float_X mass = frame.getMass(weighting);
        const float_X charge = frame.getCharge(weighting);

        const int particleCellIdx = particle[localCellIdx_];
        const DataSpace<TVecSuperCell::dim> localCell(DataSpaceOperations<TVecSuperCell::dim>::template map<TVecSuperCell > (particleCellIdx));

        Gamma<float_X> calcGamma;
        const typename Gamma<float_X>::valueType gamma = calcGamma(mom, mass);
        const float_X c2 = SPEED_OF_LIGHT * SPEED_OF_LIGHT;

        const float_X energy = (gamma - float_X(1.0)) * mass * c2;
#if(ENABLE_RADIATION == 1)
        const float_X el_factor = charge * charge
            / (6.0 * PI * EPS0 *
               c2 * c2 * SPEED_OF_LIGHT * mass * mass);
        const float_X energyLarmor = el_factor * math::pow(gamma, 4)
            * (math::abs2(mom_dt) -
               math::abs2(math::cross(mom, mom_dt)));
#endif
        const float_X particleChargeDensity = charge / (CELL_VOLUME);

        /** Shift to the cell the particle belongs to */
        PMACC_AUTO(fieldTmpShiftToParticle, tmpBox.shift(localCell));

        /** loop around local super cell position (regarding shape)
         * \todo take care of non-yee cells
         */
        const DataSpace<simDim> lowMargin(LowerMargin().vec());
        const DataSpace<simDim> upMargin(UpperMargin().vec());

        const DataSpace<simDim> marginSpace(upMargin + lowMargin);

        const int numWriteCells = marginSpace.productOfComponents();

        for (int i = 0; i <= numWriteCells; ++i)
        {
            /* multidimensionalIndex is only positive: defined range = [0,LowerMargin+UpperMargin]*/
            const DataSpace<simDim> multidimensionalIndex = DataSpaceOperations<simDim>::map(marginSpace, i);
            /* transform coordinate system that it is relative to particle
             * offsetToBaseCell defined range = [-LowerMargin,UpperMargin]
             */
            const DataSpace<simDim> offsetToBaseCell = multidimensionalIndex-lowMargin;
            floatD_X assign;
            for (uint32_t d = 0; d < simDim; ++d)
                assign[d] = AssignmentFunction()(float_X(offsetToBaseCell[d]) - pos[d]);


            /** multiply charge, devide by cell volume and multiply by
             * energy of this particle
             */
            const float_X assignComb = assign.productOfComponents();

            if (calcType == ComputeEnergyDensityOptions::calcDensity)
                atomicAddWrapper(&(fieldTmpShiftToParticle(offsetToBaseCell).x()),
                                 assignComb * particleChargeDensity);

            if (calcType == ComputeEnergyDensityOptions::calcEnergy)
                atomicAddWrapper(&(fieldTmpShiftToParticle(offsetToBaseCell).x()),
                                 assignComb * energy);

            if (calcType == ComputeEnergyDensityOptions::calcEnergyDensity)
                atomicAddWrapper(&(fieldTmpShiftToParticle(offsetToBaseCell).x()),
                                 assignComb * particleChargeDensity * energy);

            if (calcType == ComputeEnergyDensityOptions::calcCounter)
                atomicAddWrapper(&(fieldTmpShiftToParticle(offsetToBaseCell).x()),
                                 assignComb * weighting / NUM_EL_PER_PARTICLE);

#if(ENABLE_RADIATION == 1)
            if (calcType == ComputeEnergyDensityOptions::calcLarmorEnergy)
                atomicAddWrapper(&(fieldTmpShiftToParticle(offsetToBaseCell).x()),
                                 assignComb * energyLarmor);
#endif


        }
    }
};

} // namespace particleToGrid
} // namespace picongpu
