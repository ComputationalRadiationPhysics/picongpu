/**
 * Copyright 2013-2014 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "types.h"
#include "simulation_defines.hpp"
#include "particles/Particles.hpp"
#include "memory/boxes/DataBox.hpp"
#include "memory/boxes/PitchedBox.hpp"
#include "dimensions/DataSpaceOperations.hpp"

#include "simulation_defines.hpp"
#include "plugins/radiation/parameters.hpp"

#include "nvidia/rng/RNG.hpp"
#include "nvidia/rng/methods/Xor.hpp"
#include "nvidia/rng/distributions/Uniform_float.hpp"
#include "particles/init/particleInitRandomPos.hpp"


namespace picongpu
{

using namespace PMacc;

/** Returns the electron density.
 *  That means:
 *     The REAL number of electrons density in units of volume**-3,
 *       normed to UNIT_LENGHT**3
 *     That is NOT the macro electron density.
 *
 * @param offset The gpu offset (left top front cell in 3D)
 * @param cellIdx the current cell on this gpu
 * @return a float_X which stands for the real number of electrons per volume
 */
template<unsigned int Dim, typename FieldBox>
DINLINE float_X calcRealDensity(const DataSpace<Dim>& offset,
        const DataSpace<Dim>& localCellIdx, FieldBox fieldTmp)
{
    floatD_X physicalCellPosition;
    for (uint32_t i = 0; i < simDim; ++i)
        physicalCellPosition[i] = (localCellIdx[i] + offset[i]) * cellSize[i];

    const float_X value = gasProfile::calcNormedDensity(physicalCellPosition, localCellIdx, fieldTmp) * GAS_DENSITY;
    return value;
}

template< typename ParBox, typename FieldBox, class Mapping>
__global__ void kernelFillGridWithParticles(ParBox pb,
                                            bool isNotTop, DataSpace<simDim> gpuCelloffset,
                                            uint32_t seed, uint32_t gNrCellsY,
                                            FieldBox fieldTmp,
                                            Mapping mapper)
{
    namespace nvrng = nvidia::rng;
    namespace rngMethods = nvidia::rng::methods;
    namespace rngDistributions = nvidia::rng::distributions;

    typedef typename ParBox::FrameType FRAME;
    const DataSpace<simDim> superCells(mapper.getGridSuperCells());

    const DataSpace<simDim> block = mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx));

    __shared__ FRAME *frame;

    __syncthreads(); /*wait that all shared memory is initialised*/

    typedef typename Mapping::SuperCellSize SuperCellSize;

    const DataSpace<simDim > threadIndex(threadIdx);
    const int linearThreadIdx = DataSpaceOperations<simDim>::template map<SuperCellSize > (threadIndex);
    const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx)));

    const uint32_t linearSuperCellIdx = DataSpaceOperations<simDim>::map(
                                                                         mapper.getGridSuperCells(),
                                                                         superCellIdx);


    /* do not add particle to guarding super cells */
    for(uint32_t d=0;d<simDim;++d)
        if (block[d] == 0 || block[d] == superCells[d] - 1) return;

    /*get local cell idx*/
    const DataSpace<simDim> idx(superCellIdx * SuperCellSize::toRT() + threadIndex);

    /*delete garding cells \todo: what is if we have more than one block guarding cells*/
    const DataSpace<simDim> localCellIdx = idx - SuperCellSize::toRT();
    /*global position in simulation units (meter)*/
    const float_X yPos = (localCellIdx.y() + gpuCelloffset.y()) * CELL_HEIGHT;

    // inverse flow area
    /* calculate global size of simulation (in y direction)
     * WARNING: no sliding wndow support
     */
    const float_X sizeY = CELL_HEIGHT * float_X(gNrCellsY);
    const float_X sizeMiddleY = sizeY * MIDDLE_DRIFT_INV_SIZE_REL;
    const float_X minMiddleY = (sizeY - sizeMiddleY) * float_X(0.5);
    const float_X maxMiddleY = sizeMiddleY + minMiddleY;

    // compare global dataspace with current position
    float_X densityFactor(1.0);
    if (yPos > minMiddleY &&
        yPos < maxMiddleY)
    {
        densityFactor = float_X(PARTICLE_INIT_DENSITY_FACTOR_MIDDLE);
    }

    const uint32_t cellIdx = DataSpaceOperations<simDim>::map(
                                                              mapper.getGridSuperCells() * SuperCellSize::toRT(),
                                                              idx);
    PMACC_AUTO(rng, nvrng::create(rngMethods::Xor(seed, cellIdx), rngDistributions::Uniform_float()));

    uint32_t numParsPerCell = particleInit::NUM_PARTICLES_PER_CELL;


    /*multiply density factor to calculated manipulated middle density*/
    const float_X realDensity = densityFactor * calcRealDensity(gpuCelloffset,
            localCellIdx, fieldTmp);
    const float_X realElPerCell = realDensity * CELL_VOLUME;

    __shared__ int finished;
    if (linearThreadIdx == 0)
        finished = 1;
    __syncthreads();

    // get specific particle init rules
    particleInit::particleInitMethods initMethods;

    // decrease number of macro particles, if weighting would be too small
    float_X macroWeighting =
        initMethods.reduceParticlesToSatisfyMinWeighting(numParsPerCell,
                                                         realElPerCell);

    const uint32_t totalNumParsPerCell = numParsPerCell;

    if (numParsPerCell > 0)
        atomicExch(&finished, 0); //one or more cell has particles to create

    __syncthreads();
    if (finished == 1)
        return; // if there is no particle which has to be created

    if (linearThreadIdx == 0)
    {
        frame = &(pb.getEmptyFrame());
        pb.setAsLastFrame(*frame, block);
    }

    __syncthreads();

    // distribute the particles within the cell
    do
    {

        __syncthreads();
        if (linearThreadIdx == 0)
            finished = 1; //clear flag
        __syncthreads();

        floatD_X pos = initMethods.getPosition(rng,
                                               totalNumParsPerCell,
                                               totalNumParsPerCell - numParsPerCell);

        if (numParsPerCell > 0)
        {
            PMACC_AUTO(particle,((*frame)[linearThreadIdx]));
            particle[position_] = pos;
            particle[multiMask_] = 1;
            particle[localCellIdx_]= linearThreadIdx;
            particle[weighting_] = macroWeighting;
            particle[momentum_] = float3_X(0.0);

#if(ENABLE_RADIATION == 1)
            particle[momentumPrev1_] = momentumPrev1::getDefaultValue();
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
#if(RAD_MARK_PARTICLE==0)
            //if we need gamma filter but no mark particles at begin of simulation we set all to false
            particle[radiationFlag_] = radiationFlag::getDefaultValue();
#else
            particle[radiationFlag_] = (bool)(rng() < (1.0 / (float) RAD_MARK_PARTICLE));
#endif
#endif
#endif
            numParsPerCell--;
            if (numParsPerCell > 0)
                atomicExch(&finished, 0); //one or more cell has particles to create
        }
        __syncthreads();
        if (linearThreadIdx == 0 && finished == 0)
        {
            frame = &(pb.getEmptyFrame());
            pb.setAsLastFrame(*frame, block);
        }
    }
    while (finished == 0);
}

}
