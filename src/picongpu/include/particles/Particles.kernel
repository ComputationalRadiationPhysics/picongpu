/**
 * Copyright 2013-2016 Axel Huebl, Heiko Burau, Rene Widera, Wen Fu,
 *                     Marco Garten, Alexander Grund, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "pmacc_types.hpp"
#include "particles/frame_types.hpp"
#include "particles/memory/boxes/ParticlesBox.hpp"
#include "particles/memory/boxes/TileDataBox.hpp"
#include "simulation_types.hpp"
#include "simulation_defines.hpp"

#include "fields/FieldE.hpp"
#include "fields/FieldB.hpp"

#include "memory/boxes/DataBox.hpp"
#include "memory/boxes/CachedBox.hpp"

#include <curand_kernel.h>

#include "nvidia/functors/Assign.hpp"
#include "mappings/threads/ThreadCollective.hpp"

#include "plugins/radiation/parameters.hpp"
#if(ENABLE_RADIATION == 1)
#include "plugins/radiation/particles/PushExtension.hpp"
#endif

#include "nvidia/rng/RNG.hpp"
#include "nvidia/rng/methods/Xor.hpp"
#include "nvidia/rng/distributions/Normal_float.hpp"

#include "particles/operations/Assign.hpp"
#include "particles/operations/Deselect.hpp"
#include "nvidia/atomic.hpp"
#include "particles/InterpolationForPusher.hpp"

namespace picongpu
{

using namespace PMacc;


struct KernelDeriveParticles
{
    template<class T_MyParBox, class T_OtherFrameBox, class T_ManipulateFunctor, class Mapping>
    DINLINE void operator()(T_MyParBox myBox, T_OtherFrameBox otherBox, T_ManipulateFunctor manipulateFunctor, Mapping mapper) const
    {
        using namespace PMacc::particles::operations;
        typedef typename T_MyParBox::FramePtr MyFramePtr;
        typedef typename T_OtherFrameBox::FramePtr OtherFramePtr;

        __shared__ typename PMacc::traits::GetEmptyDefaultConstructibleType<OtherFramePtr>::type frame;

        __shared__ typename PMacc::traits::GetEmptyDefaultConstructibleType<MyFramePtr>::type myFrame;


        typedef typename Mapping::SuperCellSize SuperCellSize;


        const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx));

        if (threadIdx.x == 0)
        {
            frame = otherBox.getFirstFrame(block);
            if (frame.isValid())
            {
                //we have everything to clone
                myFrame = myBox.getEmptyFrame();
            }
        }
        __syncthreads();
        while (frame.isValid()) //move over all Frames
        {
            PMACC_AUTO(parDest, myFrame[threadIdx.x]);
            PMACC_AUTO(parSrc, frame[threadIdx.x]);
            assign(parDest, deselect<particleId>(parSrc));

            const DataSpace<simDim> localCellIdx = block * SuperCellSize::toRT()
                + DataSpaceOperations<simDim>::map<SuperCellSize>(threadIdx.x)
                - mapper.getGuardingSuperCells() * SuperCellSize::toRT();
            manipulateFunctor(localCellIdx,
                              parDest, parSrc,
                              true, parSrc[multiMask_] == 1);

            __syncthreads();

            if (threadIdx.x == 0)
            {
                myBox.setAsLastFrame(myFrame, block);

                frame = otherBox.getNextFrame(frame);
                if (frame.isValid())
                {
                    myFrame = myBox.getEmptyFrame();
                }
            }
            __syncthreads();
        }
    }
};

struct KernelManipulateAllParticles
{
    /* kernel must called with one dimension for blockSize */
    template<typename T_ParticleFunctor,typename T_ParBox,  class Mapping>
    DINLINE void operator()(
        T_ParBox pb,
        T_ParticleFunctor particleFunctor,
        Mapping mapper) const
    {
        typedef typename T_ParBox::FramePtr FramePtr;
        __shared__ typename PMacc::traits::GetEmptyDefaultConstructibleType<FramePtr>::type frame;

        typedef typename Mapping::SuperCellSize SuperCellSize;


        const DataSpace<simDim > threadIndex(threadIdx);
        const int linearThreadIdx = DataSpaceOperations<simDim>::template map<SuperCellSize > (threadIndex);

        const DataSpace<simDim> superCellIdx(mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx)));

        if (linearThreadIdx == 0)
        {
            frame = pb.getLastFrame(superCellIdx);
        }

        __syncthreads();
        if (!frame.isValid())
            return; //end kernel if we have no frames

        /* BUGFIX to issue #538
         * volatile prohibits that the compiler creates wrong code*/
        volatile bool isParticle = (*frame)[linearThreadIdx][multiMask_];

        const DataSpace<simDim> idx(superCellIdx * SuperCellSize::toRT() + threadIndex);
        const DataSpace<simDim> localCellIdx = idx - mapper.getGuardingSuperCells() * SuperCellSize::toRT();


        __syncthreads();

        while (frame.isValid())
        {
            PMACC_AUTO(particle, frame[linearThreadIdx]);
            particleFunctor(localCellIdx, particle, particle, isParticle, isParticle);

            __syncthreads();
            if (linearThreadIdx == 0)
            {
                frame = pb.getPreviousFrame(frame);
            }
            isParticle = true;
            __syncthreads();
        }
    }
};

template< class BlockDescription_ >
struct KernelMoveAndMarkParticles
{
    template<class ParBox, class BBox, class EBox, class Mapping, class FrameSolver>
    DINLINE void operator()(
       ParBox pb,
       EBox fieldE,
       BBox fieldB,
       FrameSolver frameSolver,
       Mapping mapper) const
   {
       /* definitions for domain variables, like indices of blocks and threads
        *
        * conversion from block to linear frames */
       typedef typename BlockDescription_::SuperCellSize SuperCellSize;
       typedef typename ParBox::FramePtr FramePtr;

       const DataSpace<simDim> block(mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx)));


       const DataSpace<simDim > threadIndex(threadIdx);
       const int linearThreadIdx = DataSpaceOperations<simDim>::template map<SuperCellSize > (threadIndex);


       const DataSpace<simDim> blockCell = block * SuperCellSize::toRT();



       FramePtr frame;

       __shared__ int mustShift;
       lcellId_t particlesInSuperCell;


       if (linearThreadIdx == 0)
       {
           mustShift = 0;
       }
       frame = pb.getLastFrame(block);
       particlesInSuperCell = pb.getSuperCell(block).getSizeLastFrame();

       PMACC_AUTO(cachedB, CachedBox::create < 0, typename BBox::ValueType > (BlockDescription_()));
       PMACC_AUTO(cachedE, CachedBox::create < 1, typename EBox::ValueType > (BlockDescription_()));

       __syncthreads();
       if (!frame.isValid())
           return; //end kernel if we have no frames


       PMACC_AUTO(fieldBBlock, fieldB.shift(blockCell));

       nvidia::functors::Assign assign;
       ThreadCollective<BlockDescription_> collective(linearThreadIdx);
       collective(
                 assign,
                 cachedB,
                 fieldBBlock
                 );

       PMACC_AUTO(fieldEBlock, fieldE.shift(blockCell));
       collective(
                 assign,
                 cachedE,
                 fieldEBlock
                 );
       __syncthreads();

       /*move over frames and call frame solver*/
       while (frame.isValid())
       {
           if (linearThreadIdx < particlesInSuperCell)
           {
               frameSolver(*frame, linearThreadIdx, cachedB, cachedE, mustShift);
           }
           frame = pb.getPreviousFrame(frame);
           particlesInSuperCell = PMacc::math::CT::volume<SuperCellSize>::type::value;

       }
       __syncthreads();
       /*set in SuperCell the mustShift flag which is a optimization for shift particles and fillGaps*/
       if (linearThreadIdx == 0 && mustShift == 1)
       {
           pb.getSuperCell(mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx))).setMustShift(true);
       }
   }
};

template<class PushAlgo, class TVec, class T_Field2ParticleInterpolation>
struct PushParticlePerFrame
{

    template<class FrameType, class BoxB, class BoxE >
    DINLINE void operator()(FrameType& frame, int localIdx, BoxB& bBox, BoxE& eBox, int& mustShift)
    {

        typedef TVec Block;
        typedef T_Field2ParticleInterpolation Field2ParticleInterpolation;

        typedef typename BoxB::ValueType BType;
        typedef typename BoxE::ValueType EType;

        PMACC_AUTO(particle, frame[localIdx]);
        const float_X weighting = particle[weighting_];

        floatD_X pos = particle[position_];
        const int particleCellIdx = particle[localCellIdx_];

        DataSpace<TVec::dim> localCell(DataSpaceOperations<TVec::dim>::template map<TVec > (particleCellIdx));

        const fieldSolver::numericalCellType::traits::FieldPosition<FieldE> fieldPosE;
        const fieldSolver::numericalCellType::traits::FieldPosition<FieldB> fieldPosB;

        PMACC_AUTO(functorEfield, CreateInterpolationForPusher<Field2ParticleInterpolation>()( eBox.shift(localCell).toCursor(), fieldPosE() ));
        PMACC_AUTO(functorBfield, CreateInterpolationForPusher<Field2ParticleInterpolation>()( bBox.shift(localCell).toCursor(), fieldPosB() ));

        float3_X mom = particle[momentum_];
        const float_X mass = attribute::getMass(weighting,particle);
#if(ENABLE_RADIATION == 1)
        radiation::PushExtension < (RAD_MARK_PARTICLE > 1) || (RAD_ACTIVATE_GAMMA_FILTER != 0) > extensionRadiation;
        float3_X& mom_mt1 = particle[momentumPrev1_];
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
        bool& radiationFlag = particle[radiationFlag_];
        extensionRadiation(mom_mt1, mom, mass, radiationFlag);
#else
        extensionRadiation(mom_mt1, mom, mass);
#endif
#endif
        PushAlgo push;
        push(
             functorBfield,
             functorEfield,
             pos,
             mom,
             mass,
             attribute::getCharge(weighting,particle),
             weighting
             );
        particle[momentum_] = mom;


        DataSpace<simDim> dir;
        for (uint32_t i = 0; i < simDim; ++i)
        {
            /* ATTENTION we must handle float rounding errors
             * pos in range [-1;2)
             *
             * If pos is negative and very near to 0 (e.g. pos < -1e-8)
             * and we move pos with pos+=1.0 back to normal in cell postion
             * we get a rounding error and pos is assigned to 1. This breaks
             * our in cell definition range [0,1)
             *
             * if pos negativ moveDir is set to -1
             * if pos positive and >1 moveDir is set to +1
             * 0 (zero) if particle stays in cell
             */
            float_X moveDir = math::floor(pos[i]);
            /* shift pos back to cell range [0;1)*/
            pos[i] -= moveDir;
            /* check for rounding errors and correct them
             * if position now is 1 we have a rounding error
             *
             * We correct moveDir that we not have left the cell
             */
            const float_X valueCorrector = math::floor(pos[i]);
            /* One has also to correct moveDir for the following reason:
             * Imagine a new particle moves to -1e-20, leaving the cell to the left,
             * setting moveDir to -1.
             * The new in-cell position will be -1e-20 + 1.0,
             * which can flip to 1.0 (wrong value).
             * We move the particle back to the old cell at position 0.0 and
             * moveDir has to be corrected back, too (add +1 again).*/
            moveDir += valueCorrector;
            /* If we have corrected moveDir we must set pos to 0 */
            pos[i] -= valueCorrector;
            dir[i] = precisionCast<int>(moveDir);
        }
        particle[position_] = pos;

        /* new local cell position after particle move
         * can be out of supercell
         */
        localCell += dir;

        /* ATTENTION ATTENTION we cast to unsigned, this means that a negative
         * direction is know a very very big number, than we compare with supercell!
         *
         * if particle is inside of the supercell the **unsigned** representation
         * of dir is always >= size of the supercell
         */
        for (uint32_t i = 0; i < simDim; ++i)
            dir[i] *= precisionCast<uint32_t>(localCell[i]) >= precisionCast<uint32_t>(TVec::toRT()[i]) ? 1 : 0;

        /* if partice is outside of the supercell we use mod to
         * set particle at cell supercellSize to 1
         * and partticle at cell -1 to supercellSize-1
         * % (mod) can't use with negativ numbers, we add one supercellSize to hide this
         *
        localCell.x() = (localCell.x() + TVec::x) % TVec::x;
        localCell.y() = (localCell.y() + TVec::y) % TVec::y;
        localCell.z() = (localCell.z() + TVec::z) % TVec::z;
         */

        /*dir is only +1 or -1 if particle is outside of supercell
         * y=cell-(dir*superCell_size)
         * y=0 if dir==-1
         * y=superCell_size if dir==+1
         * for dir 0 localCel is not changed
         */
        localCell -= (dir * TVec::toRT());
        /*calculate one dimensional cell index*/
        particle[localCellIdx_] = DataSpaceOperations<TVec::dim>::template map<TVec > (localCell);

        /* [ dir + int(dir < 0)*3 ] == [ (dir + 3) %3 = y ]
         * but without modulo
         * y=0 for dir = 0
         * y=1 for dir = 1
         * y=2 for dir = -1
         */
        int direction = 1;
        uint32_t exchangeType = 1; // see libPMacc/include/types.h for RIGHT, BOTTOM and BACK
        for (uint32_t i = 0; i < simDim; ++i)
        {
            direction += (dir[i] == -1 ? 2 : dir[i]) * exchangeType;
            exchangeType *= 3; // =3^i (1=RIGHT, 3=BOTTOM; 9=BACK)
        }

        particle[multiMask_] = direction;

        /* set our tuning flag if minimal one particle leave the supercell
         * This flag is needed for later fast shift of particles only if needed
         */
        if (direction >= 2)
        {
            /* if we did not use atomic we would get a WAW error */
            nvidia::atomicAllExch(&mustShift, 1);
        }
    }
};



} //namespace
