#!/usr/bin/env python
#
# Copyright 2015 Richard Pausch
#
# This file is part of PIConGPU.
#
# PIConGPU is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PIConGPU is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PIConGPU.
# If not, see <http://www.gnu.org/licenses/>.
#



__doc__ = '''
This program compares the energy evolution of two PIConGPU runs.
Just give the directory of two PIConGPU runs and this program will
get all values needed if they are available.
You should activate `--energy_fields` and any `--energy_X` (X any species)
for both simulation runs with the same dumping period. 
A different number of particle species between both simulations
is possible.
Plotted are:
x-axis: time steps,
y-axis: change in total energy.
Developer: Richard Pausch
'''

import argparse
import os
import sys
import re
import numpy as np
import matplotlib.pyplot as plt


## set up argument parser ##
parser = argparse.ArgumentParser(
    description=__doc__,
    epilog='For further questions please contact Richard Pausch.'
    )

parser.add_argument(metavar="[directory]",
                    dest="dir_run1",
                    help='directory with reference PIConGPU run',
                    action='store')

parser.add_argument(metavar='[directory]',
                    dest="dir_run2",
                    help='directory with PIConGPU run to compare with',
                    action='store')

parser.add_argument("--label1",
                    metavar='[string]',
                    dest="label1",
                    default="dev",
                    help='label first simulation (default: dev)')

parser.add_argument("--label2",
                    metavar='[string]',
                    dest="label2",
                    default="branch",
                    help='label second simulation (default: branch)')

parser.add_argument("--diff",
                    dest="boolDiff",
                    action='store_true',
                    help='show difference between both simulations')

parser.add_argument("--noRelative",
                    dest="boolRelative",
                    action="store_false",
                    help="do not plot evolution relative to initial value")

args = parser.parse_args()


## get directories from parser ##
directories = [args.dir_run1, args.dir_run2]


## check if directories exit ###
simDir = "/simOutput/"

warningText1 = "The directory number {} does not exist ({})." 
warningText2 = "The directory number {} does not (yet) contain {}."
for i in range(2):
    if not os.path.isdir(directories[i]):
        sys.exit(warningText1.format(i+1, directories[i]))

    if not os.path.isdir(directories[i]+simDir):
        sys.exit(warningText2.format(i+1, simDir))

if directories[0] == directories[1]:
    sys.exit("We do not allow cheating! Compare two different runs.")


## lists for data from simulations ##
Energies = []
Times = []


## load data from both directories ##
for sim in directories:
    mydir = sim+simDir
    # get relevant files with energy
    files = [f for f in os.listdir(mydir)
             if os.path.isfile(os.path.join(mydir, f)) and re.search('^Energy.*.dat', f)]
    # verbose output
    print "\nFor directory: \n\t{}".format(sim)
    print "the following files are considered for calculating the total energy:"
    for f in files:
        print "\t \t - {}".format(f)

    # read time steps from first file in list
    Time = np.loadtxt(os.path.join(mydir,files[0]))[:,0]
    # allocate memory for total energy
    Energy = np.zeros(len(Time))

    # go through all files
    for f in files:
        if not np.array_equal(Time, np.loadtxt(os.path.join(mydir,f))[:,0]):
            sys.exit("Time steps differ.")
        Energy += np.loadtxt(os.path.join(mydir,f))[:,1]

    # add data to lists
    Energies.append(Energy)
    Times.append(Time)

# end verbose output with newline:
print " "


## check time steps ##
if not np.array_equal(Times[0], Times[1]):
    sys.exit("Time steps differ between sim1 and sim2.")


## get values ##
startEnergy = Energies[0][0]


## plot numerical heating ##

# choose normalization
if args.boolRelative:
    norm = 100. / startEnergy # relative to startEnergy in percent
else:
    norm = 1.0 # absolute values

if not args.boolDiff:
    # plot energy evolution side by side
    plt.plot(Times[0], (Energies[0]-startEnergy)*norm, color="green", lw=3, label=args.label1)
    plt.plot(Times[1], (Energies[1]-startEnergy)*norm, "--", color="blue",  lw=5, label=args.label2)
    if args.boolRelative:
        plt.ylabel(r"$\frac{E}{E_0}-1\,[\%]$", fontsize=24)
    else:
        plt.ylabel(r"$E(t)-E_0$", fontsize=24)
    plt.legend(loc=0)
else:
    # plot difference in energy evolution
    plt.plot(Times[0], (Energies[0]-Energies[1])*norm, color="red", lw=3)
    if args.boolRelative:
        plt.ylabel(r"$\frac{E_1 - E_2}{E_1(t=0)}\,[\%]$", fontsize=24)
    else:
        plt.ylabel(r"$E_1 - E_2$", fontsize=24)



plt.xlabel("time step", fontsize=20)

plt.xticks(fontsize=16)
plt.yticks(fontsize=16)

plt.tight_layout()
plt.show()

