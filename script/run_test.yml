.test_job:
  script:
    # the default build type is Release
    # if neccesary, you can rerun the pipeline with another build type-> https://docs.gitlab.com/ee/ci/pipelines.html#manually-executing-pipelines
    # to change the build type, you must set the environment variable CUPLA_BUILD_TYPE
    - if [[ ! -v CUPLA_BUILD_TYPE ]] ; then
        CUPLA_BUILD_TYPE=Release ;
      fi
    - echo "number of processor threads $(nproc)"
    - $CXX --version
    - cmake --version
    - echo "Boost version-> $BOOST_VERSION"
    - export cupla_DIR=$CI_PROJECT_DIR
    # use one build directory for all build configurations
    - mkdir build
    - cd build
    - echo "Build type-> $CUPLA_BUILD_TYPE"
    # ALPAKA_ACCS contains the backends, which are used for each build
    # the backends are set in the sepcialized base jobs .base_gcc,.base_clang and.base_cuda
    - for CMAKE_FLAGS in $ALPAKA_ACCS ; do
        echo "###################################################"
        && echo "# Example Matrix Multiplication (adapted original)"
        && echo "###################################################"
        && echo "can not run with CPU_B_SEQ_T_SEQ due to missing elements layer in original SDK example"
        && echo "CPU_B_SEQ_T_OMP2/THREADS too many threads necessary (256)"
        && if [[ $CMAKE_FLAGS =~ -*DALPAKA_ACC_GPU_CUDA_ENABLE=ON.* ]]; then
          cmake $cupla_DIR/example/CUDASamples/matrixMul/ -DBOOST_ROOT=/opt/boost/$BOOST_VERSION $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$CUPLA_BUILD_TYPE
          && make -j
          && time ./matrixMul -wA=64 -wB=64 -hA=64 -hB=64
          && rm -r * ;
        fi
        && echo "###################################################"
        && echo "# Example Async API (adapted original)"
        && echo "###################################################"
        && echo "can not run with CPU_B_SEQ_T_SEQ due to missing elements layer in original SDK example"
        && echo "CPU_B_SEQ_T_OMP2/THREADS too many threads necessary (512)"
        && if [[ $CMAKE_FLAGS =~ -*DALPAKA_ACC_GPU_CUDA_ENABLE=ON.* ]]; then
          cmake $cupla_DIR/example/CUDASamples/asyncAPI/ -DBOOST_ROOT=/opt/boost/$BOOST_VERSION $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$CUPLA_BUILD_TYPE
          && make -j
          && time ./asyncAPI
          && rm -r * ;
        fi
        && echo "###################################################"
        && echo "# Example Async API (added elements layer)"
        && echo "###################################################"
        && cmake $cupla_DIR/example/CUDASamples/asyncAPI_tuned/ -DBOOST_ROOT=/opt/boost/$BOOST_VERSION $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$CUPLA_BUILD_TYPE
        && make -j
        && time ./asyncAPI_tuned
        && rm -r *
        && echo "###################################################"
        && echo "Example vectorAdd (added elements layer)"
        && echo "###################################################"
        && cmake $cupla_DIR/example/CUDASamples/vectorAdd/ -DBOOST_ROOT=/opt/boost/$BOOST_VERSION $CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$CUPLA_BUILD_TYPE
        && make -j
        && time ./vectorAdd 100000
        && rm -r * ;
      done
