/**
 * Copyright 2013-2014 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "particles/gasProfiles/profiles.def"

namespace picongpu
{
namespace SI
{
/** The maximum density in particles per m^3 in the gas distribution
 *  unit: ELEMENTS/m^3
 *
 * He (2e- / Atom ) with 1.e15 He / m^3
 *                      = 2.e15 e- / m^3 */
const double GAS_DENSITY_SI = 1.e25;

}

//##########################################################################
//############## special gas profiles ######################################
//##########################################################################
namespace gasProfiles
{
CONST_VECTOR(float_64, simDim, GaussianCloudParam_center, 1.024e-5, 9.072e-5, 1.024e-5);
CONST_VECTOR(float_64, simDim, GaussianCloudParam_sigma, 6.0e-6, 6.0e-6, 6.0e-6);

struct GaussianCloudParam
{
    /** height of vacuum area on top border
     *      this vacuum is really important because of the laser initialization,
     *      which is done in the first cell of the simulation
     *  unit: cells */
    static const uint32_t vacuum_y_cells = 50;
    /** Gas Formular:
                const float_X exponent = fabs((y - GAS_CENTER) / GAS_SIGMA);
                const float_X density = __expf(factor*__powf(exponent, power));

        takes GAS_CENTER_LEFT for y < GAS_CENTER_LEFT,
              GAS_CENTER_RIGHT for y > GAS_CENTER_RIGHT,
        and exponent = float_X(0.0) for GAS_CENTER_LEFT < y < GAS_CENTER_RIGHT */
    static const float_X factor = -1.0;
    static const float_X power = 2.0;

    struct SI
    {
        /** The central position of the gas distribution
         *  unit: meter */
        const GaussianCloudParam_center_t center;

        /** the distance from GAS_CENTER until the gas density decreases to its 1/e-th part
         *  unit: meter */
        const GaussianCloudParam_sigma_t sigma;
    };
};

/* definition of gas cloud profile*/
typedef GaussianCloudImpl<GaussianCloudParam> GaussianCloud;


}//namespace gasProfiles

} //namepsace picongpu
