/**
 * Copyright 2013-2014 Anton Helm, Richard Pausch
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 


#pragma once


namespace picongpu
{
namespace laserGaussianBeam
{
// Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.8e-6;

/** UNITCONV */
const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI);
const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

/** unit: W / m^2 */
//const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
/** unit: none */
//const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;

/** unit: none */
const double _A0  = 1.5;

/** unit: Volt /meter */
const double AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

/** unit: Volt /meter */
//const double AMPLITUDE_SI = 1.738e13;

/** Pulse length: sigma of std. gauss for intensity (E^2)
 *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
 *                                              2.354820045
 *  Info:             FWHM_of_Intensity = FWHM_Illumination
 *                      = what a experimentalist calls "pulse duration"
 *  unit: seconds (1 sigma) */
const double PULSE_LENGTH_SI = 10.615e-15 / 4.0; //5.0e-15; //25.0e-15 / 1.17741;

/** beam waist: distance from the axis where the pulse intensity (E^2)
 *              decreases to its 1/e^2-th part,
 *              at the focus position of the laser
 *  unit: meter */
const double W0_SI = 4.246e-6;
/** the distance to the laser focus in y-direction
 *  unit: meter */
const double FOCUS_POS_SI = 4.62e-5;
}
/** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
 *  unit: none */
const double PULSE_INIT = 20.0;

enum PolarisationType
{
    LINEAR_X = 1u,
    LINEAR_Z = 2u,
    CIRCULAR = 4u,
};
const PolarisationType Polarisation = CIRCULAR;
}

namespace laserPulseFrontTilt
{
// Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.8e-6;

/** UNITCONV */
const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / ( 4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI );
const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

/** unit: Volt /meter */
const double AMPLITUDE_SI = 1.738e13;

/** Pulse length: sigma of std. gauss for intensity (E^2)
    *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
    *                                              2.354820045
    *  Info:             FWHM_of_Intensity = FWHM_Illumination
    *                      = what a experimentalist calls "pulse duration"
    *  unit: seconds (1 sigma) */
const double PULSE_LENGTH_SI = 10.615e-15 / 4.0;

/** beam waist: distance from the axis where the pulse intensity (E^2)
    *              decreases to its 1/e^2-th part,
    *              at the focus position of the laser
    *  unit: meter */
const double W0_SI = 4.246e-6;

/** the distance to the laser focus in y-direction
    *  unit: meter */
const double FOCUS_POS_SI = 4.62e-5;

/** the tilt angle between laser propagation in y-direction and laser axis in
    *  x-direction (0 degree == no tilt)
    *  unit: degree */
const double TILT_X_SI = 0;
}
/** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
*  unit: none */
const double PULSE_INIT = 20.0;

enum PolarisationType
{
LINEAR_X = 1u,
LINEAR_Z = 2u,
CIRCULAR = 4u
};
const PolarisationType Polarisation = LINEAR_X;
}

namespace laserPlaneWave
{
// NOT-symetric sinus used: starts with phase=0 --> E-field=0
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.8e-6;

/** UNITCONV */
const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI);
const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

/** unit: W / m^2 */
//const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
/** unit: none */
//const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;

/** unit: none */
const double _A0 = 1.0;

/** unit: Volt /meter */
const double AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

/** unit: Volt /meter */
//const double AMPLITUDE_SI = 1.738e13;

/** The profile of the test Lasers 0 and 2 can be stretched by a
 *      constant area between the up and downramp
 *  unit: seconds */
const double LASER_NOFOCUS_CONSTANT_SI = 50.0*WAVE_LENGTH_SI/::picongpu::SI::SPEED_OF_LIGHT_SI;

/** Pulse length: sigma of std. gauss for intensity (E^2)
 *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
 *                                              2.354820045
 *  Info:             FWHM_of_Intensity = FWHM_Illumination
 *                      = what a experimentalist calls "pulse duration"
 *  unit: seconds (1 sigma) */
const double PULSE_LENGTH_SI = 10.615e-15 / 4.0; //5.0e-15; //25.0e-15 / 1.17741;

}

/** The laser pulse will be initialized half of PULSE_INIT times of the PULSE_LENGTH before and after the plateau
 *  unit: none */
const double RAMP_INIT = 20.6146; //25.6415;//SI::aux_calulation::PULSE_TIME_SI/SI::PULSE_LENGTH_SI;

enum PolarisationType
  {
    LINEAR_X = 1u,
    LINEAR_Z = 2u,
    CIRCULAR = 4u,
  };
const PolarisationType Polarisation = LINEAR_X;
}

namespace laserWavepacket
{
// Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.8e-6;

/** UNITCONV */
const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI);
const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

/** unit: W / m^2 */
//const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
/** unit: none */
//const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;

/** unit: none */
//const double _A0  = 3.9;

/** unit: Volt /meter */
//const double AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

/** unit: Volt /meter */
const double AMPLITUDE_SI = 1.738e13;

/** The profile of the test Lasers 0 and 2 can be stretched by a
 *      constant area between the up and downramp
 *  unit: seconds */
const double LASER_NOFOCUS_CONSTANT_SI = 7.0 * WAVE_LENGTH_SI / ::picongpu::SI::SPEED_OF_LIGHT_SI; //0.0;//50.0e-15;

/** Pulse length: sigma of std. gauss for intensity (E^2)
 *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
 *                                              2.354820045
 *  Info:             FWHM_of_Intensity = FWHM_Illumination
 *                      = what a experimentalist calls "pulse duration"
 *  unit: seconds (1 sigma) */
const double PULSE_LENGTH_SI = 10.615e-15 / 4.0; //5.0e-15; //25.0e-15 / 1.17741;

/** beam waist: distance from the axis where the pulse intensity (E^2)
 *              decreases to its 1/e^2-th part,
 *              WO_X_SI is this distance in x-direction
 *              W0_Z_SI is this distance in z-direction
 *              if both values are equal, the laser has a circular shape in x-z
 *  unit: meter */
const double W0_X_SI = 4.246e-6;
const double W0_Z_SI = W0_X_SI;
}
/** The laser pulse will be initialized half of PULSE_INIT times of the PULSE_LENGTH before plateau
and half at the end of the plateau
 *  unit: none */
const double RAMP_INIT = 20.0;

enum PolarisationType
{
    LINEAR_X = 1u,
    LINEAR_Z = 2u,
    CIRCULAR = 4u,
};
const PolarisationType Polarisation = LINEAR_X;
}


namespace laserPolynom
{
// Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.8e-6;

/** UNITCONV */
const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI);
const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

/** unit: W / m^2 */
//const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
/** unit: none */
//const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;

/** unit: none */
//const double _A0  = 3.9;

/** unit: Volt /meter */
//const double AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

/** unit: Volt /meter */
const double AMPLITUDE_SI = 1.738e13;


/** Pulse length: 
 *  PULSE_LENGTH_SI = total length of polynamial laser pulse
 *  Rise time = 0.5 * PULSE_LENGTH_SI
 *  Fall time = 0.5 * PULSE_LENGTH_SI
 *  in order to compare to a gaussian pulse: rise  time = sqrt{2} * T_{FWHM} 
 *  unit: seconds  */
const double PULSE_LENGTH_SI = 4.0e-15;

/** beam waist: distance from the axis where the pulse intensity (E^2)
 *              decreases to its 1/e^2-th part,
 *              at the focus position of the laser
 *  unit: meter */
const double W0x_SI = 4.246e-6; // waist in x-direction 
const double W0z_SI = W0x_SI; // waist in z-direction
}
}

namespace laserNone
{
namespace SI
{
/** unit: meter */
const double WAVE_LENGTH_SI = 0.0;

/** unit: Volt /meter */
const double AMPLITUDE_SI = 0.0;

const double PULSE_LENGTH_SI = 0.0;
}
}

}



