/**
 * Copyright 2013-2014 Axel Huebl, Heiko Burau, Anton Helm, 
 *                     Rene Widera, Richard Pausch, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once


namespace picongpu
{
/*! Simulation Starter ---------------------------------------------------
 *  - defaultPIConGPU         : default PIConGPU configuration
 */
namespace simulation_starter = defaultPIConGPU;

/*! Laser Configuration --------------------------------------------------
 *  - laserNone             : no laser init
 *  - laserGaussianBeam     : Gaussian beam (focusing)
 *  - laserPulseFrontTilt   : Gaussian beam with a tilted pulse envelope
 *                            in 'x' direction
 *  - laserWavepacket       : wavepacket (Gaussian in time and space, not focusing)
 *  - laserPlaneWave        : a plane wave
 */
namespace laserProfile = laserNone;

/*! Field Configuration --------------------------------------------------
 *  - fieldSolverYee : standard Yee solver
 *  - fieldSolverLehe: Num. Cherenkov free field solver in a chosen direction
 *  - fieldSolverDirSplitting: Sentoku's Directional Splitting Method
 *  - fieldSolverNone: disable the vacuum update of E and B
 *
 * * For development purposes: ---------------------------------------------
 *  - fieldSolverYeeNative : generic version of fieldSolverYee
 *    (need more shared memory per GPU and is slow)
 */
namespace fieldSolver = fieldSolverYee;

/*! Gas Configuration-----------------------------------------------------
 * Select a normed gas density profile
 *  - gasGaussian : super - Gaussian density profile
 *  - gasGaussianCloud : super - Gaussian density profile with a center position
 *  - gasLinExp : piecewise linear-exponential profile (linear first)
 *  - gasHomogeneous : constant gas density with a certain length
 *  - gasSphereFlanks : constant sphere droplet with exponentially decreasing envelope
 *  - gasFreeFormula: use a custom formula (slower)
 *  - gasFromHdf5: load gas density from HDF5 file
 *  - gasNone : just stay with a vacuum
 */
namespace gasProfile = gasNone;

/*! Backgroud Field Configuration-----------------------------------------------------
 *  - bgrNone : do not include any additional backgroundfield
 *	- bgrFreeFormula : minimal example that can be adapted according to custom formula
 *  - bgrTWTS : Gaussian 3D-TWTS laser pulse with focal geometry and correct dispersion properties.
 *				This laser can enter and exit the simulation box from arbitrary directions.
 *				Apart from the implementation as a background, this spatially and
 *				temporally varying field behaves in practical use just like a "laserProfile".
 */
namespace fieldBackground = bgrTWTS;

/*! Particle Initialization ----------------------------------------------
 *  - particleInitRandomPos  : distribute your particles uniformly random
 *  - particleInitQuietStart : distribute your particles lattice-like
 */
namespace particleInit = particleInitRandomPos;

/*enable (1) or disable (0) current calculation*/
#define ENABLE_CURRENT 0

}
