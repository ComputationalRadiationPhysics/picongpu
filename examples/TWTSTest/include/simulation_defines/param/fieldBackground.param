/**
 * Copyright 2014 Alexander Debus, Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

namespace picongpu
{

	namespace bgrNone
	{
		namespace SI
		{
		}
	}

	namespace bgrFreeFormula
	{
		namespace SI
		{
		}
	}
	
    namespace bgrTWTS
    {
		/** Add second TWTS pulse in colliding geometry
		 */
		const bool includeCollidingTWTS = false;
		
		/** Calculate the time delay such that the TWTS pulse is not inside the simulation volume at simulation start timestep=0
		 */
		const bool auto_tdelay = true;
		
        namespace SI
        {
            /** unit: meter */
            const double WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            const double UNITCONV_Intens_to_A0 = ::picongpu::SI::ELECTRON_CHARGE_SI * ::picongpu::SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::EPS0_SI);
            const double UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            //const double _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4;
            /** unit: none */
            //const double _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0;

            /** unit: none */
            const double _A0  = 0.1;

            /** unit: Volt /meter */
            const double AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

            /** unit: Volt /meter */
            //const double AMPLITUDE_SI = 1.738e13;

            /** Pulse length: sigma of std. gauss for intensity (E^2)
             *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2 * sqrt{ 2* ln(2) } ]
             *                                           2.3548200450309493820231386529194
             *  Info:             FWHM_of_Intensity = FWHM_Illumination
             *                      = what a experimentalist calls "pulse duration"
             *  unit: seconds (sigma) */
            const double PULSE_LENGTH_SI = 30.0e-15/2.354820045030949; //25.0e-15 / 1.17741;

            /** beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             *  unit: meter */
            const double WX_SI = 20.0e-6;	// Cylindrically focused spot size
			const double WY_SI = 0.01;	// TWTS pulse width (this is usually mm or longer)
            /** the distance to the laser focus in y-direction
             *  unit: meter */
            const double FOCUS_POS_SI = 25.0e-6;
			/** interaction angle between TWTS laser propagation vector and the y-axis
             *  unit: rad */
			const double PHI_SI = 90. *(PI/180.);
			/** propagation speed of overlap normalized to the speed of light. [Default: beta0=1.0]
             *  unit: speed of light */
			const double BETA0_SI = 1.0;
			
			/** Manual time delay if auto_tdelay is false
			 */
			const double tdelay= ( 10.0e-6 )/(::picongpu::SI::SPEED_OF_LIGHT_SI*BETA0_SI);
			
			
			
        }
    }

}
