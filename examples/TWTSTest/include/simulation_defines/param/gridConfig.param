/**
 * Copyright 2013 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

namespace picongpu
{

    namespace SI
    {
        /** Duration of one timestep
         *  unit: seconds */
        const double DELTA_T_SI = 0.8e-16;
        /** equals X
         *  unit: meter */
        const double CELL_WIDTH_SI = 0.1772e-6;
        /** equals Y - the propagation direction
         *  unit: meter */
        const double CELL_HEIGHT_SI = CELL_WIDTH_SI; //0.4430e-7;
        /** equals Z
         *  unit: meter */
        const double CELL_DEPTH_SI = CELL_WIDTH_SI;
    } //namespace SI

    //! Defines the size of the absorbing zone (in cells)
    const uint32_t ABSORBER_CELLS[3][2] = {
        {32, 32},  /*x direction [negative,positive]*/
        {32, 32},  /*y direction [negative,positive]*/
        {32, 32}   /*z direction [negative,positive]*/
    }; //unit: number of cells

    //! Define the strange of the absober for any direction
    const float_X ABSORBER_STRENGTH[3][2] = {
        {1.0e-3, 1.0e-3}, /*x direction [negative,positive]*/
        {1.0e-3, 1.0e-3}, /*y direction [negative,positive]*/
        {1.0e-3, 1.0e-3}  /*z direction [negative,positive]*/
    }; //unit: none

    const uint32_t ABSORBER_FADE_IN_STEPS = 16;

    /** When to move the co-moving window.
     *  An initial pseudo particle, flying with the speed of light,
     *  is fired at the begin of the simulation.
     *  When it reaches slide_point % of the absolute(*) simulation area,
     *  the co-moving window starts to move with the speed of light.
     *
     *  (*) Note: beware, that there is one "hidden" row of gpus at the y-front,
     *            when you use the co-moving window
     *  0.75 means only 75% of simulation area is used for real simulation
     */
    const double slide_point = 0.90;

}



