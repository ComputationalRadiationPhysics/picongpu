/**
 * Copyright 2013-2014 Axel Huebl, Anton Helm, Rene Widera, Felix Schmitt
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 

#pragma once


namespace picongpu
{
/*! Simulation Starter ---------------------------------------------------
 *  - defaultPIConGPU         : default PIConGPU configuration
 */
namespace simulation_starter = defaultPIConGPU;

/*! Laser Configuration --------------------------------------------------
 *  - laserNone             : no laser init
 *  - laserGaussianBeam     : Gaussian beam (focusing)
 *  - laserPulseFrontTilt   : Gaussian beam with a tilted pulse envelope 
 *                            in 'x' direction
 *  - laserWavepacket       : wavepacket (gaussian in time and space, not focusing)
 *  - laserPlaneWave        : a plane wave
 */
namespace laserProfile = laserGaussianBeam;

/*! Field Configuration --------------------------------------------------
 *  - fieldSolverYee : standard Yee solver
 *  - fieldSolverLehe: Num. Cherenkov free field solver in a choosen direction
 *  - fieldSolverDirSplitting: Sentoku's Directional Splitting Method
 *  - fieldSolverNone: disable the vacuum update of E and B
 */
#ifndef PARAM_FIELDSOLVER
#define PARAM_FIELDSOLVER fieldSolverYee
#endif
namespace fieldSolver = PARAM_FIELDSOLVER;

/*! Gas Configuration------------------------------------------------------
 * Select a normed gas density profile
 *  - gasGaussian : super - gaussian density profile
 *  - gasGaussianCloud : super - gaussian density profile with a center position
 *  - gasLinExp : piecewise linear-exponential profile (linear first)
 *  - gasHomogenous : constant gas density with a certain length
 *  - gasSphereFlanks : constant sphere droplet with exponential decr envelope
 *  - gasFreeFormula: use a custom formula (slower)
 *  - gasFromHdf5: load gas density from HDF5 file
 *  - gasNone : just stay with a vacuum
 */
#ifndef PARAM_GASPROFILE
#define PARAM_GASPROFILE gasGaussian
#endif
namespace gasProfile = PARAM_GASPROFILE;

/*! Particle Initialization ----------------------------------------------
 *  - particleInitRandomPos  : distribute your particles uniformly random
 *  - particleInitQuietStart : distribute your particles lattice-like
 */
namespace particleInit = particleInitRandomPos;

/*! particle pusher Configuration ----------------------------------------
 *  - particlePusherVay   : better suited relativistic boris pusher
 *  - particlePusherBoris : standard boris pusher
 * 
 * For development purposes: ---------------------------------------------
 *  - particlePusherNone  : no particle is pushed
 *  - particlePusherAxl   : a pusher developed at HZDR during 2011 (testing)
 *  - particlePusherFree  : free propagation, ignore fields
 *                            (= free stream model)
 *  - particlePusherPhot  : propagate with c in direction of normalized mom.
 */
#ifndef PARAM_PARTICLEPUSHER
#define PARAM_PARTICLEPUSHER particlePusherBoris
#endif
namespace particlePusher = PARAM_PARTICLEPUSHER;

/*enable (1) or disable (0) ions*/
#define ENABLE_IONS 0
/*enable (1) or disable (0) electrons*/
#define ENABLE_ELECTRONS 1

/** select current solver method -----------------------------------------
 *  - currentSolverEsirkepov: particle shapes - CIC, TSC, PCS (1st to 3rd order)
 *  - currentSolverVillaBune: particle shapes - CIC (1st order) only
 */
#ifndef PARAM_CURRENTSOLVER
#define PARAM_CURRENTSOLVER currentSolverEsirkepov
#endif
namespace currentSolver = PARAM_CURRENTSOLVER;

/*enable (1) or disable (0) current calculation*/
#ifndef ENABLE_CURRENT
#define ENABLE_CURRENT 1
#endif

}


