/**
 * Copyright 2013-2017 Rene Widera, Marco Garten, Richard Pausch,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/Particles.hpp"
#include <boost/mpl/string.hpp>

#include "particles/ionization/byField/ionizers.def"

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position<position_pic>,
    momentum,
    weighting
#if( ENABLE_RADIATION == 1 )
    , momentumPrev1
#endif
#if( RAD_MARK_PARTICLE > 1 ) || ( RAD_ACTIVATE_GAMMA_FILTER != 0 )
    , radiationFlag
#endif
>;

/* attribute sequence for species: ions */
using AttributeSeqIons = MakeSeq_t<
    DefaultParticleAttributes,
#if( PARAM_IONIZATION == 1 )
    boundElectrons
#endif
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/


/*--------------------------- electrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioElectrons, 1.0 );
value_identifier( float_X, ChargeRatioElectrons, 1.0 );

using ParticleFlagsElectrons = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioElectrons >,
    chargeRatio< ChargeRatioElectrons >
>;

/* define species: electrons */
using PIC_Electrons = Particles<
    bmpl::string< 'e' >,
    DefaultParticleAttributes,
    ParticleFlagsElectrons
>;

/*--------------------------- ions -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioIons, 1836.152672 );
value_identifier( float_X, ChargeRatioIons, -1.0 );

/*! Specify (chemical) element
 *
 * Proton and neutron numbers define the chemical element that the ion species
 * is based on. This value can be non-integer for physical models taking
 * charge shielding effects into account.
 * @see http://en.wikipedia.org/wiki/Effective_nuclear_charge
 *
 * It is wrapped into a struct because of C++ restricting floats from being
 * template arguments.
 *
 * Do not forget to set the correct mass of the atom in
 * @see physicalConstants.param !
 */
struct Hydrogen
{
    static constexpr float_X numberOfProtons  = 1.0;
    static constexpr float_X numberOfNeutrons = 0.0;
};

/*! Ionization Model Configuration ----------------------------------------
 *
 * - None : no particle is ionized
 * - BSIHydrogenLike : simple barrier suppression ionization
 * - ADKLinPol : Ammosov-Delone-Krainov tunneling ionization (H-like)
 *               -> linearly polarized lasers
 * - ADKCircPol : Ammosov-Delone-Krainov tunneling ionization (H-like)
 *                -> circularly polarized lasers
 * - Keldysh : Keldysh ionization model
 *
 * Research and development: ----------------------------------------------
 * - BSIEffectiveZ : BSI taking electron shielding into account via an effective
 *                   atomic number Z_eff
 * - BSIStarkShifted : BSI for hydrogen-like atoms and ions considering the
 *                     Stark upshift of ionization potentials
 *
 * Usage: Add a flag to the list of particle flags that has the following structure
 *
 *        ionizer< IonizationModel< Species2BCreated > >
 */

using ParticleFlagsIons = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioIons >,
    chargeRatio< ChargeRatioIons >,
#if( PARAM_IONIZATION == 1 )
    ionizer<
        particles::ionization::BSIEffectiveZ< PIC_Electrons >
    >,
    ionizationEnergies< AU::IONIZATION_ENERGY_HYDROGEN_t >,
    effectiveAtomicNumbers< Z_EFFECTIVE_HYDROGEN_t >,
#endif
    atomicNumbers< Hydrogen >
>;

/* define species: ions */
using PIC_Ions = Particles<
    bmpl::string< 'i' >,
    AttributeSeqIons,
    ParticleFlagsIons
>;

/*########################### end species ####################################*/


/*! we delete this ugly definition of VectorAllSpecies after all picongpu components
 * support multi species */
/** \todo: not nice, but this should be changed in the future*/
using Species1 = MakeSeq_t<
#if( ENABLE_ELECTRONS == 1 )
    PIC_Electrons
#endif
>;

using Species2 = MakeSeq_t<
#if( ENABLE_IONS == 1 )
    PIC_Ions
#endif
>;

using VectorAllSpecies = MakeSeq_t<
    Species1,
    Species2
>;

} //namespace picongpu
