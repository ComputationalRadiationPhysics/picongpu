/**
 * Copyright 2014-2017 Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "particles/shapes.hpp"
#include "algorithms/FieldToParticleInterpolationNative.hpp"
#include "algorithms/FieldToParticleInterpolation.hpp"
#include "algorithms/AssignedTrilinearInterpolation.hpp"
#include "particles/shapes.hpp"

#include "fields/currentDeposition/Solver.def"


/*enable (1) or disable (0) electrons*/
#define ENABLE_ELECTRONS 1
/*enable (1) or disable (0) ions*/
#ifndef PARAM_IONS
#define PARAM_IONS 0
#endif

#define ENABLE_IONS PARAM_IONS

/*enable (1) or disable (0) ionization*/
#ifndef PARAM_IONIZATION
#define PARAM_IONIZATION 0
#endif


namespace picongpu
{
/*---------------------------- generic solver---------------------------------*/

/*! Particle Shape definitions -------------------------------------------------
 *  - particles::shapes::CIC : 1st order
 *  - particles::shapes::TSC : 2nd order
 *  - particles::shapes::PCS : 3rd order
 *  - particles::shapes::P4S : 4th order
 *
 *  example:             typedef particles::shapes::CIC CICShape;
 */
#ifndef PARAM_PARTICLESHAPE
#define PARAM_PARTICLESHAPE TSC
#endif
typedef particles::shapes::PARAM_PARTICLESHAPE UsedParticleShape;

/* define which interpolation method is used to interpolate fields to particle*/
typedef FieldToParticleInterpolation<UsedParticleShape, AssignedTrilinearInterpolation> UsedField2Particle;

/*! select current solver method -----------------------------------------------
 * - currentSolver::Esirkepov<SHAPE>  : particle shapes - CIC, TSC, PCS, P4S (1st to 4th order)
 * - currentSolver::VillaBune<>       : particle shapes - CIC (1st order) only
 *
 * For development purposes: ---------------------------------------------------
 * - currentSolver::EsirkepovNative<SHAPE> : generic version of currentSolverEsirkepov
 *   without optimization (~4x slower and needs more shared memory)
 * - currentSolver::ZigZag<SHAPE>     : particle shapes - CIC, TSC, PCS, P4S (1st to 4th order)
 */
#ifndef PARAM_CURRENTSOLVER
#define PARAM_CURRENTSOLVER Esirkepov
#endif
typedef currentSolver::PARAM_CURRENTSOLVER<UsedParticleShape> UsedParticleCurrentSolver;

/*! particle pusher configuration ----------------------------------------------
 *
 * Define a pusher is optional for particles
 *
 * - particles::pusher::Vay : better suited relativistic boris pusher
 * - particles::pusher::Boris : standard boris pusher
 * - particles::pusher::ReducedLandauLifshitz : 4th order RungeKutta pusher
 *                                              with classical radiation reaction
 *
 * For development purposes: ---------------------------------------------------
 * - particles::pusher::Axel : a pusher developed at HZDR during 2011 (testing)
 * - particles::pusher::Free : free propagation, ignore fields
 * (= free stream model)
 * - particles::pusher::Photon : propagate with c in direction of normalized mom.
 */
#ifndef PARAM_PARTICLEPUSHER
#define PARAM_PARTICLEPUSHER Boris
#endif
typedef particles::pusher::PARAM_PARTICLEPUSHER UsedParticlePusher;

}//namespace picongpu
