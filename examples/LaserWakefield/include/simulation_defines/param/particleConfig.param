/**
 * Copyright 2013 Axel Huebl, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "particles/startPosition/functors.def"

namespace picongpu
{
/* short namespace*/
namespace mCT = PMacc::math::CT;

// Macro Particle Configuration -------------------------------------------

namespace particles
{

/** a particle with a weighting below MIN_WEIGHTING will not
 *      be created / will be deleted
 *  unit: none */
const float_X MIN_WEIGHTING = 10.0;

const uint32_t TYPICAL_PARTICLES_PER_CELL = 2;

namespace startPosition
{

struct RandomParamater
{
    /** Count of particles per cell at initial state
     *  unit: none */
    static const uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
};
/* definition of random particle start*/
typedef RandomImpl<RandomParamater> Random;

struct QuietParameter
{
    /** Count of particles per cell per direction at initial state
     *  unit: none */
    typedef typename mCT::shrinkTo<mCT::Int<1, TYPICAL_PARTICLES_PER_CELL, 1>, simDim>::type numParticlesPerDimension;
};

/* definition of random particle start*/
typedef QuietImpl<QuietParameter> Quiet;


} //namespace startPosition
} //namespace particles

} //namespac picongpu
