/* Copyright 2013-2017 Rene Widera, Benjamin Worpitz, Heiko Burau
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/Particles.hpp"
#include <boost/mpl/string.hpp>

#include "particles/ionization/byField/ionizers.def"
#include "particles/ionization/byCollision/ionizers.def"


namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
using DefaultParticleAttributes = MakeSeq_t<
    position< position_pic >,
    momentum,
    weighting,
    particleId
>;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/

/*--------------------------- photons -------------------------------------------*/

value_identifier( float_X, MassRatioPhotons, 0.0 );
value_identifier( float_X, ChargeRatioPhotons, 0.0 );

using ParticleFlagsPhotons = bmpl::vector<
    particlePusher< particles::pusher::Photon >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    massRatio< MassRatioPhotons >,
    chargeRatio< ChargeRatioPhotons >
>;

/* define species photons */
using Photons = Particles<
    bmpl::string< 'p', 'h' >,
    ParticleFlagsPhotons,
    DefaultParticleAttributes
>;

/*--------------------------- electrons --------------------------------------*/
// thermal bulk electrons: 2keV

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioElectrons, 1.0 );
value_identifier( float_X, ChargeRatioElectrons, 1.0 );

/* ratio relative to BASE_DENSITY
 * thermal "bulk": 1x ionized n_Cu
 * non-thermal "hot"/prompt: 0.1% ne_bulk = 0.001 * n_Cu ~ 1e20 / cm3
 */
value_identifier( float_X, DensityRatioBulkElectrons, 6.0 );

using ParticleFlagsElectrons = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioElectrons >,
    chargeRatio< ChargeRatioElectrons >
>;

/* thermal bulk electrons */
using BulkElectrons = Particles<
    bmpl::string< 'e', 't', 'h' >,
    MakeSeq_t<
        ParticleFlagsElectrons,
        densityRatio< DensityRatioBulkElectrons >
    >,
    DefaultParticleAttributes
>;

/*--------------------------- ions -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier( float_X, MassRatioCopper, 115840. );
value_identifier( float_X, ChargeRatioCopper, -29.0 );

/* ratio relative to BASE_DENSITY */
value_identifier( float_X, DensityRatioCopper, 1.0 );

using ParticleFlagsCopper = bmpl::vector<
    particlePusher< UsedParticlePusher >,
    shape< UsedParticleShape >,
    interpolation< UsedField2Particle >,
    current< UsedParticleCurrentSolver >,
    massRatio< MassRatioCopper >,
    chargeRatio< ChargeRatioCopper >,
    densityRatio< DensityRatioCopper >,
    atomicNumbers< ionization::atomicNumbers::Copper_t >,
    ionizationEnergies< ionization::energies::AU::Copper_t >,
    effectiveNuclearCharge< ionization::effectiveNuclearCharge::Copper_t >,
    ionizers<
        MakeSeq_t<
            particles::ionization::BSIEffectiveZ< BulkElectrons >,
            particles::ionization::ADKLinPol< BulkElectrons >,
            particles::ionization::ThomasFermi< BulkElectrons >
        >
    >
>;

/* define species ions */
using CopperIons = Particles<
    bmpl::string< 'C', 'u' >,
    ParticleFlagsCopper,
    MakeSeq_t<
        position< position_pic >,
        momentum,
        weighting,
        particleId,
        boundElectrons
    >
>;

/*########################### end species ####################################*/

using VectorAllSpecies = MakeSeq_t<
    Photons,
    BulkElectrons,
    CopperIons
>;

}
