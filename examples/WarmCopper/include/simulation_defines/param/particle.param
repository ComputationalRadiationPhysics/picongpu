/* Copyright 2013-2017 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "particles/startPosition/functors.def"
#include "particles/manipulators/manipulators.def"
#include "nvidia/functors/Add.hpp"
#include "nvidia/functors/Assign.hpp"
#include "particles/traits/GetAtomicNumbers.hpp"


namespace picongpu
{

namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none */
    constexpr float_X MIN_WEIGHTING = 10.0;

    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 1; //10;

namespace manipulators
{
    struct TemperatureParam
    {
        /* Initial temperature e-
         *  unit: keV
         */
        static constexpr float_64 temperature = 2.0;
    };
    using AddTemperature = TemperatureImpl< TemperatureParam, nvidia::functors::Add >;

    struct SixTimesIonizedImpl
    {
        template< typename T_Particle >
        DINLINE void operator()( T_Particle& particle, T_Particle& )
        {
            /** number of bound electrons for a neutral atom */
            constexpr float_X ion6plus =
                GetAtomicNumbers< T_Particle >::type::numberOfProtons -
                float_X(6);

            /* set (Z - 1) bound electrons */
            particle[boundElectrons_] = ion6plus;
        }
    };
    /* definition of SetDrift start*/
    using SixTimesIonized = FreeImpl< SixTimesIonizedImpl >;

} //namespace manipulators


namespace startPosition
{

    struct RandomParameter
    {
        /** Count of particles per cell at initial state
         *  unit: none */
        static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
    };
    /* definition of random particle start */
    typedef RandomImpl< RandomParameter > Random;

    struct QuietParam
    {
        /** Count of particles per cell per direction at initial state
         *  unit: none */
       typedef mCT::shrinkTo< mCT::Int< 1, TYPICAL_PARTICLES_PER_CELL, 1 >, simDim >::type numParticlesPerDimension;
    };

    /* definition of quiet particle start */
    typedef QuietImpl< QuietParam > Quiet;

} //namespace startPosition
} //namespace particles

} //namespac picongpu
