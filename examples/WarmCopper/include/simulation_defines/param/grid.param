/* Copyright 2013-2017 Axel Huebl, Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


namespace picongpu
{

    namespace SI
    {
        /** Duration of one timestep
         *
         *  Non-LTE steady state or LTE respectively should be reached
         *  within 1 ps. We discretize the time in 1'000 equal steps.
         *
         *  unit: seconds */
        constexpr float_64 DELTA_T_SI = 6.e-15;

        /** epsilon to be >= 1 per mill close to CFL */
        constexpr float_64 EPS_CFL = 1.001;
        constexpr float_64 SQRT_OF_3 = 1.73205 * EPS_CFL;

        /** equals X
         *
         *  note: formulated to automatically fullfill the 3D CFL criteria for Yee
         *
         *  unit: meter */
        constexpr float_64 CELL_WIDTH_SI = DELTA_T_SI * SPEED_OF_LIGHT_SI * SQRT_OF_3;
        /** equals Y - the laser & moving window propagation direction
         *  unit: meter */
        constexpr float_64 CELL_HEIGHT_SI = CELL_WIDTH_SI;
        /** equals Z
         *  unit: meter */
        constexpr float_64 CELL_DEPTH_SI = CELL_WIDTH_SI;

        /** Note on units in reduced dimensions
         *
         * In 2D3V simulations, the CELL_DEPTH_SI (Z) cell length
         * is still used for normalization of densities, etc.
         *
         * A 2D3V simulation in a cartesian PIC simulation such as
         * ours only changes the degrees of freedom in motion for
         * (macro) particles and all (field) information in z
         * travels instantaneous, making the 2D3V simulation
         * behave like the interaction of infinite "wire particles"
         * in fields with perfect symmetry in Z.
         */

    } //namespace SI

    //! Defines the size of the absorbing zone (in cells)
    constexpr uint32_t ABSORBER_CELLS[3][2] = {
        {32, 32},  /*x direction [negative,positive]*/
        {32, 32},  /*y direction [negative,positive]*/
        {32, 32}   /*z direction [negative,positive]*/
    }; //unit: number of cells

    //! Define the strength of the absorber for any direction
    constexpr float_X ABSORBER_STRENGTH[3][2] = {
        {1.0e-3, 1.0e-3}, /*x direction [negative,positive]*/
        {1.0e-3, 1.0e-3}, /*y direction [negative,positive]*/
        {1.0e-3, 1.0e-3}  /*z direction [negative,positive]*/
    }; //unit: none

    constexpr uint32_t ABSORBER_FADE_IN_STEPS = 16;

    /** When to move the co-moving window.
     *  An initial pseudo particle, flying with the speed of light,
     *  is fired at the begin of the simulation.
     *  When it reaches movePoint % of the absolute(*) simulation area,
     *  the co-moving window starts to move with the speed of light.
     *
     *  (*) Note: beware, that there is one "hidden" row of gpus at the y-front,
     *            when you use the co-moving window
     *  0.75 means only 75% of simulation area is used for real simulation
     */
    constexpr float_64 movePoint = 0.90;

}
