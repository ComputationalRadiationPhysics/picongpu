/**
 * Copyright 2013-2016 Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

  /*
    radiation verbose level:
    0=nothing, 1=physics, 2=simulation_state, 4=memory, 8=critical
  */

#define PIC_VERBOSE_RADIATION 3

#include "plugins/radiation/parameters.hpp"
#include "plugins/radiation/debug/PIConGPUVerboseLogRadiation.hpp"

namespace picongpu
{
namespace rad_linear_frequencies
{
namespace SI
{
constexpr float_64 omega_min = 0.0;
constexpr float_64 omega_max = 5.8869e17;
}

constexpr unsigned int N_omega = 2048; // number of frequencies
}

namespace rad_log_frequencies
{
namespace SI
{
constexpr float_64 omega_min = 1.0e14;
constexpr float_64 omega_max = 1.0e17;
}

constexpr unsigned int N_omega = 2048; // number of frequencies
}


namespace rad_frequencies_from_list
{
//constexpr char listLocation[] = "/scratch/s5960712/list001.freq";
constexpr unsigned int N_omega = 2048; // number of frequencies
}


namespace radiation_frequencies = rad_linear_frequencies;


namespace radiationNyquist
{
  constexpr float_32 NyquistFactor = 0.5;
}


///////////////////////////////////////////////////


  // corect treatment of coherent and incoherent  radiation from macroparticles
  // 1 = on  (slower and more memory, but correct quantitativ treatment)
  // 0 = off (faster but macroparticles are treated as highly charged, point-like particle)
#define __COHERENTINCOHERENTWEIGHTING__ 1

  /* Choose different form factors in order to consider different  particle shapes for radiation
   *  - radFormFactor_CIC_3D ... CIC charge distribution
   *  - radFormFactor_TSC_3D ... TSC charge distribution
   *  - radFormFactor_PCS_3D ... PCS charge distribution
   *  - radFormFactor_CIC_1Dy ... only CIC charge distribution in y
   *  - radFormFactor_Gauss_spherical ... symmetric Gauss charge distribution
   *  - radFormFactor_Gauss_cell ... Gauss charge distribution according to cell size
   *  - radFormFactor_incoherent ... only incoherent radiation
   */
  namespace radFormFactor_CIC_3D { }
  namespace radFormFactor_TSC_3D { }
  namespace radFormFactor_PCS_3D { }
  namespace radFormFactor_CIC_1Dy { }
  namespace radFormFactor_Gauss_spherical { }
  namespace radFormFactor_Gauss_cell { }
  namespace radFormFactor_incoherent { }

  namespace radFormFactor = radFormFactor_Gauss_spherical;


///////////////////////////////////////////////////////////


namespace parameters
{
/*!enable radiation calculation*/
#define ENABLE_RADIATION 1

// Nyquist low pass allows only amplitudes for frequencies below Nyquist frequency
// 1 = on  (slower and more memory, no fourier reflections)
// 0 = off (faster but with fourier reflections)
#define __NYQUISTCHECK__ 1



//marked every N particle for calculate radiation
//mark no particle at beginning
#define RAD_MARK_PARTICLE 1

//disable or enable gamme filter
//diable (0) / enable (1)
#define RAD_ACTIVATE_GAMMA_FILTER 0

constexpr float_32 RadiationGamma = 5.;

constexpr unsigned int N_observer = 128; // number of looking directions



} /* end namespace parameters */

//////////////////////////////////////////////////


// add a window function weighting to the radiation in order
// to avoid ringing effects from sharpe boundaries
// default: no window function via `radWindowFunctionNone`

/* Choose different window function in order to get better ringing reduction
 * radWindowFunctionTriangle
 * radWindowFunctionHamming
 * radWindowFunctionTriplett
 * radWindowFunctionGauss
 * radWindowFunctionNone
 */
namespace radWindowFunctionTriangle { }
namespace radWindowFunctionHamming { }
namespace radWindowFunctionTriplett { }
namespace radWindowFunctionGauss { }
namespace radWindowFunctionNone { }

namespace radWindowFunction = radWindowFunctionNone;


}//namespace picongpu
