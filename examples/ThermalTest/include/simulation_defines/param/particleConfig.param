/**
 * Copyright 2013-2016 Axel Huebl, Heiko Burau, Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "particles/startPosition/functors.def"
#include "particles/manipulators/manipulators.def"
#include "nvidia/functors/Add.hpp"

namespace picongpu
{
/* short namespace*/
namespace mCT = PMacc::math::CT;

// Macro Particle Configuration -------------------------------------------

namespace particles
{

/** a particle with a weighting below MIN_WEIGHTING will not
 *      be created / will be deleted
 *  unit: none */
constexpr float_X MIN_WEIGHTING = 10.0;

constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 16;

namespace manipulators
{
struct TemperatureParam
{
    /*Initial temperature
     *  unit: keV
     */
    static constexpr float_64 temperature = 51.16;
};
/* definition of SetDrift start*/
typedef TemperatureImpl<TemperatureParam,nvidia::functors::Add> AddTemperature;
} //namespace manipulators

namespace startPosition
{

struct RandomParameter
{
    /** Count of particles per cell at initial state
     *  unit: none */
    static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
};
/* definition of random particle start*/
typedef RandomImpl<RandomParameter> Random;

}//namespace startPosition
}//namespace particles
}//namespace picongpu
