# Name and Path of this Script ############################### (DO NOT change!)
export PIC_PROFILE=$(cd $(dirname $BASH_SOURCE) && pwd)"/"$(basename $BASH_SOURCE)

# User Information ################################# (edit the following lines)
#   - automatically add your name and contact to output file meta data
#   - send me a mail on batch system jobs: NONE, BEGIN, END, FAIL, REQUEUE, ALL,
#     TIME_LIMIT, TIME_LIMIT_90, TIME_LIMIT_80 and/or TIME_LIMIT_50
export MY_MAILNOTIFY="NONE"
export MY_MAIL="someone@example.com"
export MY_NAME="$(whoami) <$MY_MAIL>"


# Project Information ######################################## (edit this line)
#   - project for allocation and shared directories
export PROJID=<yourProject>

# Text Editor for Tools ###################################### (edit this line)
#   - examples: "nano", "vim", "emacs -nw", "vi" or without terminal: "gedit"
#export EDITOR="vim"

# General modules #############################################################
#
# There are a lot of required modules already loaded when connecting
# such as mpi, libfabric and others.
# The following modules just add to these.
module load craype-accel-amd-gfx908
module load PrgEnv-cray/8.2.0
module load rocm/4.5.0
export CXX=hipcc

export MPICH_GPU_SUPPORT_ENABLED=1
module load cray-mpich/8.1.10

## These must be set before running
export MPIR_CVAR_GPU_EAGER_DEVICE_MEM=0
export MPICH_GPU_SUPPORT_ENABLED=1
export MPICH_SMP_SINGLE_COPY_MODE=CMA

module load cmake/3.21.3
module load zlib/1.2.11
module load git/2.31.1

# Other Software ##############################################################
#
module load hdf5/1.12.0 adios2/2.7.1

module load libpng/1.6.37 freetype/2.11.0

# Self-Build Software #########################################################
# Optional, not required.
#
# needs to be compiled by the user
# Check the install script at
#   https://gist.github.com/steindev/4cfd0e43ac4c4d6da1a5b474b317d458
# and additional information on PIConGPU dependencies in the manual
#   https://picongpu.readthedocs.io/en/latest/install/dependencies.html
export PIC_LIBS=$HOME/lib/spock

# install boost 1.74.0
export BOOST_ROOT="$PIC_LIBS/boost"
export CMAKE_PREFIX_PATH="$BOOST_ROOT:$CMAKE_PREFIX_PATH"
export LD_LIBRARY_PATH="$BOOST_ROOT/lib:$LD_LIBRARY_PATH"

# install c-blosc 1.21.1
export BLOSC_ROOT="$PIC_LIBS/c-blosc"
export CMAKE_PREFIX_PATH="$BLOSC_ROOT:$CMAKE_PREFIX_PATH"
export LD_LIBRARY_PATH="$BLOSC_ROOT/lib:$LD_LIBRARY_PATH"

# install openPMD-api 0.14.3+ yourself
# required when using picongpu 0.7.0-dev+
export OPENPMD_API_ROOT=$PIC_LIBS/openPMD-api
export CMAKE_PREFIX_PATH="$OPENPMD_API_ROOT:$CMAKE_PREFIX_PATH"
export LD_LIBRARY_PATH="$OPENPMD_API_ROOT/lib64:$LD_LIBRARY_PATH"

# optionally install pngwriter yourself:
export PNGwriter_ROOT=$PIC_LIBS/pngwriter
export CMAKE_PREFIX_PATH=$PIC_LIBS:$CMAKE_PREFIX_PATH
export LD_LIBRARY_PATH=$PNGwriter_ROOT/lib:$LD_LIBRARY_PATH

# Environment #################################################################
#
export PICSRC=$HOME/src/picongpu
export PIC_EXAMPLES=$PICSRC/share/picongpu/examples
export PIC_BACKEND="hip:gfx908"

export PATH=$PATH:$PICSRC
export PATH=$PATH:$PICSRC/bin
export PATH=$PATH:$PICSRC/src/tools/bin

export PYTHONPATH=$PICSRC/lib/python:$PYTHONPATH

export HIP_PATH=$ROCM_PATH/hip # has to be set in order to be able to compile
export CMAKE_MODULE_PATH=$HIP_PATH/cmake:$CMAKE_MODULE_PATH
export HIPCC_COMPILE_FLAGS_APPEND="$HIPCC_COMPILE_FLAGS_APPEND -I${MPICH_DIR}/include"
export HIPCC_LINK_FLAGS_APPEND="$HIPCC_LINK_FLAGS_APPEND -L${MPICH_DIR}/lib -lmpi -L${CRAY_MPICH_ROOTDIR}/gtl/lib -lmpi_gtl_hsa"

# "tbg" default options #######################################################
#   - SLURM (sbatch)
#   - "caar" queue
export TBG_SUBMIT="sbatch"
export TBG_TPLFILE="etc/picongpu/spock-ornl/caar.tpl"

# allocate an interactive shell for one hour
#   getNode 2  # allocates two interactive nodes (default: 1)
function getNode() {
    if [ -z "$1" ] ; then
        numNodes=1
    else
        numNodes=$1
    fi
    srun  --time=1:00:00 --nodes=$numNodes --ntasks-per-node=4 --cpus-per-task=16 --gpus-per-task=1 --gpu-bind=closest --mem-per-gpu=64000 -p caar -A $PROJID --pty bash
}

# allocate an interactive shell for one hour
#   getDevice 2  # allocates two interactive devices (default: 1)
function getDevice() {
    if [ -z "$1" ] ; then
        numGPUs=1
    else
        if [ "$1" -gt 4 ] ; then
            echo "The maximal number of devices per node is 4." 1>&2
            return 1
        else
            numGPUs=$1
        fi
    fi
    srun  --time=1:00:00 --ntasks-per-node=$(($numGPUs)) --cpus-per-task=16 --gpus-per-task=1 --gpu-bind=closest --mem-per-gpu=64000 -p caar -A $PROJID --pty bash
}

# Load autocompletion for PIConGPU commands
BASH_COMP_FILE=$PICSRC/bin/picongpu-completion.bash
if [ -f $BASH_COMP_FILE ] ; then
    source $BASH_COMP_FILE
else
    echo "bash completion file '$BASH_COMP_FILE' not found." >&2
fi

