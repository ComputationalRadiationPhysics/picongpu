/* Copyright 2014-2023 Rene Widera, Richard Pausch, Annegret Roeszler, Klaus Steiniger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Particle shape, field to particle interpolation, current solver, and particle pusher
 * can be declared here for usage in `speciesDefinition.param`.
 *
 * @see
 *   **MODELS / Hierarchy of Charge Assignment Schemes**
 *   in the online documentation for information on particle shapes.
 *
 *
 * \attention
 * The higher order shape names are redefined with release 0.6.0 in order to provide a consistent naming:
 *     * PQS is the name of the 3rd order assignment function (instead of PCS)
 *     * PCS is the name of the 4th order assignment function (instead of P4S)
 *     * P4S does not exist anymore
 */

#pragma once

#include "picongpu/algorithms/AssignedTrilinearInterpolation.hpp"
#include "picongpu/algorithms/FieldToParticleInterpolation.hpp"
#include "picongpu/fields/currentDeposition/Solver.def"
#include "picongpu/particles/shapes.hpp"


namespace picongpu
{
    /** select macroparticle shape
     *
     * **WARNING** the shape names are redefined and diverge from PIConGPU versions before 0.6.0.
     *
     *  - particles::shapes::CIC : Assignment function is a piecewise linear spline
     *  - particles::shapes::TSC : Assignment function is a piecewise quadratic spline
     *  - particles::shapes::PQS : Assignment function is a piecewise cubic spline
     *  - particles::shapes::PCS : Assignment function is a piecewise quartic spline
     */
    using UsedParticleShape = particles::shapes::CIC;

    /** select interpolation method to be used for interpolation of grid-based field values to particle positions
     */
    using UsedField2Particle = FieldToParticleInterpolation<UsedParticleShape, AssignedTrilinearInterpolation>;

    /*! select current solver method
     * - currentSolver::Esirkepov< SHAPE, STRATEGY > : particle shapes - CIC, TSC, PQS, PCS (1st to 4th order)
     * - currentSolver::EmZ< SHAPE, STRATEGY >       : particle shapes - CIC, TSC, PQS, PCS (1st to 4th order)
     * - currentSolver::EZ< SHAPE, STRATEGY >        : same as EmZ (just an alias to match the currently used naming)
     *
     * STRATEGY (optional):
     * - currentSolver::strategy::StridedCachedSupercells
     * - currentSolver::strategy::StridedCachedSupercellsScaled<N> with N >= 1
     * - currentSolver::strategy::CachedSupercells
     * - currentSolver::strategy::CachedSupercellsScaled<N> with N >= 1
     * - currentSolver::strategy::NonCachedSupercells
     * - currentSolver::strategy::NonCachedSupercellsScaled<N> with N >= 1
     */
    using UsedParticleCurrentSolver = currentSolver::Esirkepov<UsedParticleShape>;

/** particle pusher configuration
 *
 * Defining a pusher is optional for particles
 *
 * - particles::pusher::HigueraCary : Higuera & Cary's relativistic pusher preserving both volume and ExB velocity
 * - particles::pusher::Vay : Vay's relativistic pusher preserving ExB velocity
 * - particles::pusher::Boris : Boris' relativistic pusher preserving volume
 * - particles::pusher::ReducedLandauLifshitz : 4th order RungeKutta pusher
 *                                              with classical radiation reaction
 * - particles::pusher::Composite : composite of two given pushers,
 *                                  switches between using one (or none) of those
 *
 * For diagnostics & modeling: ------------------------------------------------
 * - particles::pusher::Acceleration : Accelerate particles by applying a constant electric field
 * - particles::pusher::Free : free propagation, ignore fields
 *                             (= free stream model)
 * - particles::pusher::Photon : propagate with c in direction of normalized mom.
 * - particles::pusher::Probe : Probe particles that interpolate E & B
 * For development purposes: --------------------------------------------------
 * - particles::pusher::Axel : a pusher developed at HZDR during 2011 (testing)
 */
#ifndef PARAM_PARTICLEPUSHER
#    define PARAM_PARTICLEPUSHER Boris
#endif
    using UsedParticlePusher = particles::pusher::PARAM_PARTICLEPUSHER;

} // namespace picongpu
