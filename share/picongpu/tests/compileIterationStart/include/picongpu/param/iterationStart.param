/* Copyright 2013-2023 Rene Widera, Richard Pausch, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Specify a sequence of functors to be called at start of each time iteration.
 */

#pragma once

#include "picongpu/particles/InitFunctors.hpp"


namespace picongpu
{
    //! Functor to move a source particle to the destination species if it has a high gamma value
    struct MoveIfHighGammaFunctor
    {
        IdGenerator m_idGen;

        MoveIfHighGammaFunctor(uint32_t, IdGenerator idGenerator) : m_idGen(idGenerator)
        {
        }

        /** Process a pair of particles.
         *
         * Move a source particle to a destination particle if the source particle has high gamma value.
         *
         * @tparam T_DestParticle destination particle type
         * @tparam T_SrcParticle source particle type
         *
         * @param particleDest destination particle
         * @param particleSrc source particle
         */
        template<typename T_Worker, typename T_DestParticle, typename T_SrcParticle>
        HDINLINE void operator()(T_Worker const& worker, T_DestParticle& particleDest, T_SrcParticle& particleSrc)
        {
            auto const gamma = picongpu::gamma<float_X>(
                particleSrc[picongpu::momentum_],
                picongpu::traits::attribute::getMass(particleSrc[picongpu::weighting_], particleSrc));
            constexpr float_X thresholdGamma = 3.0_X;
            if(gamma >= thresholdGamma)
            {
                particleDest.copyAndInit(worker, m_idGen, particleSrc);
                particleSrc[picongpu::multiMask_] = 0;
            }
            else
                particleDest[picongpu::multiMask_] = 0;
        }
    };


    //! Manipulator to move a source particle to the destination species if it has a high gamma value
    using MoveIfHighGamma = particles::manipulators::generic::Free<MoveIfHighGammaFunctor>;

    /** IterationStartPipeline defines the functors called at each iteration start
     *
     * The functors will be called in the given order.
     *
     * The functors must be default-constructible and take the current time iteration as the only parameter.
     * These are the same requirements as for functors in particles::InitPipeline.
     *
     * At each iteration start move high gamma electron particles from PIC_Electrons species to PIC_HighGammaElectrons.
     * Since some particles of PIC_Electrons may be removed, the following FillAllGaps is needed
     * (for PIC_HighGammaElectrons it is done as part of ManipulateDerive<>).
     */
    using IterationStartPipeline = pmacc::mp_list<
        particles::ManipulateDerive<MoveIfHighGamma, PIC_Electrons, PIC_HighGammaElectrons>,
        particles::FillAllGaps<PIC_Electrons>>;

} // namespace picongpu
