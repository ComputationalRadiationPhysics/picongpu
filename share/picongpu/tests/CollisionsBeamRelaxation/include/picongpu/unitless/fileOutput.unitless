/* Copyright 2022-2023 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once
#include "picongpu/algorithms/Velocity.hpp"
#include "picongpu/particles/particleToGrid/derivedAttributes/IsWeighted.hpp"

namespace picongpu
{
    namespace particles
    {
        namespace particleToGrid
        {
            namespace derivedAttributes
            {
                HDINLINE float1_64 WeightedTransverseVelocitySquared::getUnit() const
                {
                    return sim.unit.speed() * sim.unit.speed();
                }

                template<typename T_Particle>
                DINLINE float_X WeightedTransverseVelocitySquared::operator()(T_Particle& particle) const
                {
                    const float_X weighting = particle[weighting_];
                    const float_X mass = picongpu::traits::attribute::getMass(weighting, particle);
                    const float3_X velocity = picongpu::Velocity{}(particle[momentum_], mass);
                    return weighting * (velocity[1] * velocity[1] + velocity[2] * velocity[2]);
                }

                //! This quantity is weighted and so it can be used to calculate an average value
                template<>
                struct IsWeighted<WeightedTransverseVelocitySquared> : std::true_type
                {
                };

            } // namespace derivedAttributes
        } // namespace particleToGrid
    } // namespace particles
} // namespace picongpu

#include "picongpu/particles/particleToGrid/CombinedDerive.hpp"
#include "picongpu/particles/particleToGrid/ComputeGridValuePerFrame.hpp"
