/* Copyright 2019-2023 Rene Widera, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/param/particleFilters.param"
#include "picongpu/particles/collision/collision.def"
#include "picongpu/plugins/misc/SpeciesFilter.hpp"

#include <pmacc/meta/conversion/MakeSeq.hpp>


#ifndef PARAM_DYNAMIC_LOG
#    define PARAM_DYNAMIC_LOG 0
#endif

namespace picongpu
{
    namespace particles
    {
        namespace collision
        {
            namespace precision
            {
                using float_COLL = float_64;
            } // namespace precision

            using namespace picongpu::plugins;

#if(PARAM_DYNAMIC_LOG == 1)
            using CollisionScreeningSpecies = MakeSeq_t<
                misc::SpeciesFilter<IonsMore, filter::LowerXPosition>,
                misc::SpeciesFilter<ElectronsMore, filter::LowerXPosition>,
                misc::SpeciesFilter<IonsLess, filter::MiddleXPosition>,
                misc::SpeciesFilter<ElectronsMore, filter::MiddleXPosition>,
                misc::SpeciesFilter<ElectronsLess, filter::UpperXPosition>,
                misc::SpeciesFilter<IonsMore, filter::UpperXPosition>>;
#else
            using CollisionScreeningSpecies = MakeSeq_t<>;
#endif
            constexpr bool debugScreeningLength = true;
            // not ideal, better would be to combine filters with an AND but it is ok


            struct Params
            {
                static constexpr float_X coulombLog = 3.0_X;
            };

#if(PARAM_DYNAMIC_LOG == 1)
            using ColliderFunctor = relativistic::RelativisticCollisionDynamicLog<true>;
#else
            using ColliderFunctor = relativistic::RelativisticCollisionConstLog<Params, true>;
#endif

            /** CollisionPipeline defines in which order species interact with each other
             *
             * the functors are called in order (from first to last functor)
             */
            using CollisionPipeline = pmacc::mp_list<
                Collider<ColliderFunctor, MakeSeq_t<Pair<ElectronsMore, IonsMore>>, OneFilter<filter::LowerXPosition>>,
                Collider<
                    ColliderFunctor,
                    MakeSeq_t<Pair<ElectronsMore, IonsLess>>,
                    OneFilter<filter::MiddleXPosition>>,
                Collider<
                    ColliderFunctor,
                    MakeSeq_t<Pair<ElectronsLess, IonsMore>>,
                    OneFilter<filter::UpperXPosition>>>;

            /** Chunk size used for cell list allocations.
             *
             * To reduce the fragmentation of the heap memory on accelerators the collision algorithm is allocating a
             * multiple of this value to store a cell list of particle IDs. The value must be non zero.
             */
            constexpr uint32_t cellListChunkSize = TYPICAL_PARTICLES_PER_CELL;
        } // namespace collision
    } // namespace particles
} // namespace picongpu
