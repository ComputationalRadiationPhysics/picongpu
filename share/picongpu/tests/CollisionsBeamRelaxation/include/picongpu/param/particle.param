/* Copyright 2013-2023 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch, Pawel Ordyna, Klaus Steiniger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitialization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */

#pragma once

#include "picongpu/param/physicalConstants.param"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/operation.hpp>


namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *
         *  unit: none */
        constexpr float_X MIN_WEIGHTING = 10.0;

        namespace manipulators
        {
            /** Define Lorentz factor of initial particle drift for slow particles. */
            struct DriftSlowParam
            {
                static constexpr float_64 gamma = 1.00005; // v = 0.01c
                /** Define initial particle drift direction vector.
                 */
                static constexpr auto driftDirection = float3_X(1.0, 0.0, 0.0);
            };
            /** Definition of manipulator that assigns a drift in X
             *  using parameters from struct DriftSlowParam.
             */
            using AssignSlowDrift = unary::Drift<DriftSlowParam, pmacc::math::operation::Assign>;


            /** Define Lorentz factor of initial particle drift for fast particles. */
            struct DriftFastParam
            {
                static constexpr float_64 gamma = 1.00125; // v = 0.05c
                /** Define initial particle drift direction vector.
                 */
                static constexpr auto driftDirection = float3_X(1.0, 0.0, 0.0);
            };
            /** Definition of manipulator that assigns a drift in X
             *  using parameters from struct DriftFastParam.
             */
            using AssignFastDrift = unary::Drift<DriftFastParam, pmacc::math::operation::Assign>;


            /** Define initial temperature of electrons. */
            struct TemperatureParamElectrons
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = sim.si.getElectronMass() * sim.si.getSpeedOfLight()
                    * sim.si.getSpeedOfLight() * sim.si.conv.joule2ev(1.0e-3) * 0.0000002;
            };
            /** Definition of manipulator assigning a temperature
             *  using parameters from struct TemperatureParamElectrons.
             */
            using AddTemperatureElectrons = unary::Temperature<TemperatureParamElectrons>;

            /** Define initial temperature of ions. */
            struct TemperatureParamIons
            {
                /** Initial temperature
                 *  unit: keV
                 */
                static constexpr float_64 temperature = sim.si.getElectronMass() * sim.si.getSpeedOfLight()
                    * sim.si.getSpeedOfLight() * sim.si.conv.joule2ev(1.0e-3) * 0.00002;
            };
            /** Definition of manipulator assigning a temperature
             *  using parameters from struct TemperatureParamIons.
             */
            using AddTemperatureIons = unary::Temperature<TemperatureParamIons>;


            /** Definition of manipulator that sets the ionization state of an ion macro-particle
             * to charge state 1, ie. number of bound electrons is (number of protons - 1)
             */
            using IonCharge1 = unary::ChargeState<1u>;

            /** Definition of manipulator that sets the ionization state of an ion macro-particle
             * to charge state 3, ie. number of bound electrons is (number of protons - 3)
             */
            using IonCharge3 = unary::ChargeState<3u>;

        } // namespace manipulators

        namespace startPosition
        {
            //! Define initial in-cell particle position used as parameter in OnePosition functor.
            template<uint32_t numParticles>
            struct OnePositionParam
            {
                /** Maximum number of macro-particles per cell during density profile evaluation.
                 *
                 * Determines the weighting of a macro particle as well as the number of
                 * macro-particles which sample the evolution of the particle distribution
                 * function in phase space.
                 *
                 * unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = numParticles;

                /** each x, y, z in-cell position component in range [0.0, 1.0)
                 *
                 * @details in 2D the last component is ignored
                 */
                static constexpr auto inCellOffset = float3_X(0., 0., 0.);
            };
            /** Definition of start position functor that
             * places macro-particles at the initial in-cell position defined above.
             * Number of macro-particles per cell is defined by argument to OnePositionParam<>.
             */
            using Corner100ppc = OnePositionImpl<OnePositionParam<TYPICAL_PARTICLES_PER_CELL>>;
            using Corner1000ppc = OnePositionImpl<OnePositionParam<10u * TYPICAL_PARTICLES_PER_CELL>>;

        } // namespace startPosition

    } // namespace particles
} // namespace picongpu
