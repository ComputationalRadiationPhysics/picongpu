/* Copyright 2013-2023 Rene Widera, Benjamin Worpitz, Heiko Burau, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Define particle species.
 *
 * This file collects all previous declarations of base (reference) quantities
 * and configured solvers for species and defines particle species. This
 * includes "attributes" (lvalues to store with each species) and "flags"
 * (rvalues & aliases for solvers to perform with the species for each timestep
 * and ratios to base quantities). With those information, a `Particles` class
 * is defined for each species and then collected in the list
 * `VectorAllSpecies`.
 */

#pragma once


#include "picongpu/particles/Particles.hpp"

#include <pmacc/identifier/value_identifier.hpp>
#include <pmacc/meta/String.hpp>
#include <pmacc/meta/conversion/MakeSeq.hpp>
#include <pmacc/particles/Identifier.hpp>
#include <pmacc/particles/traits/FilterByFlag.hpp>

namespace picongpu
{
    /*########################### define particle attributes #####################*/

    /** describe attributes of a particle*/
    using DefaultParticleAttributes = MakeSeq_t<position<position_pic>, momentum, weighting, particleId>;
    using IonParticleAttributes = MakeSeq_t<DefaultParticleAttributes, boundElectrons>;
    /** The default example keeps particles in place and does not create a current
     */

    /*########################### end particle attributes ########################*/

    /*########################### define species #################################*/

    /*--------------------------- electrons --------------------------------------*/
    /* ratio relative to base charge and base mass */
    value_identifier(float_X, MassRatioElectrons, 1.0);
    value_identifier(float_X, ChargeRatioElectrons, 1.0);
    value_identifier(float_X, DensityRatioElectrons, 10.0);

    using ParticleFlagsElectrons = MakeSeq_t<
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        massRatio<MassRatioElectrons>,
        chargeRatio<ChargeRatioElectrons>,
        densityRatio<DensityRatioElectrons>

        >;

    /* define species electrons */
    using ElectronsLess = Particles<PMACC_CSTRING("e_100"), ParticleFlagsElectrons, DefaultParticleAttributes>;
    using ElectronsMore = Particles<PMACC_CSTRING("e_1000"), ParticleFlagsElectrons, DefaultParticleAttributes>;

    /*--------------------------- ions -------------------------------------------*/

    /* ratio relative to base charge and base mass */
    value_identifier(float_X, MassRatioIons, 10.0);
    value_identifier(float_X, ChargeRatioIons, -6.0);

    /* ratio relative to BASE_DENSITY */
    value_identifier(float_X, DensityRatioIons, PARAM_DENSITY_RATIO_IONS);

    using ParticleFlagsIons = MakeSeq_t<
        shape<UsedParticleShape>,
        interpolation<UsedField2Particle>,
        massRatio<MassRatioIons>,
        chargeRatio<ChargeRatioIons>,
        densityRatio<DensityRatioIons>,
        atomicNumbers<ionization::atomicNumbers::Carbon_t>>;

    /* define species ions */
    using IonsLess = Particles<PMACC_CSTRING("i_100"), ParticleFlagsIons, IonParticleAttributes>;
    using IonsMore = Particles<PMACC_CSTRING("i_1000"), ParticleFlagsIons, IonParticleAttributes>;
    /*########################### end species ####################################*/

    using VectorAllSpecies = MakeSeq_t<ElectronsLess, ElectronsMore, IonsLess, IonsMore>;

} // namespace picongpu
