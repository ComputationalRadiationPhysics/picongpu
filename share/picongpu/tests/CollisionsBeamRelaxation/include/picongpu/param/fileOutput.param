/* Copyright 2013-2023 Axel Huebl, Rene Widera, Felix Schmitt,
 *                     Benjamin Worpitz, Richard Pausch, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/meta/conversion/MakeSeq.hpp>

/* some forward declarations we need */
#include "picongpu/fields/Fields.def"
#include "picongpu/particles/filter/filter.def"
#include "picongpu/particles/particleToGrid/CombinedDerive.def"
#include "picongpu/particles/particleToGrid/ComputeGridValuePerFrame.def"

namespace picongpu
{
    namespace particles
    {
        namespace particleToGrid
        {
            namespace derivedAttributes
            {
                /** Transverse velocity squared (weighted)
                 *
                 * computes squared transverse velocity as  weight (v_y^2 + v_z^2)
                 */
                struct WeightedTransverseVelocitySquared
                {
                    //! Get unit
                    HDINLINE float1_64 getUnit() const;

                    //! Get unit dimension
                    HINLINE std::vector<float_64> getUnitDimension() const
                    {
                        /* L, M, T, I, theta, N, J
                         *
                         * momentum is in mass times speed: kg * m / s
                         *   -> L * M * T^-1
                         */
                        std::vector<float_64> unitDimension(7, 0.0);
                        unitDimension.at(SIBaseUnits::length) = 1.0;
                        unitDimension.at(SIBaseUnits::mass) = 1.0;
                        unitDimension.at(SIBaseUnits::time) = -1.0;
                        return unitDimension;
                    }

                    //! Get text name
                    HINLINE static std::string getName()
                    {
                        return "vPerp2";
                    }

                    /** Calculate value of the derived attribute per particle
                     *
                     * Returns an on-the-fly calculated value of a derived particle attribute for the given particle.
                     * The result can then be mapped to the cells the particle contributes to according to the
                     * assignment function.
                     *
                     * @tparam T_Particle particle type
                     * @param particle particle handle
                     *
                     * @return values of the derived attribute
                     */
                    template<typename T_Particle>
                    DINLINE float_X operator()(T_Particle& particle) const;
                };

                HDINLINE float1_64 WeightedTransverseVelocitySquared::getUnit() const
                {
                    return sim.unit.speed() * sim.unit.speed();
                }

                template<typename T_Particle>
                DINLINE float_X WeightedTransverseVelocitySquared::operator()(T_Particle& particle) const
                {
                    const float_X weighting = particle[weighting_];
                    const float_X mass = picongpu::traits::attribute::getMass(weighting, particle);
                    const float3_X velocity = picongpu::Velocity{}(particle[momentum_], mass);
                    return weighting * (velocity[1] * velocity[1] + velocity[2] * velocity[2]);
                }

                //! This quantity is weighted and so it can be used to calculate an average value
                template<>
                struct IsWeighted<WeightedTransverseVelocitySquared> : std::true_type
                {
                };

            } // namespace derivedAttributes
        } // namespace particleToGrid
    } // namespace particles


    /** FieldTmp output (calculated at runtime) *******************************
     *
     * Those operations derive scalar field quantities from particle species
     * at runtime. Each value is mapped per cell. Some operations are identical
     * up to a constant, so avoid writing those twice to save storage.
     *
     * you can choose any of these particle to grid projections:
     *   - Density: particle position + shape on the grid
     *   - BoundElectronDensity: density of bound electrons
     *       note: only makes sense for partially ionized ions
     *   - ChargeDensity: density * charge
     *       note: for species that do not change their charge state, this is
     *             the same as the density times a constant for the charge
     *   - Energy: sum of kinetic particle energy per cell with respect to shape
     *   - EnergyDensity: average kinetic particle energy per cell times the
     *                    particle density
     *       note: this is the same as the sum of kinetic particle energy
     *             divided by a constant for the cell volume
     *   - LarmorPower: radiated Larmor power
     *                  (species must contain the attribute `momentumPrev1`)
     *
     * for debugging:
     *   - MidCurrentDensityComponent:
     *       density * charge * velocity_component
     *   - Counter: counts point like particles per cell
     *   - MacroCounter: counts point like macro particles per cell
     */
    namespace deriveField = particles::particleToGrid;

    /* Density section */
    using TransverseSolver = deriveField::combinedAttributes::AverageAttribute<
        deriveField::derivedAttributes::WeightedTransverseVelocitySquared>;
    using TrasverseVelocitySquared = MakeSeq_t<
        deriveField::CreateFieldTmpOperation_t<ElectronsLess, TransverseSolver>,
        deriveField::CreateFieldTmpOperation_t<ElectronsMore, TransverseSolver>>;
    using VelocityX
        = deriveField::CreateEligible_t<VectorAllSpecies, deriveField::combinedAttributes::AverageVelocity<0>>;
    using AverageEnergyIons = deriveField::CreateEligible_t<
        MakeSeq_t<IonsMore, IonsLess>,
        deriveField::combinedAttributes::AverageAttribute<deriveField::derivedAttributes::Energy>>;
    /** FieldTmpSolvers groups all solvers that create data for FieldTmp ******
     *
     * FieldTmpSolvers is used in @see FieldTmp to calculate the exchange size
     */
    using FieldTmpSolvers = MakeSeq_t<TrasverseVelocitySquared, VelocityX, AverageEnergyIons>;

    /** FileOutputFields: Groups all Fields that shall be dumped *************/

    /** Possible native fields: FieldE, FieldB, FieldJ
     */
    using NativeFileOutputFields = MakeSeq_t<>;

    using FileOutputFields = MakeSeq_t<FieldTmpSolvers>;


    /** FileOutputParticles: Groups all Species that shall be dumped **********
     *
     * hint: to disable particle output set to
     *   using FileOutputParticles = MakeSeq_t<>;
     */
    using FileOutputParticles = MakeSeq_t<>;

} // namespace picongpu
