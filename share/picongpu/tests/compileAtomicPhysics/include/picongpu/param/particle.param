/* Copyright 2013-2023 Axel Huebl, Rene Widera, Marco Garten, Benjamin Worpitz,
 *                     Richard Pausch,  Brian Marre
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/Vector.hpp>
#include <pmacc/math/operation.hpp>

#include <cstdint>

// particles randomly distributed, 10 macro particle per cell, 200keV initial drift
namespace picongpu::particles
{
    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none
     */
    constexpr float_X MIN_WEIGHTING = 1.0;

    namespace startPosition
    {
        struct RandomParameter10ppc
        {
            /** Count of particles per cell at initial state
             *  unit: none
             */
            static constexpr uint32_t numParticlesPerCell = 10u;
        };

        struct OnePositionParameter
        {
            /** Count of particles per cell at initial state
             *  unit: none
             */
            static constexpr uint32_t numParticlesPerCell = 1u;
            // sit directly in lower corner of the cell
            // each x, y, z in-cell position component in range [0.0, 1.0)
            static constexpr auto inCellOffset = float3_X(0.0, 0.0, 0.0);
        };
        using OnePosition = OnePositionImpl<OnePositionParameter>;
        using Random10ppc = RandomImpl<RandomParameter10ppc>;
    } // namespace startPosition

    namespace manipulators
    {
        // define a drift in X equal to 200 keV for electrons
        struct Drift200keVParam
        {
            static constexpr float_64 gamma = 1.39139;
            static constexpr auto driftDirection = float3_X(1.0, 0.0, 0.0);
        };
        using Assign200keVDrift = unary::Drift<Drift200keVParam, pmacc::math::operation::Assign>;

        struct TemperatureParam
        {
            /** Initial temperature
             *  unit: keV
             */
            static constexpr float_64 temperature = 1.;
        };
        using AddTemperature = unary::Temperature<TemperatureParam>;

        // definition of set initial ionization
        using SetIonization = unary::ChargeState<16u>;

    } // namespace manipulators
} // namespace picongpu::particles
