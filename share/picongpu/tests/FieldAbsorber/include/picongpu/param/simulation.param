/* Copyright 2013-2023 Axel Huebl, Rene Widera, Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Definition of cell sizes and time step. Our cells are defining a regular,
 * cartesian grid. Our explicit FDTD field solvers require an upper bound for
 * the time step value in relation to the cell size for convergence. Make
 * sure to resolve important wavelengths of your simulation, e.g. shortest
 * plasma wavelength, Debye length and central laser wavelength both spatially
 * and temporarily.
 *
 * **Units in reduced dimensions**
 *
 * In 2D3V simulations, the CELL_DEPTH_SI (Z) cell length
 * is still used for normalization of densities, etc..
 *
 * A 2D3V simulation in a cartesian PIC simulation such as
 * ours only changes the degrees of freedom in motion for
 * (macro) particles and all (field) information in z
 * travels instantaneously, making the 2D3V simulation
 * behave like the interaction of infinite "wire particles"
 * in fields with perfect symmetry in Z.
 *
 */

#pragma once


namespace picongpu
{
    namespace SI
    {
        /** This setup is based on section 7.11.1 of
         *  A. Taflove, S.C. Hagness. Computational Electrodynamics
         *  The Finite-Difference Time-Domain Method. 3rd Edition.
         *  The difference is we consider both 2D and 3D cases,
         *  and grid size is increased due to our absorber being part of
         *  the simulation area, not located outside of it as in the book.
         */

        constexpr float_64 CELL_SIZE_SI = 1.0e-3; // 1 mm

        /** equals X
         *  unit: meter */
        constexpr float_64 CELL_WIDTH_SI = CELL_SIZE_SI;
        /** equals Y
         *  unit: meter */
        constexpr float_64 CELL_HEIGHT_SI = CELL_WIDTH_SI;
        /** equals Z
         *  unit: meter */
        constexpr float_64 CELL_DEPTH_SI = CELL_WIDTH_SI;

        /** Additional CFL factor compared to the Yee solver.
         *
         * Has to be set for ArbitraryOrderFDTD to be >= its additional factor (see table in readthedocs).
         * Otherwise the configuration would violate the CFL
         */
#ifndef PARAM_CFLFACTOR
#    define SELECTED_CFL_FACTOR 1.0
#else
#    define SELECTED_CFL_FACTOR PARAM_CFLFACTOR
#endif

        /** Duration of one timestep is just below the CFL limit
         *  unit: seconds */
        constexpr float_64 CFL_RATIO = 0.999 / SELECTED_CFL_FACTOR;
        constexpr float_64 SQRT_3 = 1.73205080757;
        constexpr float_64 DELTA_T_SI = CFL_RATIO * CELL_SIZE_SI / (SPEED_OF_LIGHT_SI * SQRT_3);

        /** Base density in particles per m^3 in the density profiles.
         *
         * This is often taken as reference maximum density in normalized profiles.
         * Individual particle species can define a `densityRatio` flag relative
         * to this value.
         *
         * unit: ELEMENTS/m^3
         */
        constexpr float_64 BASE_DENSITY_SI = 1.e25;
    } // namespace SI

    /** (Approximate) Number of maximum macro-particles per cell.
     *
     * Used internally for unit normalization.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 2u;
} // namespace picongpu
