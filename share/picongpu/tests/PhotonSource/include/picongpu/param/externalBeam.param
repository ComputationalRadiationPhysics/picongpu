/* Copyright 2020-2021 Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/param/grid.param"
#include "picongpu/particles/externalBeam/functors.def"
#include "picongpu/plugins/externalBeam/CoordinateTransform.def"
#include "picongpu/plugins/externalBeam/ProbingBeam.def"
#include "picongpu/plugins/externalBeam/SecondaryRotation.def"
#include "picongpu/plugins/externalBeam/Side.def"
#include "picongpu/plugins/externalBeam/beamProfiles/profiles.def"
#include "picongpu/plugins/externalBeam/beamShapes/shapes.def"

#include <pmacc/preprocessor/struct.hpp>

#include <pmacc/math/vector/compile-time/Int.hpp>

namespace picongpu
{
    namespace plugins
    {
        namespace externalBeam
        {
            using namespace picongpu::plugins::externalBeam;
            /* Choose from:
             *  - ZSide
             *  - YSide
             *  - XSide
             * - ZRSide
             * - YRSide
             * - XRSide
             */
            using DbgProbingSide = picongpu::plugins::externalBeam::ZSide;

            PMACC_STRUCT(
                DbgRotationParam,
                (PMACC_C_VALUE(float_X, yawAngle, 0._X / 180.0_X * pmacc::math::Pi<float_X>::value))(
                    PMACC_C_VALUE(float_X, pitchAngle, 0.0_X / 180.0_X * pmacc::math::Pi<float_X>::value)));

            PMACC_STRUCT(
                DbgGaussParam,
                (PMACC_C_VALUE(float_X, sigmaX_SI, 0.0_X)) (PMACC_C_VALUE(float_X, sigmaY_SI, 0.0_X)));
            PMACC_STRUCT(
                DbgOffsetParam,
                (PMACC_C_VECTOR_DIM(float_32, DIM2, beamOffset_SI, 0.0_X, 0.0_X)) (PMACC_C_VALUE(
                    float_X,
                    beamDelay_SI,
                    0.0_X)));

            // using DbgBeamProfile = externalBeam::beamProfiles::GaussianProfile<DbgGaussParam>;
            using DbgBeamProfile = externalBeam::beamProfiles::ConstProfile;
            using DbgBeamShape = externalBeam::beamShapes::ConstShape;

            using DbgBeamCoordinates = picongpu::plugins::externalBeam::CoordinateTransform<
                DbgProbingSide,
                picongpu::plugins::externalBeam::SecondaryRotation<DbgRotationParam>,
                DbgOffsetParam>;
            using DebugBeam
                = picongpu::plugins::externalBeam::ProbingBeam<DbgBeamProfile, DbgBeamShape, DbgBeamCoordinates>;
        } // namespace externalBeam
    } // namespace plugins

    namespace particles
    {
        namespace externalBeam
        {
            namespace density
            {
                struct ProbingBeamDensityParam
                {
                private:
                    static constexpr float_64 cellVolumeSI
                        = SI::CELL_HEIGHT_SI * SI::CELL_WIDTH_SI * SI::CELL_DEPTH_SI;

                public:
                    using ProbingBeam = plugins::externalBeam::DebugBeam;
                    // Just a test value -> one 100000 photons per full cell
                    static constexpr float_64 photonFluxAtMaxBeamIntensity{
                        100000.0 / cellVolumeSI * SI::SPEED_OF_LIGHT_SI};
                };
                using ProbingBeamDensity = ProbingBeamImpl<ProbingBeamDensityParam>;
            } // namespace density
            namespace startPosition
            {
                struct QuietProbingBeamParam
                {
                    using ProbingBeam = typename picongpu::plugins::externalBeam::DebugBeam;
                    /** Number of particles in each dimension initialized in a cell (in the beam coordinate system).
                     *
                     * Keep in mind that the particles are not spaced across the complete cell but rather a reduced
                     * cell. The cell dimensions along the beam x and y coordinates stay the same but along the beam z
                     * direction the cell depth is reduced to DELTA_T * SPED_OF_LIGHT.
                     *
                     * All 3 components need to be specified.  In the case of a 2 dimensional simulation, the component
                     * corresponding to the picongpu z direction will be discarded later.
                     */
                    using numParticlesPerDimension = mCT::Int<3, 3, 1>;
                };
                using QuietBeam = QuietProbingBeam<QuietProbingBeamParam>;
            } // namespace startPosition
            namespace momentum
            {
                struct BeamMomentumParam
                {
                    using ProbingBeam = typename picongpu::plugins::externalBeam::DebugBeam;
                    static constexpr float_64 photonEnergySI = 6.0 * UNITCONV_keV_to_Joule;
                };
                using BeamMomentum = PhotonMomentum<BeamMomentumParam>;
            } // namespace momentum
            namespace initPhase
            {
                struct Param
                {
                    using ProbingBeam = typename picongpu::plugins::externalBeam::DebugBeam;
                    static constexpr float_64 phi0 = 0.0;
                };
                // using BeamPhase = FromPhotonMomentum<Param>;
                using BeamPhase = FromSpeciesWavelength<Param>;
            } // namespace initPhase
            using BeamStartAttributes
                = StartAttributesImpl<startPosition::QuietBeam, momentum::BeamMomentum, initPhase::BeamPhase>;

        } // namespace externalBeam
    } // namespace particles
} // namespace picongpu
