/* Copyright 2019-2023 Rene Widera, Pawel Ordyna
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/collision/collision.def"

#ifndef PARAM_COLLISION_PRECISION
#    define PARAM_COLLISION_PRECISION float_64
#endif

#ifndef PARAM_DYNAMIC_LOG_INTER
#    define PARAM_DYNAMIC_LOG_INTER 0
#endif
#ifndef PARAM_DYNAMIC_LOG_INTRA
#    define PARAM_DYNAMIC_LOG_INTRA 0
#endif
namespace picongpu
{
    namespace particles
    {
        namespace collision
        {
            namespace precision
            {
                using float_COLL = PARAM_COLLISION_PRECISION;
            } // namespace precision

#if(PARAM_DYNAMIC_LOG_INTER == 1 || PARAM_DYNAMIC_LOG_INTRA == 1)
            using CollisionScreeningSpecies = VectorAllSpecies;
#else
            using CollisionScreeningSpecies = MakeSeq_t<>;
#endif
            constexpr bool debugScreeningLength = true;

            /** CollisionPipeline defines in which order species interact with each other
             *
             * the functors are called in order (from first to last functor)
             */

            struct Params1
            {
                static constexpr float_X coulombLog = 5.0_X;
            };
            struct Params2
            {
                static constexpr float_X coulombLog = 1000.0_X;
            };
            using Pairs1 = MakeSeq_t<Pair<Electrons, Ions>>;
            using Pairs2 = MakeSeq_t<Pair<Electrons, Electrons>, Pair<Ions, Ions>>;

#if(PARAM_DYNAMIC_LOG_INTER == 1)
            using InterCollider = Collider<relativistic::RelativisticCollisionDynamicLog<true>, Pairs1>;
#else
            using InterCollider = Collider<relativistic::RelativisticCollisionConstLog<Params1, true>, Pairs1>;
#endif
#if(PARAM_DYNAMIC_LOG_INTRA == 1)
            using IntraCollider = Collider<relativistic::RelativisticCollisionDynamicLog<true>, Pairs2>;
#else
            using IntraCollider = Collider<relativistic::RelativisticCollisionConstLog<Params2, true>, Pairs2>;
#endif
            using CollisionPipeline = pmacc::mp_list<IntraCollider, InterCollider>;

            /** Chunk size used for cell list allocations.
             *
             * To reduce the fragmentation of the heap memory on accelerators the collision algorithm is allocating a
             * multiple of this value to store a cell list of particle IDs. The value must be non zero.
             */
            constexpr uint32_t cellListChunkSize = TYPICAL_PARTICLES_PER_CELL;

        } // namespace collision
    } // namespace particles
} // namespace picongpu
