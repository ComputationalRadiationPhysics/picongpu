/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure existing or define new normalized density profiles here.
 * During particle species creation in speciesInitialization.param,
 * those profiles can be translated to spatial particle distributions.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"


namespace picongpu
{
    namespace densityProfiles
    {
        struct FreeFormulaFunctor
        {
            /** This formula uses SI quantities only.
             *  The profile will be multiplied by BASE_DENSITY_SI.
             *
             * @param position_SI total offset including all slides [meter]
             * @param cellSize_SI cell sizes [meter]
             *
             * @return float_X density [normalized to 1.0]
             */
            HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
            {
                // Old value of previous TWEAC scenarios was: 2.0
                constexpr float_64 REL_DENSITY_HIGH = 2.0;

                // always one, use BASE_DENSITY_SI to change base density
                // just here to avoid "magic" 1.0s in the code
                constexpr float_64 REL_DENSITY_BASE = 1.0;

                // temporaray value to save the relative density
                // at the actual position
                float_X REL_DENSITY = REL_DENSITY_BASE;

                // homogeneous density
                return REL_DENSITY * REL_DENSITY_HIGH;
            }
        };

        /* definition of free formula profile */
        using FreeFormula = FreeFormulaImpl<FreeFormulaFunctor>;
    } // namespace densityProfiles
} // namespace picongpu
