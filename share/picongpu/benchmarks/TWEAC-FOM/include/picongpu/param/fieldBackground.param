/* Copyright 2014-2023 Axel Huebl, Alexander Debus, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file fieldBackground.param
 *
 * Load external background fields
 */

#pragma once

#include "picongpu/fields/background/templates/twtsfast/twtsfast.hpp"


#ifndef PARAM_FIELD_BACKGROUND
#    define PARAM_FIELD_BACKGROUND 1
#endif

namespace picongpu
{
    class FieldBackgroundE
    {
    public:
        /* Add this additional field for pushing particles */
        static constexpr bool InfluenceParticlePusher = (PARAM_FIELD_BACKGROUND != 0);

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        /* TWTS E-fields need to be initialized on host,
         *  so they can look up global grid dimensions. */
        // PMACC_ALIGN(twtsFieldE, const templates::twtsfast::EField);
        const templates::twtsfast::EField twtsFieldE1;
        const templates::twtsfast::EField twtsFieldE2;
        const templates::twtsfast::EField twtsFieldE3;
        const templates::twtsfast::EField twtsFieldE4;

        HDINLINE FieldBackgroundE(const FieldBackgroundE&) = default;

        /* Constructor is host-only, because of subGrid and halfSimSize initialization */
        HINLINE FieldBackgroundE(const float3_64 unitField)
            : m_unitField(unitField)
            , twtsFieldE1(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true/false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::EField::LINEAR_X)
            , twtsFieldE2(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  -3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true/false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::EField::LINEAR_X)
            , twtsFieldE3(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true/false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::EField::LINEAR_YZ)
            , twtsFieldE4(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  -3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true/false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::EField::LINEAR_YZ)
        {
        }

        /** Specify your background field E(r,t) here
         *
         * @param cellIdx The total cell id counted from the start at t = 0
         * @param currentStep The current time step */
        HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
        {
            /* example 1: TWTS background pulse */
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            /* const double UNITCONV_Intens_to_A0 = SI::ELECTRON_CHARGE_SI
             * SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI
             * SI::ELECTRON_MASS_SI * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
             * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI
             * SI::SPEED_OF_LIGHT_SI * SI::EPS0_SI); */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * SI::ELECTRON_MASS_SI
                * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            /* constexpr float_64 _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4; */
            /** unit: none */
            /* constexpr float_64 _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0; */

            /** unit: none */
            const float_64 _A0 = 3.25 * 0.01; // reduced for FOM benchmark

            /** unit: Volt /meter */
            /*@todo #738 implement math::vector, native type operations */
            const float3_64 invUnitField = float3_64(1.0 / m_unitField[0], 1.0 / m_unitField[1], 1.0 / m_unitField[2]);

            /* laser amplitude in picongpu units [ unit: (Volt /meter) / unitField-factor ]
             * Note: the laser amplitude is included in all field components
             * polarization and other properties are established by the peak amplitude
             * normalized twtsFieldE(...) */
            const float3_X amplitude
                = precisionCast<float_X>(float_64(_A0 * UNITCONV_A0_to_Amplitude_SI) * invUnitField);

            /* Note: twtsFieldE(...) is normalized, such that peak amplitude equals unity. */
            return float3_X::create(0.7057829460593135) * amplitude * twtsFieldE1(cellIdx, currentStep)
                - float3_X::create(0.7057829460593135) * amplitude * twtsFieldE2(cellIdx, currentStep)
                + float3_X::create(0.7084281424758874) * amplitude * twtsFieldE3(cellIdx, currentStep)
                + float3_X::create(0.7084281424758874) * amplitude * twtsFieldE4(cellIdx, currentStep);
        }
    };

    class FieldBackgroundB
    {
    public:
        /* Add this additional field for pushing particles */
        static constexpr bool InfluenceParticlePusher = (PARAM_FIELD_BACKGROUND != 0);

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        /* TWTS B-fields need to be initialized on host,
         * so they can look up global grid dimensions. */
        // PMACC_ALIGN(twtsFieldB, const templates::twtsfast::BField);
        templates::twtsfast::BField twtsFieldB1;
        templates::twtsfast::BField twtsFieldB2;
        templates::twtsfast::BField twtsFieldB3;
        templates::twtsfast::BField twtsFieldB4;

        HDINLINE FieldBackgroundB(const FieldBackgroundB&) = default;

        HINLINE FieldBackgroundB(const float3_64 unitField)
            : m_unitField(unitField)
            , twtsFieldB1(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true / false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::BField::LINEAR_X)
            , twtsFieldB2(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  -3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true / false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::BField::LINEAR_X)
            , twtsFieldB3(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true / false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::BField::LINEAR_YZ)
            , twtsFieldB4(
                  /* focus_y [m], the distance to the laser focus in y-direction */
                  30.0e-6,
                  /* wavelength [m] */
                  0.8e-6,
                  /* pulselength [s], sigma of std. gauss for intensity (E^2) */
                  10.0e-15 / 2.3548200450309493820231386529194,
                  /* w_x [m], cylindrically focused spot size */
                  1.2e-6,
                  /* interaction angle between TWTS laser propagation vector and the y-axis [rad] */
                  -3.5 * (PI / 180.),
                  /* propagation speed of overlap [speed of light]. */
                  1.0,
                  /* manual time delay [s] if auto_tdelay is false */
                  50.0e-6 / SI::SPEED_OF_LIGHT_SI,
                  /* Should PIConGPU automatically choose a suitable time delay? [true / false] */
                  false,
                  /* Polarization of TWTS laser field */
                  templates::twtsfast::BField::LINEAR_YZ)
        {
        }

        /** Specify your background field B(r,t) here
         *
         * @param cellIdx The total cell id counted from the start at t=0
         * @param currentStep The current time step */
        HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            /* constexpr float_64 UNITCONV_Intens_to_A0 = SI::ELECTRON_CHARGE_SI
             * SI::ELECTRON_CHARGE_SI * 2.0 * WAVE_LENGTH_SI * WAVE_LENGTH_SI / (4.0 * PI * PI
             * SI::ELECTRON_MASS_SI * SI::ELECTRON_MASS_SI * SI::SPEED_OF_LIGHT_SI
             * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI
             * SI::SPEED_OF_LIGHT_SI * SI::EPS0_SI); */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * SI::ELECTRON_MASS_SI
                * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            /* constexpr float_64 _PEAK_INTENSITY_SI = 3.4e19 * 1.0e4; */
            /** unit: none */
            /* constexpr float_64 _A0  = _PEAK_INTENSITY_SI * UNITCONV_Intens_to_A0; */

            /** unit: none */
            constexpr float_64 _A0 = 3.25 * 0.01; // reduced for FOM benchmark

            /** unit: Volt /meter */
            const float3_64 invUnitField = float3_64(1.0 / m_unitField[0], 1.0 / m_unitField[1], 1.0 / m_unitField[2]);

            /* laser amplitude in picongpu units [ unit: (Volt/meter) / unitField-factor ]
             * Note: the laser amplitude is included in all field components
             * polarization and other properties are established by the peak amplitude
             * normalized twtsFieldB(...) */
            const float3_X amplitude
                = precisionCast<float_X>(float_64(_A0 * UNITCONV_A0_to_Amplitude_SI) * invUnitField);

            /* Note: twtsFieldB(...) is normalized, such that peak amplitude equals unity. */
            return float3_X::create(0.7057829460593135) * amplitude * twtsFieldB1(cellIdx, currentStep)
                - float3_X::create(0.7057829460593135) * amplitude * twtsFieldB2(cellIdx, currentStep)
                + float3_X::create(0.7084281424758874) * amplitude * twtsFieldB3(cellIdx, currentStep)
                + float3_X::create(0.7084281424758874) * amplitude * twtsFieldB4(cellIdx, currentStep);
        }
    };

    class FieldBackgroundJ
    {
    public:
        /* Add this additional field? */
        static constexpr bool activated = false;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(m_unitField, const float3_64);

        HDINLINE FieldBackgroundJ(const FieldBackgroundJ&) = default;

        HDINLINE FieldBackgroundJ(const float3_64 unitField) : m_unitField(unitField)
        {
        }

        /** Specify your background field J(r,t) here
         *
         * @param cellIdx The total cell id counted from the start at t=0
         * @param currentStep The current time step */
        HDINLINE float3_X operator()(const DataSpace<simDim>& cellIdx, const uint32_t currentStep) const
        {
            /* example: periodicity of 20 microns ( = 2.0e-5 m) */
            constexpr float_64 period_SI(20.0e-6);
            /* calculate cells -> SI -> m to microns*/
            const float_64 y_SI = cellIdx.y() * sim.si.getCellSize().y() * 1.0e6;
            /* note: you can also transform the time step to seconds by
             *       multiplying with DELTA_T_SI */

            /* specify your J-Field in A/m^2 and convert to PIConGPU units */
            const float_X sinArg = precisionCast<float_X>(y_SI / period_SI * 2.0 * PI);
            return float3_X(0.0, math::cos(sinArg) / m_unitField[1], 0.0);
        }
    };

} // namespace picongpu
