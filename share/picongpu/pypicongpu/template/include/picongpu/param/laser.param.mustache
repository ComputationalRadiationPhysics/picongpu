/* Copyright 2013-2021 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure laser profiles. All laser propagate in y direction.
 *
 * Available profiles:
 *  - None                : no laser init
 *  - GaussianBeam        : Gaussian beam (focusing)
 *  - PulseFrontTilt      : Gaussian beam with a tilted pulse envelope
 *                          in 'x' direction
 *  - PlaneWave           : a plane wave (Gaussian in time)
 *  - Wavepacket          : wavepacket (Gaussian in time and space, not
 *                          focusing)
 *  - Polynom             : a polynomial laser envelope
 *  - ExpRampWithPrepulse : wavepacket with exponential upramps and prepulse
 *
 * In the end, this file needs to define a `Selected` class in namespace
 * `picongpu::fields::laserProfiles`. A typical profile consists of a
 * laser profile class and its parameters. For example:
 *
 * @code{.cpp}
 * using Selected = GaussianBeam< GaussianBeamParam >;
 * @endcode
 */

#pragma once

#include "picongpu/fields/laserProfiles/profiles.def"

namespace picongpu
{
    namespace fields
    {
        namespace laserProfiles
        {
            {{#laser}}
            namespace gaussianBeam
            {
                //! Use only the 0th Laguerremode for a standard Gaussian
                static constexpr uint32_t MODENUMBER = {{{modenumber}}};
                PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, 
                {{#laguerre_modes}}
                {{{single_laguerre_mode}}}{{^_last}},{{/_last}}
                {{/laguerre_modes}}
                );
                PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREPHASES,
                {{#laguerre_phases}}
                {{{single_laguerre_phase}}}{{^_last}},{{/_last}}
                {{/laguerre_phases}}
                );
            } // namespace gaussianBeam

            struct pypicongpu_gaussian_laser_param_t
            {
                static constexpr float_64 WAVE_LENGTH_SI = {{{wave_length_si}}};
                static constexpr float_64 AMPLITUDE_SI = {{{E0_si}}};
                static constexpr float_64 PULSE_LENGTH_SI = {{{pulse_length_si}}};
                static constexpr float_64 W0_SI = {{{waist_si}}};
                static constexpr float_64 FOCUS_POS_SI = {{{focus_pos_si}}};
                static constexpr float_64 PULSE_INIT = {{{pulse_init}}};
                static constexpr uint32_t initPlaneY = {{{init_plane_y}}};
                static constexpr float_X LASER_PHASE = {{{phase}}};

                using LAGUERREMODES_t = gaussianBeam::LAGUERREMODES_t;
                using LAGUERREPHASES_t = gaussianBeam::LAGUERREPHASES_t;
                static constexpr uint32_t MODENUMBER = gaussianBeam::MODENUMBER;

                enum PolarisationType
                {
                    LINEAR_X = 1u,
                    LINEAR_Z = 2u,
                    CIRCULAR = 4u,
                };
                static constexpr PolarisationType Polarisation = {{{polarization_type}}};
            };
            using Selected = GaussianBeam<pypicongpu_gaussian_laser_param_t>;
            {{/laser}}

            {{^laser}}
            using Selected = None<>;
            {{/laser}}
        } // namespace laserProfiles
    } // namespace fields
} // namespace picongpu
