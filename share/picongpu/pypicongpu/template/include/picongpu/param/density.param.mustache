/* Copyright 2013-2024 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Marco Garten, Brian Marre, Kristin Tippey
 *                     Hannes Troepgen, Masoud Afshari
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
#include "picongpu/particles/traits/GetDensityRatio.hpp"

namespace picongpu
{
    namespace densityProfiles::pypicongpu
    {
        {{#species_initmanager.operations.simple_density}}
        // a species has always only exactly one profile, so only one of the following blocks below will be present

          {{#profile.type.gaussian}}
            /** generate the initial macroparticle position for species "{{{placed_species_initial.name}}}" ({{{placed_species_initial.typename}}})
             *
             * @note the density may be further modified from this profile by the densityRatio of the species, set in
             *  the init-pipeline.
             */
            struct init_{{{placed_species_initial.typename}}}_GaussianParam
            {
                static constexpr float_X gasFactor = {{{profile.data.gas_factor}}};
                static constexpr float_X gasPower  = {{{profile.data.gas_power}}};

                //! height of vacuum area on top border, unit: cells
                static constexpr uint32_t vacuumCellsY = {{{profile.data.vacuum_cells_front}}};

                //! The edges of the constant center of the profile, unit: meter
                static constexpr float_64 gasCenterLeft_SI  = {{{profile.data.gas_center_front}}};
                static constexpr float_64 gasCenterRight_SI = {{{profile.data.gas_center_rear}}};

                /** the distance from gasCenter_SI until the gas density decreases to its 1/e-th part
                 *  unit: meter
                 */
                static constexpr float_64 gasSigmaLeft_SI  = {{{profile.data.gas_sigma_front}}};
                static constexpr float_64 gasSigmaRight_SI = {{{profile.data.gas_sigma_rear}}};

                //! factor to multiply BASE_DENSITY_SI by to get density
                static constexpr float_X densityFactor
                    = static_cast<float_X>({{{profile.data.density}}} / SI::BASE_DENSITY_SI);
            };

            using init_{{{placed_species_initial.typename}}} = GaussianImpl<init_{{{placed_species_initial.typename}}}_GaussianParam>;
          {{/profile.type.gaussian}}

          {{#profile.type.uniform}}
            /** generate the initial macroparticle position for species "{{{placed_species_initial.name}}}" ({{{placed_species_initial.typename}}})
             *
             * @note the density may be further modified from this profile by the densityRatio of the species set in the
             *  init-pipeline.
             */
            struct init_{{{placed_species_initial.typename}}}_functor
            {
                /** generate the initial macroparticle position for species "{{{placed_species_initial.name}}}" ({{{placed_species_initial.typename}}})
                 *
                 * @note the density may be further modified from this profile by the densityRatio of the species, set in
                 *  the init-pipeline.
                 */
                HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
                {
                    //! @todo respect bounding box, Brian Marre, 2023
                    return static_cast<float_X>({{{profile.data.density_si}}} / SI::BASE_DENSITY_SI);
                }
            };
            using init_{{{placed_species_initial.typename}}} = FreeFormulaImpl<init_{{{placed_species_initial.typename}}}_functor>;
          {{/profile.type.uniform}}

          {{#profile.type.foil}}
            /** generate the initial macroparticle position for species "{{{placed_species_initial.name}}}" ({{{placed_species_initial.typename}}})
             *
             * @note the density may be further modified from this profile by the densityRatio of the species, set in
             *  the init-pipeline.
             */
            struct init_{{{placed_species_initial.typename}}}_functor
            {
                HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
                {
                    //! @todo respect bounding box, Brian Marre, 2023
                    float_64 const y = position_SI.y(); // m
                    float_X dens = 0._X; // in units of BASE_DENSITY_SI

                    // begin & end plateau of foil
                    constexpr float_64 y0 = {{{profile.data.y_value_front_foil_si}}};
                    constexpr float_64 y1 = y0 + {{{profile.data.thickness_foil_si}}};

                    // prePlasma ramp
                    {{#profile.data.pre_foil_plasmaRamp.type.exponential}}
                        // exponential pre-expanded density ramp before plateau of foil
                        constexpr float_64 prePlasmaLength = {{{profile.data.pre_foil_plasmaRamp.data.PlasmaLength}}};
                        constexpr float_64 prePlasmaCutoff = {{{profile.data.pre_foil_plasmaRamp.data.PlasmaCutoff}}};

                        // prefoil upramp
                        if((y < y0) &&  y > y0 - prePlasmaCutoff)
                            dens = static_cast<float_X>({{{profile.data.density_si}}} / SI::BASE_DENSITY_SI)
                                * math::exp((y - y0) / prePlasmaLength);
                    {{/profile.data.pre_foil_plasmaRamp.type.exponential}}

                    {{#profile.data.pre_foil_plasmaRamp.type.none}}
                        // no prePlasma ramp
                    {{/profile.data.pre_foil_plasmaRamp.type.none}}

                    // postPlasma ramp
                    {{#profile.data.post_foil_plasmaRamp.type.exponential}}
                        // exponential pre-expanded density ramp after plateau of foil
                        constexpr float_64 postPlasmaLength = {{{profile.data.post_foil_plasmaRamp.data.PlasmaLength}}};
                        constexpr float_64 postPlasmaCutoff = {{{profile.data.post_foil_plasmaRamp.data.PlasmaCutoff}}};
                    // postfoil downramp
                        if(y > y1 && y < y1 + postPlasmaCutoff)
                            dens = static_cast<float_X>({{{profile.data.density_si}}} / SI::BASE_DENSITY_SI)
                                * math::exp((y1 - y) / postPlasmaLength);
                    {{/profile.data.post_foil_plasmaRamp.type.exponential}}

                    {{#profile.data.post_foil_plasmaRamp.type.none}}
                        // no postPlasma ramp
                    {{/profile.data.post_foil_plasmaRamp.type.none}}

                    // foil plateau
                    if(y >= y0 && y <= y1)
                        dens = static_cast<float_X>({{{profile.data.density_si}}} / SI::BASE_DENSITY_SI);

                    // safety check: all parts of the function MUST be > 0
                    dens *= float_64(dens >= 0.0);
                    return dens;
                }
            };
            using init_{{{placed_species_initial.typename}}} = FreeFormulaImpl<init_{{{placed_species_initial.typename}}}_functor>;
          {{/profile.type.foil}}

        {{/species_initmanager.operations.simple_density}}
    } // namespace densityProfiles::pypicongpu
} // namespace picongpu
