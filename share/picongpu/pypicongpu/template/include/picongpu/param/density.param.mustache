/* Copyright 2013-2021 Axel Huebl, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
#include "picongpu/particles/traits/GetDensityRatio.hpp"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>

namespace picongpu
{
    namespace SI
    {
        /** Base density in particles per m^3 in the density profiles.
         *
         * This is often taken as reference maximum density in normalized profiles.
         * Individual particle species can define a `densityRatio` flag relative
         * to this value.
         *
         * unit: ELEMENTS/m^3
         */
        constexpr float_64 BASE_DENSITY_SI = 1.e25;
    } // namespace SI

    namespace densityProfiles
    {
        namespace pypicongpu {
            {{#species_initmanager.operations.simple_density}}
                /**
                 * generate the initial macroparticle position for species "{{{placed_species_initial.name}}}" ({{{placed_species_initial.typename}}})
                 *
                 * (Note: This profile assumes ratio to be 1. The correct ratio is applied in the initpipeline by CreateDensity.)
                 */
                struct init_{{{placed_species_initial.typename}}}_functor
                {
                    HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
                    {
                        // TODO: respect bounding box

                        {{#profile.type.uniform}}
                            // note: right hand side is double
                            return {{{profile.data.density_si}}} / SI::BASE_DENSITY_SI;
                        {{/profile.type.uniform}}
                    }
                };

                using init_{{{placed_species_initial.typename}}} = FreeFormulaImpl<init_{{{placed_species_initial.typename}}}_functor>;
            {{/species_initmanager.operations.simple_density}}
        } // namespace pypicongpu
    } // namespace densityProfiles
} // namespace picongpu
