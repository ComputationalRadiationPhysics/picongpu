/* Copyright 2013-2019 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include <pmacc/nvidia/functors/Add.hpp>
#include <pmacc/nvidia/functors/Assign.hpp>
#include "picongpu/particles/traits/GetAtomicNumbers.hpp"


namespace picongpu
{

namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none
     */
    constexpr float_X MIN_WEIGHTING = 10.0;

namespace manipulators
{
    // define a drift in X equal to 200 keV for electrons
    CONST_VECTOR(float_X, 3, DriftParam_direction, 1.0, 0.0, 0.0);
    struct Drift200keVParam
    {
        static constexpr float_64 gamma = 1.39139;
        const DriftParam_direction_t direction;
    };
    using Assign200keVDrift = unary::Drift< Drift200keVParam, nvidia::functors::Assign >;

    struct TemperatureParam
    {
        /** Initial temperature
         *  unit: keV
         */
        static constexpr float_64 temperature = 0.1;
    };
    using AddTemperature = unary::Temperature< TemperatureParam >;

    struct OnceIonizedImpl
    {
        template< typename T_Particle >
        DINLINE void operator()( T_Particle& particle )
        {
            constexpr float_X ion1plus =
                GetAtomicNumbers< T_Particle >::type::numberOfProtons -
                1._X;

            // set (Z - 1) bound electrons
            particle[boundElectrons_] = ion1plus;
        }
    };
    // definition of SetDrift start
    using OnceIonized = generic::Free< OnceIonizedImpl >;

} // namespace manipulators


namespace startPosition
{

    struct QuietParam2ppc
    {
        /** Count of particles per cell per direction at initial state
         *  unit: none
         */
        using numParticlesPerDimension = typename mCT::shrinkTo<
            mCT::Int< 1, 2, 1 >,
            simDim
        >::type;
    };

    // definition of quiet particle start
    using Quiet2ppc = QuietImpl< QuietParam2ppc >;

} // namespace startPosition

    /** During unit normalization, we assume this is a typical
     *  number of particles per cell for normalization of weighted
     *  particle attributes.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = mCT::volume<
        startPosition::QuietParam2ppc::numParticlesPerDimension
    >::type::value;

} // namespace particles
} // namespace picongpu
