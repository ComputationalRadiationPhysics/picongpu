/* Copyright 2013-2019 Rene Widera, Richard Pausch, Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"

#include <pmacc/nvidia/functors/Add.hpp>
#include <pmacc/nvidia/functors/Assign.hpp>

#include <limits>


namespace picongpu
{

namespace particles
{

    /* a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none
     */
#ifdef PARAM_SINGLE_PARTICLE
    // note: this specific setting allows all kinds of weightings > 0.0
    constexpr float_X MIN_WEIGHTING = std::numeric_limits< float_X >::min();

    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 1;
#else
    constexpr float_X MIN_WEIGHTING = 10.0;

    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 6;
#endif

namespace manipulators
{

    CONST_VECTOR( float_X, 3, DriftParamNegative_direction, 0.0, -1.0, 0.0 );
    struct DriftParamNegative
    {
        /** Initial particle drift velocity for electrons and ions
         *  Examples:
         *    - No drift is equal to 1.0
         *  unit: none
         */
        static constexpr float_64 gamma = 5.0;
        const DriftParamNegative_direction_t direction;
    };
    // definition of SetDrift start
    using AssignYDriftNegative = unary::Drift<
        DriftParamNegative,
        nvidia::functors::Assign
    >;

} // namespace manipulators


namespace startPosition
{

    struct RandomParameter
    {
        /** Count of particles per cell at initial state
         *  unit: none
         */
        static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
    };
    using Random = RandomImpl< RandomParameter >;


    // sit directly in lower corner of the cell
    CONST_VECTOR(
        float_X,
        3,
        InCellOffset,
        /* each x, y, z in-cell position component in range [0.0, 1.0) */
        0.0,
        0.0,
        0.0
    );

    struct OnePositionParameter
    {
        /** Count of particles per cell at initial state
         *  unit: none
         */
        static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;

        const InCellOffset_t inCellOffset;
    };

    // definition of one specific position for particle start
    using OnePosition = OnePositionImpl< OnePositionParameter >;

} // namespace startPosition
} // namespace particles
} // namespace picongpu
