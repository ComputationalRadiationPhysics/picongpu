/* Copyright 2013-2019 Heiko Burau, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
  namespace radiation_observer
  {
    /** Compute observation angles
     *
     * This function is used in the Radiation plug-in kernel to compute
     * the observation directions given as a unit vector pointing
     * towards a 'virtual' detector
     *
     * @param    observation_id_extern
     *           int index that identifies each block on the GPU
     *           to compute the observation direction
     *
     * @return   unit vector pointing in observation direction
     *           type: vector_64
     *
     */
    HDINLINE vector_64 observation_direction(const int observation_id_extern)
    {
      /** Computes observation angles along the x-y plane.
       *  Assuming electron(s) fly in -y direction and the laser
       *  propages in +y direction, the observation angles are centered
       *  around the -y-axis (0,-1,0) .
       *  By setting gamma, the angle range can be adjusted to the
       *  energy of the electrons.
       */

      /* in this case only one id is needed: an index for theta */
      const int my_theta_id = observation_id_extern;

      /* set up: */
      constexpr picongpu::float_64 gamma_times_thetaMax = 1.5; /* max normalized angle */
      constexpr picongpu::float_64 gamma = 5.0;                /* relativistic gamma */
      constexpr picongpu::float_64 thetaMax = gamma_times_thetaMax / gamma; /* max angle */

      /* stepwith of theta for from [-thetaMax : +thetaMax] */
      constexpr picongpu::float_64 delta_theta =  2.0 * thetaMax / (parameters::N_observer);

      /* compute angle theta for index */
      const picongpu::float_64 theta(my_theta_id * delta_theta - thetaMax + picongpu::PI);
      /* + picongpu::PI -> turn observation direction 180 degrees towards -y */

      /* compute observation unit vector */
      picongpu::float_32 sinTheta;
      picongpu::float_32 cosTheta;
      math::sincos(precisionCast<picongpu::float_32>(theta), sinTheta, cosTheta);
      return vector_64(sinTheta, cosTheta, 0.0);

    }

  } // end namespace radiation_observer
} // end namespace picongpu
