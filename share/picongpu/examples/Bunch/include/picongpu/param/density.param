/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"

namespace picongpu
{
    namespace densityProfiles
    {
        struct GaussianCloudParam
        {
            /** Profile Formula:
             *     exponent = |globalCellPos - center| / sigma
             *     density = e^[ gasFactor * exponent^gasPower ]
             */
            static constexpr float_X gasFactor = -0.5;
            static constexpr float_X gasPower = 2.0;

            /** height of vacuum area on top border
             *
             * this vacuum is important because of the laser initialization,
             * which is done in the first cell of the simulation
             * unit: cells
             */
            static constexpr uint32_t vacuumCellsY = 50;

            /** The central position of the density distribution
             *  unit: meter
             */
            static constexpr floatD_64 center_SI = float3_64(1.024e-5, 9.072e-5, 1.024e-5).shrink<simDim>();

            /** the distance from gasCenter_SI until the density decreases to its 1/e-th part
             *  unit: meter */
            static constexpr floatD_64 sigma_SI = float3_64(6.0e-6, 6.0e-6, 6.0e-6).shrink<simDim>();
        };

        /* definition of cloud profile */
        using GaussianCloud = GaussianCloudImpl<GaussianCloudParam>;


        struct FreeFormulaFunctor
        {
            /** This formula uses SI quantities only
             *
             * The profile will be multiplied by BASE_DENSITY.
             *
             * @param position_SI total offset including all slides [in meter]
             * @param cellSize_SI cell sizes [in meter]
             *
             * @return float_X density [normalized to 1.0]
             */
            HDINLINE float_X operator()(const floatD_64& position_SI, const float3_64& cellSize_SI)
            {
                /* add particle in cell at center of Gaussian Cloud profile */
                const float3_64 position_start_SI(1.024e-5, 9.072e-5, 1.024e-5);

                /* from all cells ... */
                const pmacc::math::UInt64<simDim> cell_id(position_SI / cellSize_SI.shrink<simDim>());

                /* ... we calculate the corresponding "center" cell to init the particle in ... */
                const pmacc::math::UInt64<simDim> cell_start(precisionCast<uint64_t>(
                    math::floor(position_start_SI.shrink<simDim>() / cellSize_SI.shrink<simDim>())));

                /* ... and only in that center cell the density is 1.0, outside zero */
                bool isStartCell = true;
                for(uint64_t d = 0; d < simDim; ++d)
                    if(cell_id[d] != cell_start[d])
                        isStartCell = false;

                if(isStartCell)
                    return 1.0;

                return 0.0;
            }
        };

        /* definition of free formula profile */
        using FreeFormula = FreeFormulaImpl<FreeFormulaFunctor>;

    } // namespace densityProfiles
} // namespace picongpu
