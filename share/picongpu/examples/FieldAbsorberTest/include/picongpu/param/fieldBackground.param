/* Copyright 2014-2019 Axel Huebl, Alexander Debus, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once


#include "picongpu/fields/background/templates/zero/Zero.hpp"

/** Load external background fields
 *
 */
namespace picongpu
{

    // No background for E and B fields
    using FieldBackgroundE = fields::background::templates::zero::FieldE;
    using FieldBackgroundB = fields::background::templates::zero::FieldB;

    class FieldBackgroundJ
    {
    public:
        /* Add this additional field? */
        static constexpr bool activated = true;

        /* We use this to calculate your SI input back to our unit system */
        PMACC_ALIGN(
            m_unitField,
            const float3_64
        );

        HDINLINE FieldBackgroundJ( const float3_64 unitField ) :
            m_unitField(unitField)
        {}

        /** Specify your background field J(r,t) here
         *
         * \param cellIdx The total cell id counted from the start at t=0
         * \param currentStep The current time step */
        HDINLINE float3_X
        operator()(
            const DataSpace<simDim>& cellIdx,
            const uint32_t currentStep
        ) const
        {
            /* Source index is hard-coded, should be in the center of the global
             * domain, so has to be changed together with the grid size.
             */
            DataSpace< simDim > const sourceIdx =
                DataSpace< simDim >::create( 64u );
            if( cellIdx != sourceIdx )
                return float3_X(
                    0.0,
                    0.0,
                    0.0
                );

            /* This setup is based on [Taflove, Hagness], section 7.11.1
             * The difference is we consider both 2D and 3D cases,
             * and grid size may be increased due to our absorber being part of
             * the simulation area, not located outside of it as in the book.
             */
            constexpr float_X duration_SI = 26.53e-12; // 26.53 ps
            constexpr float_X delay_SI = 4.0_X * duration_SI;
            float_X const time_SI = currentStep * SI::DELTA_T_SI;
            float_X const normalizedTime = ( time_SI - delay_SI ) / duration_SI;
            float_X const value = -2.0 * normalizedTime *
                math::exp( -normalizedTime * normalizedTime );
            /* specify your J-Field in A/m^2 and convert to PIConGPU units */
            return float3_X(
                0.0,
                0.0,
                value / m_unitField[1]
            );
        }
    };

} // namespace picongpu
