/* Copyright 2013-2020 Axel Huebl, Rene Widera, Marco Garten, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"

#include <pmacc/nvidia/functors/Assign.hpp>

#include <pmacc/math/Vector.hpp>

namespace picongpu
{
namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none
     */
    constexpr float_X MIN_WEIGHTING = 10.0;

namespace startPosition
{

    struct RandomParameter20ppc
    {
        /** Count of particles per cell at initial state
         *  unit: none
         */
        static constexpr uint32_t numParticlesPerCell = 20u;
    };
    using Random20ppc = RandomImpl< RandomParameter20ppc >;

} // namespace startPosition

    /** During unit normalization, we assume this is a typical
     *  number of particles per cell for normalization of weighted
     *  particle attributes.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL =
        startPosition::RandomParameter20ppc::numParticlesPerCell;

namespace manipulators
{

    struct SetIonToOnceIonized
    {
        // set ions to once ionized
        template< typename T_Particle >
        DINLINE void operator()( T_Particle & particle )
        {
            using Particle = T_Particle;

            // number of bound electrons at initialization state of the neutral atom
            float_X const protonNumber = traits::GetAtomicNumbers< T_Particle >::type::numberOfProtons;

            // init normal ionization
            particle[ boundElectrons_ ] = protonNumber - 1;

            /*
            // get current Configutation number object
            auto configNumber = particle[ atomicConfigNumber_ ];

            // occupation number vector
            auto occupationNumbers = pmacc::math::Vector<
                uint8_t,
                configNumber.numberLevels
                >::create( 0u );

            uint8_t numberElectronsRemaining = protonNumber - 1;

            // fill from bottom up until no electrons remaining
            for ( uint8_t level = 1u; level <= configNumber.numberlevels; i++ )
            {
                if ( numberElectronsRemaining >= 2u * i * i)
                {
                    *occupationNumbers[ i - 1u ] = 2u * i * i;
                    numberElectronsRemaining -= 2u * i * i;
                }
                else
                {
                    *occupationNumbers[ i - 1u ] = numberElectronsRemaining;
                    numberElectronsRemaining = 0;
                    break;
                }
            }
            */
            // change atomic state index
            particle[ atomicConfigNumber_ ] = 0u;// configNumber::getAtomicStateIndex( occupationNumbers );
        }
    };

    // define a drift in X equal to 200 keV for electrons
    CONST_VECTOR(float_X, 3, DriftParam_direction, 1.0, 0.0, 0.0);
    struct Drift200keVParam
    {
        static constexpr float_64 gamma = 1.39139;
        const DriftParam_direction_t direction;
    };
    using Assign200keVDrift = unary::Drift< Drift200keVParam, nvidia::functors::Assign >;

    struct TemperatureParam
    {
        /** Initial temperature
         *  unit: keV
         */
        static constexpr float_64 temperature = 10.;
    };
    using AddTemperature = unary::Temperature< TemperatureParam >;


    // definition of SetDrift start
    using OnceIonized = generic::Free< SetIonToOnceIonized >;

} // namespace manipulators
} // namespace particles
} // namespace picongpu
