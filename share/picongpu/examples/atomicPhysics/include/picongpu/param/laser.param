/* Copyright 2013-2019 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure laser profiles. All laser propagate in y direction.
 *
 * Available profiles:
 *  - None                : no laser init
 *  - GaussianBeam        : Gaussian beam (focusing)
 *  - PulseFrontTilt      : Gaussian beam with a tilted pulse envelope
 *                          in 'x' direction
 *  - PlaneWave           : a plane wave (Gaussian in time)
 *  - Wavepacket          : wavepacket (Gaussian in time and space, not
 *                          focusing)
 *  - Polynom             : a polynomial laser envelope
 *  - ExpRampWithPrepulse : wavepacket with exponential upramps and prepulse
 *
 * In the end, this file needs to define a `Selected` class in namespace
 * `picongpu::fields::laserProfiles`. A typical profile consists of a
 * laser profile class and its parameters. For example:
 *
 * @code{.cpp}
 * using Selected = GaussianBeam< GaussianBeamParam >;
 * @endcode
 */

#pragma once

#include "picongpu/fields/laserProfiles/profiles.def"

#ifndef PARAM_A0
#   define PARAM_A0 8.0
#endif

#ifndef PARAM_WAVE_LENGTH_SI
#   define PARAM_WAVE_LENGTH_SI 0.8e-6
#endif

#ifndef PARAM_PULSE_LENGTH_SI
#   define PARAM_PULSE_LENGTH_SI 5.e-15
#endif

namespace picongpu
{
namespace fields
{
namespace laserProfiles
{
namespace gaussianBeam
{
    //! Use only the 0th Laguerremode for a standard Gaussian
    static constexpr uint32_t MODENUMBER = 0;
    PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, 1.0);
    // This is just an example for a more complicated set of Laguerre modes
    //constexpr uint32_t MODENUMBER = 12;
    //PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, -1.0, 0.0300519, 0.319461, -0.23783, 0.0954839, 0.0318653, -0.144547, 0.0249208, -0.111989, 0.0434385, -0.030038, -0.00896321, -0.0160788);

} // namespace gaussianBeam

    struct GaussianBeamParam
    {
        /** unit: meter */
        static constexpr float_64 WAVE_LENGTH_SI = PARAM_WAVE_LENGTH_SI;

        /** Convert the normalized laser strength parameter a0 to Volt per meter */
        static constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

        /** unit: W / m^2 */
        // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

        /** unit: none */
        static constexpr float_64 _A0  = PARAM_A0;

        /** unit: Volt / meter */
        static constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

        /** unit: Volt / meter */
        //static constexpr float_64 AMPLITUDE_SI = 1.738e13;

        /** Pulse length: sigma of std. gauss for intensity (E^2)
         *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
         *                                          [    2.354820045     ]
         *  Info:             FWHM_of_Intensity = FWHM_Illumination
         *                      = what a experimentalist calls "pulse duration"
         *
         *  unit: seconds (1 sigma) */
        static constexpr float_64 PULSE_LENGTH_SI = PARAM_PULSE_LENGTH_SI;

        /** beam waist: distance from the axis where the pulse intensity (E^2)
         *              decreases to its 1/e^2-th part,
         *              at the focus position of the laser
         * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
         *                             [   1.17741    ]
         *
         *  unit: meter */
        static constexpr float_64 W0_SI = 5.0e-6 / 1.17741;
        /** the distance to the laser focus in y-direction
         *  unit: meter */
        static constexpr float_64 FOCUS_POS_SI = 4.62e-5;

        /** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
         *
         *  unit: none */
        static constexpr float_64 PULSE_INIT = 15.0;

        /** cell from top where the laser is initialized
         *
         * if `initPlaneY == 0` than the absorber are disabled.
         * if `initPlaneY > absorbercells negative Y` the negative absorber in y
         * direction is enabled
         *
         * valid ranges:
         *   - initPlaneY == 0
         *   - absorber cells negative Y < initPlaneY < cells in y direction of the top gpu
         */
        static constexpr uint32_t initPlaneY = 0;

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        static constexpr float_X LASER_PHASE = 0.0;

        using LAGUERREMODES_t = gaussianBeam::LAGUERREMODES_t;
        static constexpr uint32_t MODENUMBER = gaussianBeam::MODENUMBER;

        /** Available polarisation types
         */
        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        /** Polarization selection
         */
        static constexpr PolarisationType Polarisation = CIRCULAR;
    };

    //! currently selected laser profile
    using Selected = GaussianBeam< GaussianBeamParam >;

} // namespace laserProfiles
} // namespace fields
} // namespace picongpu
