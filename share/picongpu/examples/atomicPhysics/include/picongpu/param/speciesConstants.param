/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Constants and thresholds for particle species.
 *
 * Defines the reference mass and reference charge to express species
 * with (default: electrons with negative charge).
 */

#pragma once


namespace picongpu
{
    /** Threshold between relativistic and non-relativistic regime
     *
     * Threshold used for calculations that want to separate between
     * high-precision formulas for relativistic and non-relativistic
     * use-cases, e.g. energy-binning algorithms.
     */
    constexpr float_X GAMMA_THRESH = 1.005_X;

    /** Threshold in radiation plugin between relativistic and non-relativistic regime
     *
     * This limit is used to decide between a pure 1-sqrt(1-x) calculation
     * and a 5th order Taylor approximation of 1-sqrt(1-x) to avoid halving
     * of significant digits due to the sqrt() evaluation at x = 1/gamma^2 near 0.0.
     * With 0.18 the relative error between Taylor approximation and real value
     * will be below 0.001% = 1e-5 * for x=1/gamma^2 < 0.18
     */
    constexpr float_X GAMMA_INV_SQUARE_RAD_THRESH = 0.18_X;

    namespace SI
    {
        /** base particle mass
         *
         * reference for massRatio in speciesDefinition.param
         *
         * unit: kg
         */
        constexpr float_64 BASE_MASS_SI = ELECTRON_MASS_SI;

        /** base particle charge
         *
         * reference for chargeRatio in speciesDefinition.param
         *
         * unit: C
         */
        constexpr float_64 BASE_CHARGE_SI = ELECTRON_CHARGE_SI;
    }
}
