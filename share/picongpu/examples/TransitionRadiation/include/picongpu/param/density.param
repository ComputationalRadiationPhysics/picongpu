/* Copyright 2013-2023 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Finn-Ole Carstens
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"

namespace picongpu
{
    namespace densityProfiles
    {
        struct GaussianCloudParam
        {
            /** Profile Formula:
             *     exponent = |globalCellPos - center| / sigma
             *     density = e^[ gasFactor * exponent^gasPower ]
             */
            static constexpr float_X gasFactor = -0.5;
            static constexpr float_X gasPower = 2.0;

            /** height of vacuum area on top border
             *
             * this vacuum is important because of the laser initialization,
             * which is done in the first cell of the simulation
             * unit: cells
             */
            static constexpr uint32_t vacuumCellsY = 0u;

            /** The central position of the density distribution
             *  unit: meter
             */
            static constexpr floatD_64 center_SI
                = float3_64(128 * 0.16e-6 / 2.0, 0.912e-5, 128 * 0.16e-6 / 2.0).shrink<simDim>();

            /** the distance from gasCenter_SI until the density decreases to its 1/e-th part
             *  unit: meter */
            static constexpr floatD_64 sigma_SI = float3_64(3.5e-6, 3.0e-6, 3.5e-6).shrink<simDim>();
        };

        /* definition of cloud profile */
        using GaussianCloud = GaussianCloudImpl<GaussianCloudParam>;
    } // namespace densityProfiles
} // namespace picongpu
