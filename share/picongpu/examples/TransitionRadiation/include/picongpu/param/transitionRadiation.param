/* Copyright 2013-2023 Rene Widera, Richard Pausch, Finn-Ole Carstens
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Definition of frequency space, number of observers, filters and form factors of
 * the transition radiation plugin.
 *
 * All values set here determine what the radiation plugin will compute.
 * On the comand line the plugin still needs to be called for each species the
 * transition radiation should be computed for.
 */
#pragma once

/**
 * Uses the same verbose level schemes as the radiation plugin.
 * radiation verbose level:
 * 0=nothing, 1=physics, 2=simulation_state, 4=memory, 8=critical
 */
#define PIC_VERBOSE_RADIATION 3

#include "picongpu/algorithms/Gamma.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/plugins/radiation/debug/PIConGPUVerboseLogRadiation.hpp"
#include "picongpu/traits/attribute/GetMass.hpp"


namespace picongpu
{
    namespace plugins
    {
        // initiate the formfactor namespaces from the radiation plugin
        namespace radiation
        {
            namespace radFormFactor_CIC_3D
            {
            }
            namespace radFormFactor_TSC_3D
            {
            }
            namespace radFormFactor_PCS_3D
            {
            }
            namespace radFormFactor_CIC_1Dy
            {
            }
            namespace radFormFactor_Gauss_spherical
            {
            }
            namespace radFormFactor_Gauss_cell
            {
            }
            namespace radFormFactor_incoherent
            {
            }
            namespace radFormFactor_coherent
            {
            }
        } // namespace radiation

        namespace transitionRadiation
        {
            namespace linearFrequencies
            {
                namespace SI
                {
                    //! mimimum frequency of the linear frequency scale in units of [1/s]
                    constexpr float_64 omegaMin = 0.0;
                    //! maximum frequency of the linear frequency scale in units of [1/s]
                    constexpr float_64 omegaMax = 1.06e16;
                } // namespace SI

                //! number of frequency values to compute in the linear frequency [unitless]
                constexpr unsigned int nOmega = 512;

            } // namespace linearFrequencies

            namespace logFrequencies
            {
                namespace SI
                {
                    //! mimimum frequency of the logarithmic frequency scale in units of [1/s]
                    constexpr float_64 omegaMin = 1.0e13;
                    //! maximum frequency of the logarithmic frequency scale in units of [1/s]
                    constexpr float_64 omegaMax = 1.0e17;
                } // namespace SI

                //! number of frequency values to compute in the logarithmic frequency [unitless]
                constexpr unsigned int nOmega = 256;

            } // namespace logFrequencies


            namespace listFrequencies
            {
                //! path to text file with frequencies
                constexpr char listLocation[] = "/path/to/frequency_list";
                //! number of frequency values to compute if frequencies are given in a file [unitless]
                constexpr unsigned int nOmega = 512;

            } // namespace listFrequencies


            /** selected mode of frequency scaling:
             *
             * options:
             * - linearFrequencies
             * - logFrequencies
             * - listFrequencies
             */
            namespace frequencies = logFrequencies;

            ///////////////////////////////////////////////////


            /** correct treatment of coherent radiation from macro particles
             *
             * These formfactors are the same as in the radiation plugin!
             * Choose different form factors in order to consider different particle shapes for radiation
             *  - ::picongpu::plugins::radiation::radFormFactor_CIC_3D ... CIC charge distribution
             *  - ::picongpu::plugins::radiation::radFormFactor_TSC_3D ... TSC charge distribution
             *  - ::picongpu::plugins::radiation::radFormFactor_PCS_3D ... PCS charge distribution
             *  - ::picongpu::plugins::radiation::radFormFactor_CIC_1Dy ... only CIC charge distribution in y
             *  - ::picongpu::plugins::radiation::radFormFactor_Gauss_spherical ... symmetric Gauss charge distribution
             *  - ::picongpu::plugins::radiation::radFormFactor_Gauss_cell ... Gauss charge distribution according to
             * cell size
             *  - ::picongpu::plugins::radiation::radFormFactor_incoherent ... only incoherent radiation
             *  - ::picongpu::plugins::radiation::radFormFactor_coherent ... only coherent radiation
             */
            namespace macroParticleFormFactor = ::picongpu::plugins::radiation::radFormFactor_Gauss_spherical;

            ///////////////////////////////////////////////////////////

            namespace parameters
            {
                // number of observation directions
                constexpr unsigned int nPhi = 128;
                constexpr unsigned int nTheta = 128;
                constexpr unsigned int nObserver = nPhi * nTheta;

                // theta goes from 0 to pi
                constexpr float_64 thetaMin = 0.0;
                constexpr float_64 thetaMax = picongpu::PI;

                // phi goes from 0 to 2*pi
                constexpr float_64 phiMin = 0.0;
                constexpr float_64 phiMax = 2 * picongpu::PI;
            } // end namespace parameters


            //! example of a filter for the relativistic Lorentz factor gamma
            struct GammaFilterFunctor
            {
                //! Gamma value above which the radiation is calculated, must be positive
                static constexpr float_X filterGamma = 5.0;

                template<typename T_Particle>
                HDINLINE void operator()(T_Particle& particle)
                {
                    if(picongpu::gamma<float_X>(
                           particle[picongpu::momentum_],
                           picongpu::traits::attribute::getMass(particle[picongpu::weighting_], particle))
                       >= filterGamma)
                        particle[picongpu::transitionRadiationMask_] = true;
                }
            };

            /** filter to (de)select particles for the radiation calculation
             *
             * to activate the filter:
             *   - goto file `speciesDefinition.param`
             *   - add the attribute `transitionRadiationMask` to the particle species
             *
             * @warning Do not remove this filter. Otherwise still standing electrons would generate NaNs in the
             * output of the plugin and transition radiation is scaling proportionally to gamma^2.
             */
            using GammaFilter = picongpu::particles::manipulators::generic::Free<GammaFilterFunctor>;

            /** Compute observation angles
             *
             * This function is used in the transition radiation plugin kernel to compute
             * the observation directions given as a unit vector pointing
             * towards a 'virtual' detector
             *
             * This default setup is an example of a 2D detector array. It computes
             * observation directions for 2D virtual detector field
             * with its center pointing toward the +y direction (for theta=0, phi=0)
             * with observation angles ranging from
             * theta = [angle_theta_start : angle_theta_end]
             * phi   = [angle_phi_start   : angle_phi_end  ]
             * Every observation_id_extern index moves the phi angle from its
             * start value toward its end value until the observation_id_extern
             * reaches N_split. After that the theta angle moves further from its
             * start value towards its end value while phi is reset to its start
             * value.
             *
             * The unit vector pointing towards the observing virtual detector
             * can be described using theta and phi by:
             * x_value = sin(theta) * cos(phi)
             * y_value = cos(theta)
             * z_value = sin(theta) * sin(phi)
             * These are the standard spherical coordinates.
             *
             * The example setup describes an detector array of
             * 128X128 detectors ranging from 0 to pi for the azimuth angle
             * theta and from 0 to 2 pi for the polar angle phi.
             *
             * @param    observation_id_extern
             *           int index that identifies each block on the GPU
             *           to compute the observation direction
             *
             * @return   unit vector pointing in observation direction
             *           type: float3_X
             */
            HDINLINE float3_X observationDirection(const int observation_id_extern)
            {
                /* generate two indices from single block index */
                /** split distance of given index
                 * pseudo-code:
                 * index_a = index / split_distance
                 * index_b = index % split_distance
                 */
                /** get index for computing angle theta: */
                const int indexTheta = observation_id_extern / parameters::nPhi;

                /** step width angle theta, set it to 0 if nTheta = 1 */
                const picongpu::float_64 deltaTheta = (parameters::nTheta > 1)
                    ? (parameters::thetaMax - parameters::thetaMin) / (parameters::nTheta - 1.0)
                    : 0.0;

                /** compute observation angles theta */
                const picongpu::float_64 theta = indexTheta * deltaTheta + parameters::thetaMin;

                /** get index for computing angle phi: */
                const int indexPhi = observation_id_extern % parameters::nPhi;

                /** step width angle phi, set it to 0 if nPhi = 1 */
                const picongpu::float_64 deltaPhi = (parameters::nPhi > 1)
                    ? (parameters::phiMax - parameters::phiMin) / (parameters::nPhi - 1.0)
                    : 0.0;

                /** compute observation angles phi */
                const picongpu::float_64 phi = indexPhi * deltaPhi - parameters::phiMin;

                /* helper functions for efficient trigonometric calculations */
                picongpu::float_32 sinPhi;
                picongpu::float_32 cosPhi;
                picongpu::float_32 sinTheta;
                picongpu::float_32 cosTheta;
                pmacc::math::sincos(precisionCast<picongpu::float_32>(phi), sinPhi, cosPhi);
                pmacc::math::sincos(precisionCast<picongpu::float_32>(theta), sinTheta, cosTheta);
                /** compute observation unit vector */
                return float3_X(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi);
            }

        } // namespace transitionRadiation
    } // namespace plugins
} // namespace picongpu
