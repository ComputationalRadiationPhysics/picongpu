/* Copyright 2013-2019 Axel Huebl, Rene Widera, Felix Schmitt,
 *                     Richard Pausch, Marco Garten
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>

namespace picongpu
{
namespace SI
{
    /** Base density in particles per m^3 in the density profiles.
     *
     * This is often taken as reference maximum density in normalized profiles.
     * Individual particle species can define a `densityRatio` flag relative
     * to this value.
     *
     * unit: ELEMENTS/m^3
     */
#ifndef PARAM_BASE_DENSITY_SI
#   define PARAM_BASE_DENSITY_SI 1.e25
#endif
     constexpr float_64 BASE_DENSITY_SI = PARAM_BASE_DENSITY_SI;
}

namespace densityProfiles
{
    PMACC_STRUCT(GaussianParameter,
        /** Profile Formula:
         *   constexpr float_X exponent = abs((y - gasCenter_SI) / gasSigma_SI);
         *   constexpr float_X density = exp(gasFactor * pow(exponent, gasPower));
         *
         *   takes `gasCenterLeft_SI      for y < gasCenterLeft_SI`,
         *         `gasCenterRight_SI     for y > gasCenterRight_SI`,
         *   and exponent = 0.0  for gasCenterLeft_SI < y < gasCenterRight_SI
         */
        (PMACC_C_VALUE(float_X, gasFactor, -1.0))
        (PMACC_C_VALUE(float_X, gasPower, 4.0))

        /** height of vacuum area on top border
         *
         *  this vacuum is important because of the laser initialization,
         *  which is done in the first cells of the simulation and
         *  assumes a charge-free volume
         *  unit: cells
         */
        (PMACC_C_VALUE(uint32_t, vacuumCellsY, 50))

        /** The central position of the gas distribution
          *  unit: meter
          */
        (PMACC_C_VALUE(float_64, gasCenterLeft_SI, 8.0e-5))
        (PMACC_C_VALUE(float_64, gasCenterRight_SI, 10.0e-5))

        /** the distance from gasCenter_SI until the gas density decreases to its 1/e-th part
          *  unit: meter
          */
        (PMACC_C_VALUE(float_64, gasSigmaLeft_SI, 8.0e-5))
        (PMACC_C_VALUE(float_64, gasSigmaRight_SI, 8.0e-5))
    ); /* struct GaussianParam */

    /* definition of density with Gaussian profile */
    using Gaussian = GaussianImpl< GaussianParameter >;
}
}
