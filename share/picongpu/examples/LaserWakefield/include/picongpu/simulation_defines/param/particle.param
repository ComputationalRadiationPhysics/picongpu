/* Copyright 2013-2017 Axel Huebl, Rene Widera, Marco Garten, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include <pmacc/nvidia/functors/Assign.hpp>

namespace picongpu
{
/* short namespace*/
namespace mCT = pmacc::math::CT;

// Macro Particle Configuration -------------------------------------------

namespace particles
{

/** a particle with a weighting below MIN_WEIGHTING will not
 *      be created / will be deleted
 *  unit: none */
constexpr float_X MIN_WEIGHTING = 10.0;

constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = 2u;

namespace startPosition
{

struct RandomParameter
{
    /** Count of particles per cell at initial state
     *  unit: none */
    static constexpr uint32_t numParticlesPerCell = TYPICAL_PARTICLES_PER_CELL;
};
/* definition of random particle start*/
using Random = RandomImpl<RandomParameter>;

struct QuietParameter
{
    /** Count of particles per cell per direction at initial state
     *  unit: none */
    using numParticlesPerDimension = mCT::shrinkTo<mCT::Int<1, TYPICAL_PARTICLES_PER_CELL, 1>, simDim>::type;
};

/* definition of quiet particle start*/
using Quiet = QuietImpl<QuietParameter>;


} //namespace startPosition

namespace manipulators
{

    struct SetIonToNeutral
    {
        template< typename T_Particle >
        DINLINE void operator()( T_Particle & particle )
        {
            using Particle = T_Particle;

            /** Number of bound electrons at initialization state of the neutral atom */
            float_X const protonNumber = traits::GetAtomicNumbers< T_Particle >::type::numberOfProtons;

            particle[ boundElectrons_ ] = protonNumber;
        }
    };
    using SetBoundElectrons = generic::Free< SetIonToNeutral >;
} //namespace manipulators

} //namespace particles

} //namespac picongpu
