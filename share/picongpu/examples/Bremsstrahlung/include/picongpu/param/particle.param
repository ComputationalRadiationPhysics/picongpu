/* Copyright 2013-2018 Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/startPosition/functors.def"
#include "picongpu/particles/manipulators/manipulators.def"

#include <pmacc/nvidia/functors/Add.hpp>
#include <pmacc/nvidia/functors/Assign.hpp>


namespace picongpu
{

namespace particles
{

    /** a particle with a weighting below MIN_WEIGHTING will not
     *      be created / will be deleted
     *  unit: none */
    constexpr float_X MIN_WEIGHTING = 1.0;

namespace startPosition
{

    struct RandomParameter10ppc
    {
        /** Count of particles per cell at initial state
         *  unit: none
         */
        static constexpr uint32_t numParticlesPerCell = 10u;
    };
    using Random10ppc = RandomImpl< RandomParameter10ppc >;


    struct QuietParameter1ppc
    {
        /** Count of particles per cell per direction at initial state
         *  unit: none
         */
        using numParticlesPerDimension = typename mCT::shrinkTo<
            mCT::Int< 1, 1, 1 >,
            simDim
        >::type;
    };
    using Quiet1ppc = QuietImpl< QuietParameter1ppc >;

  // for probe particles:
  CONST_VECTOR(
               float_X,
               3,
               InCellOffset,
               /* each x, y, z in-cell position component
                * in range [0.0, 1.0) */
               0.5,
               0.5,
               0.5
               );
  struct OnePositionParameter
  {
    static constexpr uint32_t numParticlesPerCell = 1u;
    const InCellOffset_t inCellOffset;
  };

  using OnePosition = OnePositionImpl< OnePositionParameter >;

} // namespace startPosition

    /** During unit normalization, we assume this is a typical
     *  number of particles per cell for normalization of weighted
     *  particle attributes.
     */
    constexpr uint32_t TYPICAL_PARTICLES_PER_CELL =
        startPosition::RandomParameter10ppc::numParticlesPerCell;

} // namespace particles
} // namespace picongpu
