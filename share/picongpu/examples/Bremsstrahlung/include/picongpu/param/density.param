/* Copyright 2013-2018 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>

namespace picongpu
{
namespace SI
{
    /** The maximum density in particles per m^3 in the gas distribution
     *  unit: ELEMENTS/m^3
     *
     * He (2e- / Atom ) with 1.e15 He / m^3
     *                      = 2.e15 e- / m^3 */

    constexpr float_64 BASE_DENSITY_SI = 5.9e28; // solid gold

}

namespace densityProfiles
{

struct FoilFunctor
{

    /**
     * This formula uses SI quantities only
     * The profile will be multiplied by BASE_DENSITY_SI.
     *
     * @param position_SI total offset including all slides [in meter]
     * @param cellSize_SI cell sizes [in meter]
     *
     * @return float_X density [normalized to 1.0]
     */
    HDINLINE float_X operator()(
        float2_64 pos,
        const float3_64& cellSize_SI
    )
    {
        /* center point of foil */
        constexpr float_64 plateauPos = 4e-6;
        /* thickness of foil */
        constexpr float_64 plateauLength = 2e-6;
        /* gaussian ramp length of density above the surface */
        constexpr float_64 rampLength = 0.01e-6;

        using namespace pmacc::algorithms::math;

        if( abs( pos.y() - plateauPos) < plateauLength / 2.0 )
        {
            return 1.0_X;
        }
        const float_64 d = math::min(
            abs( pos.y() - plateauPos + plateauLength / 2.0 ),
            abs( pos.y() - plateauPos - plateauLength / 2.0 )
        );
        return float_X( exp( -d * d / ( 2.0_X * rampLength * rampLength ) ) );
    }
};

//! definition of free formula profile
using Foil = FreeFormulaImpl< FoilFunctor >;


  /* for probe particles: */

// put probe particles every 4th cell in X, Y(, Z)
using ProbeYCell = EveryNthCellImpl<
  mCT::UInt32<
    4,
    1,
    4
    >
  >;

  /* for tracer particles: */

    struct FreeFormulaFunctor
    {
        /** This formula uses SI quantities only
         *
         * The profile will be multiplied by BASE_DENSITY.
         *
         * @param position_SI total offset including all slides [in meter]
         * @param cellSize_SI cell sizes [in meter]
         *
         * @return float_X density [normalized to 1.0]
         */
        HDINLINE float_X operator()(
            const floatD_64& position_SI,
            const float3_64& cellSize_SI
        )
        {
            /* add particle in cell at center of foil profile */
          const float3_64 position_start_SI( 1.e-6, 3.e-6, 0.0 );

            /* from all cells ... */
            const pmacc::math::UInt64< simDim > cell_id( position_SI / cellSize_SI.shrink< simDim >() );

            /* ... we calculate the corresponding "center" cell to init the particle in ... */
            const pmacc::math::UInt64< simDim > cell_start(
                precisionCast< uint64_t >(
                    math::floor(
                        position_start_SI.shrink< simDim >() /
                        cellSize_SI.shrink< simDim >()
                    )
                )
            );

            /* ... and only in that center cell the density is 1.0, outside zero */
            bool isStartCell = true;
            for( uint64_t d = 0; d < simDim; ++d )
                if( cell_id[d] != cell_start[d] )
                    isStartCell = false;

            if( isStartCell )
                return 1.0;

            return 0.0;
        }
    };
  
    /* definition of free formula profile */
    using FreeFormula = FreeFormulaImpl< FreeFormulaFunctor >;

} // namespace densityProfiles
} // namepsace picongpu
