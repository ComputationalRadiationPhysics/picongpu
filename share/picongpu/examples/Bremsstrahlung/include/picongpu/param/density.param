/* Copyright 2013-2019 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/densityProfiles/profiles.def"
/* preprocessor struct generator */
#include <pmacc/preprocessor/struct.hpp>

namespace picongpu
{
namespace SI
{
    /** The maximum density in particles per m^3 in the gas distribution
     *  unit: ELEMENTS/m^3
     *
     * He (2e- / Atom ) with 1.e15 He / m^3
     *                      = 2.e15 e- / m^3 */

    constexpr float_64 BASE_DENSITY_SI = 5.9e28; // solid gold

}

namespace densityProfiles
{

struct FoilFunctor
{

    /**
     * This formula uses SI quantities only
     * The profile will be multiplied by BASE_DENSITY_SI.
     *
     * @param position_SI total offset including all slides [in meter]
     * @param cellSize_SI cell sizes [in meter]
     *
     * @return float_X density [normalized to 1.0]
     */
    HDINLINE float_X operator()(
        float2_64 pos,
        const float3_64& cellSize_SI
    )
    {
        /* center point of foil */
        constexpr float_64 plateauPos = 4e-6;
        /* thickness of foil */
        constexpr float_64 plateauLength = 2e-6;
        /* gaussian ramp length of density above the surface */
        constexpr float_64 rampLength = 0.1e-6;

        using namespace pmacc::algorithms::math;

        if( abs( pos.y() - plateauPos) < plateauLength / 2.0 )
        {
            return 1.0_X;
        }
        const float_64 d = math::min(
            abs( pos.y() - plateauPos + plateauLength / 2.0 ),
            abs( pos.y() - plateauPos - plateauLength / 2.0 )
        );
        return float_X( exp( -d * d / ( 2.0_X * rampLength * rampLength ) ) );
    }
};

//! definition of free formula profile
using Foil = FreeFormulaImpl< FoilFunctor >;

} // namespace densityProfiles
} // namepsace picongpu
