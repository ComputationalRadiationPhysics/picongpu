/* Copyright 2013-2019 Heiko Burau, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

namespace picongpu
{
  namespace radiation_observer
  {
    /** Compute observation angles
     *
     * This function is used in the Radiation plug-in kernel to compute
     * the observation directions given as a unit vector pointing
     * towards a 'virtual' detector
     *
     * @param    observation_id_extern
     *           int index that identifies each block on the GPU
     *           to compute the observation direction
     *
     * @return   unit vector pointing in observation direction
     *           type: vector_64
     *
     */
    HDINLINE vector_64 observation_direction(const int observation_id_extern)
    {
      /** This computes observation directions for one octant
       *  of a sphere around the simulation area.
       *  The axises of the octant point towards:
       *  (+1,0,0) ; (0,+1,0) ; (0,0,-1)
       */

      /* generate two indices from single block index */
      constexpr int N_angle_split = 16; /* index split distance */
      /* get column index for computing angle theta: */
      const int my_index_theta = observation_id_extern / N_angle_split;
      /* get row index for computing angle phi: */
      const int my_index_phi = observation_id_extern % N_angle_split;

      /*  range for BOTH angles */
      constexpr picongpu::float_64 angle_range= picongpu::PI/2.0;

      /* angle stepwidth for BOTH angles */
      constexpr picongpu::float_64 delta_angle =  1.0 * angle_range / (N_angle_split-1);

      /* compute both angles */
      const picongpu::float_64 theta(  my_index_theta * delta_angle  + 0.5*picongpu::PI );
      const picongpu::float_64 phi(    my_index_phi   * delta_angle  );

      /* compute unit vector */
            picongpu::float_32 sinPhi;
      picongpu::float_32 cosPhi;
      picongpu::float_32 sinTheta;
      picongpu::float_32 cosTheta;
      math::sincos(precisionCast<picongpu::float_32>(phi), sinPhi, cosPhi);
      math::sincos(precisionCast<picongpu::float_32>(theta), sinTheta, cosTheta);
      return vector_64( sinTheta*cosPhi , sinTheta*sinPhi , cosTheta ) ;


    }

  } // end namespace radiation_observer
} // end namespace picongpu
