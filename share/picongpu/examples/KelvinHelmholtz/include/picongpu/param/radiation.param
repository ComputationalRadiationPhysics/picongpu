/* Copyright 2013-2019 Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

  /*
    radiation verbose level:
    0=nothing, 1=physics, 2=simulation_state, 4=memory, 8=critical
  */

#define PIC_VERBOSE_RADIATION 3

#include "picongpu/plugins/radiation/parameters.hpp"
#include "picongpu/plugins/radiation/debug/PIConGPUVerboseLogRadiation.hpp"
#include "picongpu/algorithms/Gamma.def"
#include "picongpu/traits/attribute/GetMass.hpp"
#include "picongpu/particles/manipulators/manipulators.def"

namespace picongpu
{
namespace rad_linear_frequencies
{
namespace SI
{
constexpr float_64 omega_min = 0.0;
constexpr float_64 omega_max = 1.06e16;
}

constexpr unsigned int N_omega = 1024; // number of frequencies
}

namespace rad_log_frequencies
{
namespace SI
{
// plasma omega = sqrt( (electron density * (1.6e-19)^2) / (8.854e-12 * 9.11e-31) )
//              = 1.78e14 1/s
constexpr float_64 omega_pe = 1.78e14;
constexpr float_64 omega_min = 0.1 * omega_pe;
constexpr float_64 omega_max = 200 * omega_pe;
}

constexpr unsigned int N_omega = 1024; // number of frequencies
}


namespace rad_frequencies_from_list
{
//const char listLocation[] = "/scratch/s5960712/list001.freq";
constexpr unsigned int N_omega = 2048; // number of frequencies
}


namespace radiation_frequencies = rad_log_frequencies;


namespace radiationNyquist
{
  constexpr float_32 NyquistFactor = 0.5;
}

///////////////////////////////////////////////////


  // correct treatment of coherent and incoherent  radiation from macroparticles
  /* Choose different form factors in order to consider different  particle shapes for radiation
   *  - radFormFactor_CIC_3D ... CIC charge distribution
   *  - radFormFactor_TSC_3D ... TSC charge distribution
   *  - radFormFactor_PCS_3D ... PCS charge distribution
   *  - radFormFactor_CIC_1Dy ... only CIC charge distribution in y
   *  - radFormFactor_Gauss_spherical ... symmetric Gauss charge distribution
   *  - radFormFactor_Gauss_cell ... Gauss charge distribution according to cell size
   *  - radFormFactor_incoherent ... only incoherent radiation
   *  - radFormFactor_coherent ... only coherent radiation
   */
  namespace radFormFactor_CIC_3D { }
  namespace radFormFactor_TSC_3D { }
  namespace radFormFactor_PCS_3D { }
  namespace radFormFactor_CIC_1Dy { }
  namespace radFormFactor_Gauss_spherical { }
  namespace radFormFactor_Gauss_cell { }
  namespace radFormFactor_incoherent { }
  namespace radFormFactor_coherent { }

  namespace radFormFactor = radFormFactor_Gauss_spherical;


///////////////////////////////////////////////////////////


namespace parameters
{


constexpr unsigned int N_observer = 256; // number of looking directions

} /* end namespace parameters */

namespace radiation
{
    /** activate particles for radiation */
    struct GammaFilterFunctor
    {
        static constexpr float_X radiationGamma = 5.0;

        template< typename T_Particle >
        HDINLINE void operator()( T_Particle& particle )
        {
            if(
                picongpu::gamma<float_X>(
                    particle[ picongpu::momentum_ ],
                    picongpu::traits::attribute::getMass(
                        particle[ picongpu::weighting_ ],
                        particle
                    )
                ) >= radiationGamma
            )
                particle[ picongpu::radiationMask_ ] = true;
        }
    };


    /* filter to enable radiation for electrons
     *
     * to enable the filter:
     *   - goto file `speciesDefinition.param`
     *   - add the attribute `radiationMask` to the electron species
     */
    using RadiationParticleFilter = picongpu::particles::manipulators::generic::Free<
        GammaFilterFunctor
    >;

} // namespace radiation

//////////////////////////////////////////////////


// add a window function weighting to the radiation in order
// to avoid ringing effects from sharpe boundaries
// default: no window function via `radWindowFunctionNone`

/* Choose different window function in order to get better ringing reduction
 * radWindowFunctionTriangle
 * radWindowFunctionHamming
 * radWindowFunctionTriplett
 * radWindowFunctionGauss
 * radWindowFunctionNone
 */
namespace radWindowFunctionTriangle { }
namespace radWindowFunctionHamming { }
namespace radWindowFunctionTriplett { }
namespace radWindowFunctionGauss { }
namespace radWindowFunctionNone { }

namespace radWindowFunction = radWindowFunctionTriangle;


}//namespace picongpu
