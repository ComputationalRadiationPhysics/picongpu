/* Copyright 2013-2017 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch,
 *                     Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configure laser profiles.
 */

#pragma once


namespace picongpu
{
    namespace laser
    {
        /** cell from top where the laser is initialized
         *
         * if `initPlaneY == 0` than the absorber are disabled.
         * if `initPlaneY > absorbercells negative Y` the negative absorber in y
         * direction is enabled
         *
         * valid ranges:
         *   - initPlaneY == 0
         *   - absorber cells negative Y < initPlaneY < cells in y direction of the top gpu
        */
        constexpr uint32_t initPlaneY = 80;
    }

    namespace laserGaussianBeam
    {
        namespace SI
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** Convert the normalized laser strength parameter a0 to Volt per meter */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

            /** unit: none */
            constexpr float_64 _A0  = 5.0;

            /** unit: Volt / meter */
            constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

            /** unit: Volt / meter */
            //constexpr float_64 AMPLITUDE_SI = 1.738e13;

            /** Pulse length: sigma of std. gauss for intensity (E^2)
             *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
             *                                          [    2.354820045     ]
             *  Info:             FWHM_of_Intensity = FWHM_Illumination
             *                      = what a experimentalist calls "pulse duration"
             *
             *  unit: seconds (1 sigma) */
            constexpr float_64 PULSE_LENGTH_SI = 25.0e-15 / 2.354820045;

            /** beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
             *                             [   1.17741    ]
             *
             *  unit: meter */
            constexpr float_64 W0_SI = 5.0e-6 / 1.17741;
            /** the distance to the laser focus in y-direction
             *  unit: meter */
            constexpr float_64 FOCUS_POS_SI = 2.0e-6;
        }
        /** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
         *
         *  unit: none */
        constexpr float_64 PULSE_INIT = 3. * 2.354820045;

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        constexpr float_X LASER_PHASE = 0.0;

        /** Use only the 0th Laguerremode for a standard Gaussian */
        constexpr uint32_t MODENUMBER = 0;
        PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, 1.0);
        /* This is just an example for a more complicated set of Laguerre modes. */
        //constexpr uint32_t MODENUMBER = 12;
        //PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, -1.0, 0.0300519, 0.319461, -0.23783, 0.0954839, 0.0318653, -0.144547, 0.0249208, -0.111989, 0.0434385, -0.030038, -0.00896321, -0.0160788);

        /** Available polarisation types
         */
        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        /** Polarization selection
         */
        constexpr PolarisationType Polarisation = LINEAR_X;
    }

    namespace laserPulseFrontTilt
    {
        namespace SI
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: Volt / meter */
            constexpr float_64 AMPLITUDE_SI = 1.738e13;

            /** Pulse length: sigma of std. gauss for intensity (E^2)
                *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
                *                                          [   2.354820045      ]
                *  Info:             FWHM_of_Intensity = FWHM_Illumination
                *                      = what a experimentalist calls "pulse duration"
                *  unit: seconds (1 sigma) */
            constexpr float_64 PULSE_LENGTH_SI = 25.0e-15 / 2.354820045;

            /** beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
             *                             [   1.17741    ]
             *  unit: meter */
            constexpr float_64 W0_SI = 5.0e-6 / 1.17741;

            /** the distance to the laser focus in y-direction
                *  unit: meter */
            constexpr float_64 FOCUS_POS_SI = 2.0e-6;

            /** the tilt angle between laser propagation in y-direction and laser axis in
                *  x-direction (0 degree == no tilt)
                *  unit: degree */
            constexpr float_64 TILT_X_SI = 0;
        }
        /** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
        *  unit: none */
        constexpr float_64 PULSE_INIT = 3. * 2.354820045;

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        constexpr float_X LASER_PHASE = 0.0;

        /** Available polarisation types
         */
        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        /** Polarization selection
         */
        constexpr PolarisationType Polarisation = LINEAR_X;
    }

    namespace laserPlaneWave
    {
        // NOT-symetric sinus used: starts with phase=0 --> E-field=0
        namespace SI
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

            /** unit: none */
            constexpr float_64 _A0  = 5.0;

            /** unit: Volt / meter */
            constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

            /** unit: Volt / meter */
            //constexpr float_64 AMPLITUDE_SI = 1.738e13;

            /** The profile of the test Lasers 0 and 2 can be stretched by a
             *      constexprant area between the up and downramp
             *  unit: seconds */
            constexpr float_64 LASER_NOFOCUS_CONSTANT_SI = 0.0;

            /** Pulse length: sigma of std. gauss for intensity (E^2)
             *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
             *                                          [    2.354820045     ]
             *  Info:             FWHM_of_Intensity = FWHM_Illumination
             *                      = what a experimentalist calls "pulse duration"
             *  unit: seconds (1 sigma) */
            constexpr float_64 PULSE_LENGTH_SI = 25.0e-15 / 2.354820045;

        }

        /** The laser pulse will be initialized half of PULSE_INIT times of the PULSE_LENGTH before and after the plateau
         *  unit: none */
        constexpr float_64 RAMP_INIT = 3. * 2.354820045;

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        constexpr float_X LASER_PHASE = 0.0;

        /** Available polarisation types
         */
        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        /** Polarization selection
         */
        constexpr PolarisationType Polarisation = LINEAR_X;
    }

    namespace laserWavepacket
    {
    // Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
    namespace SI
    {
        /** unit: meter */
        constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

        /** UNITCONV */
        constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

        /** unit: W / m^2 */
        // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

        /** unit: none */
        constexpr float_64 _A0  = 5.0;

        /** unit: Volt / meter */
        constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

        /** unit: Volt / meter */
        //constexpr float_64 AMPLITUDE_SI = 1.738e13;

        /** The profile of the test Lasers 0 and 2 can be stretched by a
         *      constexprant area between the up and downramp
         *  unit: seconds */
        constexpr float_64 LASER_NOFOCUS_CONSTANT_SI = 0.0;

        /** Pulse length: sigma of std. gauss for intensity (E^2)
         *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
         *                                          [    2.354820045     ]
         *  Info:             FWHM_of_Intensity = FWHM_Illumination
         *                      = what a experimentalist calls "pulse duration"
         *  unit: seconds (1 sigma) */
        constexpr float_64 PULSE_LENGTH_SI = 25.0e-15 / 2.354820045;

        /** beam waist: distance from the axis where the pulse intensity (E^2)
         *              decreases to its 1/e^2-th part,
         *              WO_X_SI is this distance in x-direction
         *              W0_Z_SI is this distance in z-direction
         *              if both values are equal, the laser has a circular shape in x-z
         * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
         *                             [   1.17741    ]
         *  unit: meter */
        constexpr float_64 W0_X_SI = 5.0e-6 / 1.17741;
        constexpr float_64 W0_Z_SI = W0_X_SI;

    }
        /** The laser pulse will be initialized half of PULSE_INIT times of the PULSE_LENGTH before plateau
        and half at the end of the plateau
         *  unit: none */
        constexpr float_64 RAMP_INIT = 3. * 2.354820045;

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        constexpr float_X LASER_PHASE = 0.0;

        /** Available polarisation types
         */
        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        /** Polarization selection
         */
        constexpr PolarisationType Polarisation = LINEAR_X;
    }


    namespace laserPolynom
    {
        // Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
        namespace SI
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

            /** unit: none */
            constexpr float_64 _A0  = 5.0;

            /** unit: Volt / meter */
            constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

            /** unit: Volt / meter */
            //constexpr float_64 AMPLITUDE_SI = 1.738e13;


            /** Pulse length:
             *  PULSE_LENGTH_SI = total length of polynamial laser pulse
             *  Rise time = 0.5 * PULSE_LENGTH_SI
             *  Fall time = 0.5 * PULSE_LENGTH_SI
             *  in order to compare to a gaussian pulse: rise  time = sqrt{2} * T_{FWHM}
             *  unit: seconds  */
            constexpr float_64 PULSE_LENGTH_SI = 25.0e-15 / 2.354820045;

            /** beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             *  unit: meter */
            constexpr float_64 W0x_SI = 4.246e-6; // waist in x-direction
            constexpr float_64 W0z_SI = W0x_SI; // waist in z-direction
        }

        /** laser phase shift (no shift: 0.0)
         *
         * sin(omega*time + laser_phase): starts with phase=0 at center --> E-field=0 at center
         *
         * unit: rad, periodic in 2*pi
         */
        constexpr float_X LASER_PHASE = 0.0;
    }

    namespace laserNone
    {
        namespace SI
        {
            /** unit: meter */
            constexpr float_64 WAVE_LENGTH_SI = 0.0;

            /** unit: Volt /meter */
            constexpr float_64 AMPLITUDE_SI = 0.0;

            constexpr float_64 PULSE_LENGTH_SI = 0.0;
        }
    }

}
